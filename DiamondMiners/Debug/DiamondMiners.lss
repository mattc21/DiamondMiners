
DiamondMiners.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000023e  00800100  00002a8a  00002b1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002a8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000359  0080033e  0080033e  00002d5c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002d5c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002db8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000438  00000000  00000000  00002df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003cb7  00000000  00000000  00003230  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000148f  00000000  00000000  00006ee7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000025fa  00000000  00000000  00008376  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bf4  00000000  00000000  0000a970  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fd5  00000000  00000000  0000b564  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000274a  00000000  00000000  0000c539  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004d8  00000000  00000000  0000ec83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9b 00 	jmp	0x136	; 0x136 <__ctors_end>
       4:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
       8:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
       c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      10:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      14:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__vector_5>
      18:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      1c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      20:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      24:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      28:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      2c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      30:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      34:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      38:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      3c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      40:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <__vector_16>
      44:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      48:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      4c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      50:	0c 94 a7 0c 	jmp	0x194e	; 0x194e <__vector_20>
      54:	0c 94 65 0c 	jmp	0x18ca	; 0x18ca <__vector_21>
      58:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      5c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      60:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      64:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      68:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      6c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      70:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      74:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      78:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      7c:	5c 0e       	add	r5, r28
      7e:	4d 0e       	add	r4, r29
      80:	50 0e       	add	r5, r16
      82:	53 0e       	add	r5, r19
      84:	56 0e       	add	r5, r22
      86:	59 0e       	add	r5, r25
      88:	47 0e       	add	r4, r23
      8a:	4a 0e       	add	r4, r26

0000008c <__trampolines_end>:
      8c:	44 69       	ori	r20, 0x94	; 148
      8e:	61 6d       	ori	r22, 0xD1	; 209
      90:	6f 6e       	ori	r22, 0xEF	; 239
      92:	64 20       	and	r6, r4
      94:	43 6f       	ori	r20, 0xF3	; 243
      96:	75 6e       	ori	r23, 0xE5	; 229
      98:	74 20       	and	r7, r4
      9a:	25 64       	ori	r18, 0x45	; 69
	...

0000009d <__c.2354>:
      9d:	43 48 45 41 54 4d 4f 44 45 20 44 49 53 41 42 4c     CHEATMODE DISABL
      ad:	45 44 00                                            ED.

000000b0 <__c.2352>:
      b0:	43 48 45 41 54 4d 4f 44 45 20 45 4e 41 42 4c 45     CHEATMODE ENABLE
      c0:	44 00                                               D.

000000c2 <__c.2342>:
      c2:	50 72 65 73 73 20 61 20 62 75 74 74 6f 6e 20 74     Press a button t
      d2:	6f 20 73 74 61 72 74 20 61 67 61 69 6e 00           o start again.

000000e0 <__c.2340>:
      e0:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000ea <__c.2299>:
      ea:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 70 72     CSSE2010/7201 pr
      fa:	6f 6a 65 63 74 20 62 79 20 4d 61 74 74 68 65 77     oject by Matthew
     10a:	20 43 68 65 6e 20 34 36 33 38 37 31 31 30 00         Chen 46387110.

00000119 <__c.2297>:
     119:	44 69 61 6d 6f 6e 64 20 4d 69 6e 65 72 73 00        Diamond Miners.

00000128 <__c.2040>:
     128:	1b 5b 32 4a 00                                      .[2J.

0000012d <__c.2025>:
     12d:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

00000136 <__ctors_end>:
     136:	11 24       	eor	r1, r1
     138:	1f be       	out	0x3f, r1	; 63
     13a:	cf ef       	ldi	r28, 0xFF	; 255
     13c:	d8 e0       	ldi	r29, 0x08	; 8
     13e:	de bf       	out	0x3e, r29	; 62
     140:	cd bf       	out	0x3d, r28	; 61

00000142 <__do_copy_data>:
     142:	13 e0       	ldi	r17, 0x03	; 3
     144:	a0 e0       	ldi	r26, 0x00	; 0
     146:	b1 e0       	ldi	r27, 0x01	; 1
     148:	ea e8       	ldi	r30, 0x8A	; 138
     14a:	fa e2       	ldi	r31, 0x2A	; 42
     14c:	02 c0       	rjmp	.+4      	; 0x152 <__do_copy_data+0x10>
     14e:	05 90       	lpm	r0, Z+
     150:	0d 92       	st	X+, r0
     152:	ae 33       	cpi	r26, 0x3E	; 62
     154:	b1 07       	cpc	r27, r17
     156:	d9 f7       	brne	.-10     	; 0x14e <__do_copy_data+0xc>

00000158 <__do_clear_bss>:
     158:	26 e0       	ldi	r18, 0x06	; 6
     15a:	ae e3       	ldi	r26, 0x3E	; 62
     15c:	b3 e0       	ldi	r27, 0x03	; 3
     15e:	01 c0       	rjmp	.+2      	; 0x162 <.do_clear_bss_start>

00000160 <.do_clear_bss_loop>:
     160:	1d 92       	st	X+, r1

00000162 <.do_clear_bss_start>:
     162:	a7 39       	cpi	r26, 0x97	; 151
     164:	b2 07       	cpc	r27, r18
     166:	e1 f7       	brne	.-8      	; 0x160 <.do_clear_bss_loop>
     168:	0e 94 9a 0b 	call	0x1734	; 0x1734 <main>
     16c:	0c 94 43 15 	jmp	0x2a86	; 0x2a86 <_exit>

00000170 <__bad_interrupt>:
     170:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000174 <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1<<PCIE1);
     174:	e8 e6       	ldi	r30, 0x68	; 104
     176:	f0 e0       	ldi	r31, 0x00	; 0
     178:	80 81       	ld	r24, Z
     17a:	82 60       	ori	r24, 0x02	; 2
     17c:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1<<PCIF1);
     17e:	8b b3       	in	r24, 0x1b	; 27
     180:	82 60       	ori	r24, 0x02	; 2
     182:	8b bb       	out	0x1b, r24	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     184:	ec e6       	ldi	r30, 0x6C	; 108
     186:	f0 e0       	ldi	r31, 0x00	; 0
     188:	80 81       	ld	r24, Z
     18a:	8f 60       	ori	r24, 0x0F	; 15
     18c:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     18e:	10 92 3e 03 	sts	0x033E, r1	; 0x80033e <__data_end>
     192:	08 95       	ret

00000194 <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
	if(queue_length > 0) {
     194:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <__data_end>
     198:	18 16       	cp	r1, r24
     19a:	14 f5       	brge	.+68     	; 0x1e0 <button_pushed+0x4c>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     19c:	80 91 3f 03 	lds	r24, 0x033F	; 0x80033f <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     1a0:	6f b7       	in	r22, 0x3f	; 63
		cli();
     1a2:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     1a4:	91 e0       	ldi	r25, 0x01	; 1
     1a6:	09 c0       	rjmp	.+18     	; 0x1ba <button_pushed+0x26>
			button_queue[i-1] = button_queue[i];
     1a8:	f9 01       	movw	r30, r18
     1aa:	e1 5c       	subi	r30, 0xC1	; 193
     1ac:	fc 4f       	sbci	r31, 0xFC	; 252
     1ae:	40 81       	ld	r20, Z
     1b0:	f9 01       	movw	r30, r18
     1b2:	e2 5c       	subi	r30, 0xC2	; 194
     1b4:	fc 4f       	sbci	r31, 0xFC	; 252
     1b6:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     1b8:	9f 5f       	subi	r25, 0xFF	; 255
     1ba:	29 2f       	mov	r18, r25
     1bc:	30 e0       	ldi	r19, 0x00	; 0
     1be:	40 91 3e 03 	lds	r20, 0x033E	; 0x80033e <__data_end>
     1c2:	04 2e       	mov	r0, r20
     1c4:	00 0c       	add	r0, r0
     1c6:	55 0b       	sbc	r21, r21
     1c8:	24 17       	cp	r18, r20
     1ca:	35 07       	cpc	r19, r21
     1cc:	6c f3       	brlt	.-38     	; 0x1a8 <button_pushed+0x14>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     1ce:	90 91 3e 03 	lds	r25, 0x033E	; 0x80033e <__data_end>
     1d2:	91 50       	subi	r25, 0x01	; 1
     1d4:	90 93 3e 03 	sts	0x033E, r25	; 0x80033e <__data_end>
		
		if(interrupts_were_enabled) {
     1d8:	66 23       	and	r22, r22
     1da:	1c f4       	brge	.+6      	; 0x1e2 <button_pushed+0x4e>
			// Turn them back on again
			sei();
     1dc:	78 94       	sei
     1de:	08 95       	ret
	// Empty the button push queue
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     1e0:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     1e2:	08 95       	ret

000001e4 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     1e4:	1f 92       	push	r1
     1e6:	0f 92       	push	r0
     1e8:	0f b6       	in	r0, 0x3f	; 63
     1ea:	0f 92       	push	r0
     1ec:	11 24       	eor	r1, r1
     1ee:	2f 93       	push	r18
     1f0:	3f 93       	push	r19
     1f2:	4f 93       	push	r20
     1f4:	8f 93       	push	r24
     1f6:	9f 93       	push	r25
     1f8:	ef 93       	push	r30
     1fa:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     1fc:	43 b1       	in	r20, 0x03	; 3
     1fe:	4f 70       	andi	r20, 0x0F	; 15
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
     200:	80 e0       	ldi	r24, 0x00	; 0
     202:	26 c0       	rjmp	.+76     	; 0x250 <__vector_5+0x6c>
		if(queue_length < BUTTON_QUEUE_SIZE && 
     204:	90 91 3e 03 	lds	r25, 0x033E	; 0x80033e <__data_end>
     208:	94 30       	cpi	r25, 0x04	; 4
     20a:	0c f5       	brge	.+66     	; 0x24e <__vector_5+0x6a>
     20c:	24 2f       	mov	r18, r20
     20e:	30 e0       	ldi	r19, 0x00	; 0
     210:	08 2e       	mov	r0, r24
     212:	02 c0       	rjmp	.+4      	; 0x218 <__vector_5+0x34>
     214:	35 95       	asr	r19
     216:	27 95       	ror	r18
     218:	0a 94       	dec	r0
     21a:	e2 f7       	brpl	.-8      	; 0x214 <__vector_5+0x30>
     21c:	20 ff       	sbrs	r18, 0
     21e:	17 c0       	rjmp	.+46     	; 0x24e <__vector_5+0x6a>
				(button_state & (1<<pin)) && 
				!(last_button_state & (1<<pin))) {
     220:	20 91 43 03 	lds	r18, 0x0343	; 0x800343 <last_button_state>
     224:	30 e0       	ldi	r19, 0x00	; 0
     226:	08 2e       	mov	r0, r24
     228:	02 c0       	rjmp	.+4      	; 0x22e <__vector_5+0x4a>
     22a:	35 95       	asr	r19
     22c:	27 95       	ror	r18
     22e:	0a 94       	dec	r0
     230:	e2 f7       	brpl	.-8      	; 0x22a <__vector_5+0x46>
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
				(button_state & (1<<pin)) && 
     232:	20 fd       	sbrc	r18, 0
     234:	0c c0       	rjmp	.+24     	; 0x24e <__vector_5+0x6a>
				!(last_button_state & (1<<pin))) {
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     236:	e0 91 3e 03 	lds	r30, 0x033E	; 0x80033e <__data_end>
     23a:	91 e0       	ldi	r25, 0x01	; 1
     23c:	9e 0f       	add	r25, r30
     23e:	90 93 3e 03 	sts	0x033E, r25	; 0x80033e <__data_end>
     242:	0e 2e       	mov	r0, r30
     244:	00 0c       	add	r0, r0
     246:	ff 0b       	sbc	r31, r31
     248:	e1 5c       	subi	r30, 0xC1	; 193
     24a:	fc 4f       	sbci	r31, 0xFC	; 252
     24c:	80 83       	st	Z, r24
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
     24e:	8f 5f       	subi	r24, 0xFF	; 255
     250:	84 30       	cpi	r24, 0x04	; 4
     252:	c0 f2       	brcs	.-80     	; 0x204 <__vector_5+0x20>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     254:	40 93 43 03 	sts	0x0343, r20	; 0x800343 <last_button_state>
     258:	ff 91       	pop	r31
     25a:	ef 91       	pop	r30
     25c:	9f 91       	pop	r25
     25e:	8f 91       	pop	r24
     260:	4f 91       	pop	r20
     262:	3f 91       	pop	r19
     264:	2f 91       	pop	r18
     266:	0f 90       	pop	r0
     268:	0f be       	out	0x3f, r0	; 63
     26a:	0f 90       	pop	r0
     26c:	1f 90       	pop	r1
     26e:	18 95       	reti

00000270 <initialise_display>:
static const uint8_t miners_display[MATRIX_NUM_COLUMNS] = 
		{125, 69, 69, 57, 0, 16, 56, 124, 56, 16, 0, 125, 33, 17, 33, 125};

void initialise_display(void) {
	// clear the LED matrix
	ledmatrix_clear();
     270:	0e 94 fa 07 	call	0xff4	; 0xff4 <ledmatrix_clear>
     274:	08 95       	ret

00000276 <start_display>:
}

void start_display(void) {
     276:	1f 93       	push	r17
     278:	cf 93       	push	r28
     27a:	df 93       	push	r29
     27c:	cd b7       	in	r28, 0x3d	; 61
     27e:	de b7       	in	r29, 0x3e	; 62
     280:	28 97       	sbiw	r28, 0x08	; 8
     282:	0f b6       	in	r0, 0x3f	; 63
     284:	f8 94       	cli
     286:	de bf       	out	0x3e, r29	; 62
     288:	0f be       	out	0x3f, r0	; 63
     28a:	cd bf       	out	0x3d, r28	; 61
	PixelColour colour;
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
     28c:	0e 94 fa 07 	call	0xff4	; 0xff4 <ledmatrix_clear>
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     290:	10 e0       	ldi	r17, 0x00	; 0
     292:	29 c0       	rjmp	.+82     	; 0x2e6 <start_display+0x70>
		col_data = miners_display[col];
     294:	e1 2f       	mov	r30, r17
     296:	f0 e0       	ldi	r31, 0x00	; 0
     298:	e2 5e       	subi	r30, 0xE2	; 226
     29a:	fe 4f       	sbci	r31, 0xFE	; 254
     29c:	90 81       	ld	r25, Z
		// using the LSB as the colour determining bit, 1 is red, 0 is green
		if (col_data & 0x01) {
     29e:	90 ff       	sbrs	r25, 0
     2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <start_display+0x30>
			colour = COLOUR_RED;
     2a2:	2f e0       	ldi	r18, 0x0F	; 15
     2a4:	01 c0       	rjmp	.+2      	; 0x2a8 <start_display+0x32>
		} else {
			colour = COLOUR_GREEN;
     2a6:	20 ef       	ldi	r18, 0xF0	; 240
		}
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t i=7; i>=1; i--) {
     2a8:	87 e0       	ldi	r24, 0x07	; 7
     2aa:	13 c0       	rjmp	.+38     	; 0x2d2 <start_display+0x5c>
			// If the relevant font bit is set, we make this a coloured pixel, else blank
			if(col_data & 0x80) {
     2ac:	99 23       	and	r25, r25
     2ae:	44 f4       	brge	.+16     	; 0x2c0 <start_display+0x4a>
				column_colour_data[i] = colour;
     2b0:	e1 e0       	ldi	r30, 0x01	; 1
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	ec 0f       	add	r30, r28
     2b6:	fd 1f       	adc	r31, r29
     2b8:	e8 0f       	add	r30, r24
     2ba:	f1 1d       	adc	r31, r1
     2bc:	20 83       	st	Z, r18
     2be:	07 c0       	rjmp	.+14     	; 0x2ce <start_display+0x58>
				} else {
				column_colour_data[i] = 0;
     2c0:	e1 e0       	ldi	r30, 0x01	; 1
     2c2:	f0 e0       	ldi	r31, 0x00	; 0
     2c4:	ec 0f       	add	r30, r28
     2c6:	fd 1f       	adc	r31, r29
     2c8:	e8 0f       	add	r30, r24
     2ca:	f1 1d       	adc	r31, r1
     2cc:	10 82       	st	Z, r1
			}
			col_data <<= 1;
     2ce:	99 0f       	add	r25, r25
		} else {
			colour = COLOUR_GREEN;
		}
		// go through the top 7 bits (not the bottom one as that was our colour bit)
		// and set any to be the correct colour
		for(uint8_t i=7; i>=1; i--) {
     2d0:	81 50       	subi	r24, 0x01	; 1
     2d2:	81 11       	cpse	r24, r1
     2d4:	eb cf       	rjmp	.-42     	; 0x2ac <start_display+0x36>
				} else {
				column_colour_data[i] = 0;
			}
			col_data <<= 1;
		}
		column_colour_data[0] = 0;
     2d6:	19 82       	std	Y+1, r1	; 0x01
		ledmatrix_update_column(col, column_colour_data);
     2d8:	be 01       	movw	r22, r28
     2da:	6f 5f       	subi	r22, 0xFF	; 255
     2dc:	7f 4f       	sbci	r23, 0xFF	; 255
     2de:	81 2f       	mov	r24, r17
     2e0:	0e 94 dd 07 	call	0xfba	; 0xfba <ledmatrix_update_column>
	PixelColour colour;
	MatrixColumn column_colour_data;
	uint8_t col_data;
		
	ledmatrix_clear(); // start by clearing the LED matrix
	for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++) {
     2e4:	1f 5f       	subi	r17, 0xFF	; 255
     2e6:	10 31       	cpi	r17, 0x10	; 16
     2e8:	a8 f2       	brcs	.-86     	; 0x294 <start_display+0x1e>
			col_data <<= 1;
		}
		column_colour_data[0] = 0;
		ledmatrix_update_column(col, column_colour_data);
	}
}
     2ea:	28 96       	adiw	r28, 0x08	; 8
     2ec:	0f b6       	in	r0, 0x3f	; 63
     2ee:	f8 94       	cli
     2f0:	de bf       	out	0x3e, r29	; 62
     2f2:	0f be       	out	0x3f, r0	; 63
     2f4:	cd bf       	out	0x3d, r28	; 61
     2f6:	df 91       	pop	r29
     2f8:	cf 91       	pop	r28
     2fa:	1f 91       	pop	r17
     2fc:	08 95       	ret

000002fe <update_square_colour>:

void update_square_colour(uint8_t x, uint8_t y, uint16_t object) {
	// first check that this is a square within the game field
	// if outside the game field, don't update anything
	if (x < 0 || x >= WIDTH || y < 0 || y >= HEIGHT) {
     2fe:	80 31       	cpi	r24, 0x10	; 16
     300:	58 f5       	brcc	.+86     	; 0x358 <update_square_colour+0x5a>
     302:	68 30       	cpi	r22, 0x08	; 8
     304:	48 f5       	brcc	.+82     	; 0x358 <update_square_colour+0x5a>
		return;
	}
	
	// determine which colour corresponds to this object
	PixelColour colour;
	if (object == PLAYER) {
     306:	41 30       	cpi	r20, 0x01	; 1
     308:	51 05       	cpc	r21, r1
     30a:	b9 f0       	breq	.+46     	; 0x33a <update_square_colour+0x3c>
		colour = MATRIX_COLOUR_PLAYER;
	} else if (object == FACING) {
     30c:	42 30       	cpi	r20, 0x02	; 2
     30e:	51 05       	cpc	r21, r1
     310:	b1 f0       	breq	.+44     	; 0x33e <update_square_colour+0x40>
		colour = MATRIX_COLOUR_FACING;
	} else if (object == UNBREAKABLE || object == BREAKABLE) {
     312:	9a 01       	movw	r18, r20
     314:	23 50       	subi	r18, 0x03	; 3
     316:	31 09       	sbc	r19, r1
     318:	22 30       	cpi	r18, 0x02	; 2
     31a:	31 05       	cpc	r19, r1
     31c:	90 f0       	brcs	.+36     	; 0x342 <update_square_colour+0x44>
		colour = MATRIX_COLOUR_WALL;
	} else if (object == DISCOVERED_BREAKABLE) {
     31e:	47 30       	cpi	r20, 0x07	; 7
     320:	51 05       	cpc	r21, r1
     322:	89 f0       	breq	.+34     	; 0x346 <update_square_colour+0x48>
		colour = MATRIX_COLOUR_DISCOVERED_BREAKABLE;
	} else if (object == DIAMOND) {
     324:	45 30       	cpi	r20, 0x05	; 5
     326:	51 05       	cpc	r21, r1
     328:	81 f0       	breq	.+32     	; 0x34a <update_square_colour+0x4c>
		colour = MATRIX_COLOUR_DIAMOND;
	} else if (object == UNDISCOVERED) {
     32a:	46 30       	cpi	r20, 0x06	; 6
     32c:	51 05       	cpc	r21, r1
     32e:	79 f0       	breq	.+30     	; 0x34e <update_square_colour+0x50>
		colour = MATRIX_COLOUR_UNDISCOVERED;
	} else if (object == BOMB) {
     330:	48 30       	cpi	r20, 0x08	; 8
     332:	51 05       	cpc	r21, r1
     334:	71 f4       	brne	.+28     	; 0x352 <update_square_colour+0x54>
		colour = MATRIX_COLOUR_BOMB;
     336:	41 e1       	ldi	r20, 0x11	; 17
     338:	0d c0       	rjmp	.+26     	; 0x354 <update_square_colour+0x56>
	}
	
	// determine which colour corresponds to this object
	PixelColour colour;
	if (object == PLAYER) {
		colour = MATRIX_COLOUR_PLAYER;
     33a:	4f e0       	ldi	r20, 0x0F	; 15
     33c:	0b c0       	rjmp	.+22     	; 0x354 <update_square_colour+0x56>
	} else if (object == FACING) {
		colour = MATRIX_COLOUR_FACING;
     33e:	41 e0       	ldi	r20, 0x01	; 1
     340:	09 c0       	rjmp	.+18     	; 0x354 <update_square_colour+0x56>
	} else if (object == UNBREAKABLE || object == BREAKABLE) {
		colour = MATRIX_COLOUR_WALL;
     342:	4f ed       	ldi	r20, 0xDF	; 223
     344:	07 c0       	rjmp	.+14     	; 0x354 <update_square_colour+0x56>
	} else if (object == DISCOVERED_BREAKABLE) {
		colour = MATRIX_COLOUR_DISCOVERED_BREAKABLE;
     346:	4c e3       	ldi	r20, 0x3C	; 60
     348:	05 c0       	rjmp	.+10     	; 0x354 <update_square_colour+0x56>
	} else if (object == DIAMOND) {
		colour = MATRIX_COLOUR_DIAMOND;
     34a:	40 ef       	ldi	r20, 0xF0	; 240
     34c:	03 c0       	rjmp	.+6      	; 0x354 <update_square_colour+0x56>
	} else if (object == UNDISCOVERED) {
		colour = MATRIX_COLOUR_UNDISCOVERED;
     34e:	45 e3       	ldi	r20, 0x35	; 53
     350:	01 c0       	rjmp	.+2      	; 0x354 <update_square_colour+0x56>
	} else if (object == BOMB) {
		colour = MATRIX_COLOUR_BOMB;
	} else {
		// anything unexpected (or empty) will be black
		colour = MATRIX_COLOUR_EMPTY;
     352:	40 e0       	ldi	r20, 0x00	; 0
	}

	// update the pixel at the given location with this colour
	ledmatrix_update_pixel(x, y, colour);
     354:	0e 94 be 07 	call	0xf7c	; 0xf7c <ledmatrix_update_pixel>
     358:	08 95       	ret

0000035a <initialise_game_state>:
 * initialise the game state, sets up the playing field, visibility
 * the player and the player direction indicator
 */
void initialise_game_state(void) {
	// initialise the player position and the facing position
	player_x = PLAYER_START_X;
     35a:	10 92 54 05 	sts	0x0554, r1	; 0x800554 <player_x>
	player_y = PLAYER_START_Y;
     35e:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <player_y>
	facing_x = FACING_START_X;
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	80 93 57 05 	sts	0x0557, r24	; 0x800557 <facing_x>
	facing_y = FACING_START_Y;
     368:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <facing_y>
	bomb_x = NO_BOMB;
     36c:	9f ef       	ldi	r25, 0xFF	; 255
     36e:	90 93 56 05 	sts	0x0556, r25	; 0x800556 <bomb_x>
	bomb_y = NO_BOMB;
     372:	90 93 4d 04 	sts	0x044D, r25	; 0x80044d <bomb_y>
	facing_visible = 1;
     376:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <facing_visible>
	bomb_visible = 1;
     37a:	80 93 d0 04 	sts	0x04D0, r24	; 0x8004d0 <bomb_visible>
	game_over = 0;
     37e:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <game_over>
	steps = 0;
     382:	10 92 cf 04 	sts	0x04CF, r1	; 0x8004cf <steps>
	game_initialised = 1;
     386:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <game_initialised>
	vision_field_on = 0;
     38a:	10 92 ce 04 	sts	0x04CE, r1	; 0x8004ce <vision_field_on>
	// go through and initialise the state of the playing_field
	for (int x = 0; x < WIDTH; x++) {
     38e:	40 e0       	ldi	r20, 0x00	; 0
     390:	50 e0       	ldi	r21, 0x00	; 0
     392:	38 c0       	rjmp	.+112    	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
		for (int y = 0; y < HEIGHT; y++) {
			// initialise this square based on the starting layout
			// the indices here are to ensure the starting layout
			// could be easily visualised when declared
			playing_field[x][y] = starting_layout[HEIGHT - 1 - y][x];
     394:	e7 e0       	ldi	r30, 0x07	; 7
     396:	f0 e0       	ldi	r31, 0x00	; 0
     398:	e2 1b       	sub	r30, r18
     39a:	f3 0b       	sbc	r31, r19
     39c:	e2 95       	swap	r30
     39e:	f2 95       	swap	r31
     3a0:	f0 7f       	andi	r31, 0xF0	; 240
     3a2:	fe 27       	eor	r31, r30
     3a4:	e0 7f       	andi	r30, 0xF0	; 240
     3a6:	fe 27       	eor	r31, r30
     3a8:	e4 0f       	add	r30, r20
     3aa:	f5 1f       	adc	r31, r21
     3ac:	ee 0f       	add	r30, r30
     3ae:	ff 1f       	adc	r31, r31
     3b0:	e2 5c       	subi	r30, 0xC2	; 194
     3b2:	fd 4f       	sbci	r31, 0xFD	; 253
     3b4:	60 81       	ld	r22, Z
     3b6:	71 81       	ldd	r23, Z+1	; 0x01
     3b8:	ca 01       	movw	r24, r20
     3ba:	88 0f       	add	r24, r24
     3bc:	99 1f       	adc	r25, r25
     3be:	88 0f       	add	r24, r24
     3c0:	99 1f       	adc	r25, r25
     3c2:	88 0f       	add	r24, r24
     3c4:	99 1f       	adc	r25, r25
     3c6:	fc 01       	movw	r30, r24
     3c8:	e2 0f       	add	r30, r18
     3ca:	f3 1f       	adc	r31, r19
     3cc:	ee 0f       	add	r30, r30
     3ce:	ff 1f       	adc	r31, r31
     3d0:	e3 5b       	subi	r30, 0xB3	; 179
     3d2:	fc 4f       	sbci	r31, 0xFC	; 252
     3d4:	71 83       	std	Z+1, r23	; 0x01
     3d6:	60 83       	st	Z, r22
			// set all squares to start not visible, this will be
			// updated once the display is initialised as well
			visible[x][y] = 0;
     3d8:	fc 01       	movw	r30, r24
     3da:	ee 52       	subi	r30, 0x2E	; 46
     3dc:	fb 4f       	sbci	r31, 0xFB	; 251
     3de:	e2 0f       	add	r30, r18
     3e0:	f3 1f       	adc	r31, r19
     3e2:	10 82       	st	Z, r1
			discovered[x][y] = 0;
     3e4:	82 5b       	subi	r24, 0xB2	; 178
     3e6:	9b 4f       	sbci	r25, 0xFB	; 251
     3e8:	fc 01       	movw	r30, r24
     3ea:	e2 0f       	add	r30, r18
     3ec:	f3 1f       	adc	r31, r19
     3ee:	10 82       	st	Z, r1
	steps = 0;
	game_initialised = 1;
	vision_field_on = 0;
	// go through and initialise the state of the playing_field
	for (int x = 0; x < WIDTH; x++) {
		for (int y = 0; y < HEIGHT; y++) {
     3f0:	2f 5f       	subi	r18, 0xFF	; 255
     3f2:	3f 4f       	sbci	r19, 0xFF	; 255
     3f4:	02 c0       	rjmp	.+4      	; 0x3fa <initialise_game_state+0xa0>
     3f6:	20 e0       	ldi	r18, 0x00	; 0
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	28 30       	cpi	r18, 0x08	; 8
     3fc:	31 05       	cpc	r19, r1
     3fe:	54 f2       	brlt	.-108    	; 0x394 <initialise_game_state+0x3a>
	game_over = 0;
	steps = 0;
	game_initialised = 1;
	vision_field_on = 0;
	// go through and initialise the state of the playing_field
	for (int x = 0; x < WIDTH; x++) {
     400:	4f 5f       	subi	r20, 0xFF	; 255
     402:	5f 4f       	sbci	r21, 0xFF	; 255
     404:	40 31       	cpi	r20, 0x10	; 16
     406:	51 05       	cpc	r21, r1
     408:	b4 f3       	brlt	.-20     	; 0x3f6 <initialise_game_state+0x9c>
			// updated once the display is initialised as well
			visible[x][y] = 0;
			discovered[x][y] = 0;
		}
	}
}
     40a:	08 95       	ret

0000040c <initialise_game_state_alt>:
 * initialise the game state, sets up the playing field, visibility
 * the player and the player direction indicator
 */
void initialise_game_state_alt(void) {
	// initialise the player position and the facing position
	player_x = PLAYER_START_X;
     40c:	10 92 54 05 	sts	0x0554, r1	; 0x800554 <player_x>
	player_y = PLAYER_START_Y;
     410:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <player_y>
	facing_x = FACING_START_X;
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	80 93 57 05 	sts	0x0557, r24	; 0x800557 <facing_x>
	facing_y = FACING_START_Y;
     41a:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <facing_y>
	bomb_x = NO_BOMB;
     41e:	9f ef       	ldi	r25, 0xFF	; 255
     420:	90 93 56 05 	sts	0x0556, r25	; 0x800556 <bomb_x>
	bomb_y = NO_BOMB;
     424:	90 93 4d 04 	sts	0x044D, r25	; 0x80044d <bomb_y>
	facing_visible = 1;
     428:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <facing_visible>
	bomb_visible = 1;
     42c:	80 93 d0 04 	sts	0x04D0, r24	; 0x8004d0 <bomb_visible>
	game_over = 0;
     430:	10 92 d1 04 	sts	0x04D1, r1	; 0x8004d1 <game_over>
	steps = 0;
     434:	10 92 cf 04 	sts	0x04CF, r1	; 0x8004cf <steps>
	game_initialised = 1;
     438:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <game_initialised>
	// go through and initialise the state of the playing_field
	for (int x = 0; x < WIDTH; x++) {
     43c:	40 e0       	ldi	r20, 0x00	; 0
     43e:	50 e0       	ldi	r21, 0x00	; 0
     440:	38 c0       	rjmp	.+112    	; 0x4b2 <initialise_game_state_alt+0xa6>
		for (int y = 0; y < HEIGHT; y++) {
			// initialise this square based on the starting layout
			// the indices here are to ensure the starting layout
			// could be easily visualised when declared
			playing_field[x][y] = alternate_layout[HEIGHT - 1 - y][x];
     442:	e7 e0       	ldi	r30, 0x07	; 7
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	e2 1b       	sub	r30, r18
     448:	f3 0b       	sbc	r31, r19
     44a:	e2 95       	swap	r30
     44c:	f2 95       	swap	r31
     44e:	f0 7f       	andi	r31, 0xF0	; 240
     450:	fe 27       	eor	r31, r30
     452:	e0 7f       	andi	r30, 0xF0	; 240
     454:	fe 27       	eor	r31, r30
     456:	e4 0f       	add	r30, r20
     458:	f5 1f       	adc	r31, r21
     45a:	ee 0f       	add	r30, r30
     45c:	ff 1f       	adc	r31, r31
     45e:	e2 5c       	subi	r30, 0xC2	; 194
     460:	fe 4f       	sbci	r31, 0xFE	; 254
     462:	60 81       	ld	r22, Z
     464:	71 81       	ldd	r23, Z+1	; 0x01
     466:	ca 01       	movw	r24, r20
     468:	88 0f       	add	r24, r24
     46a:	99 1f       	adc	r25, r25
     46c:	88 0f       	add	r24, r24
     46e:	99 1f       	adc	r25, r25
     470:	88 0f       	add	r24, r24
     472:	99 1f       	adc	r25, r25
     474:	fc 01       	movw	r30, r24
     476:	e2 0f       	add	r30, r18
     478:	f3 1f       	adc	r31, r19
     47a:	ee 0f       	add	r30, r30
     47c:	ff 1f       	adc	r31, r31
     47e:	e3 5b       	subi	r30, 0xB3	; 179
     480:	fc 4f       	sbci	r31, 0xFC	; 252
     482:	71 83       	std	Z+1, r23	; 0x01
     484:	60 83       	st	Z, r22
			// set all squares to start not visible, this will be
			// updated once the display is initialised as well
			visible[x][y] = 0;
     486:	fc 01       	movw	r30, r24
     488:	ee 52       	subi	r30, 0x2E	; 46
     48a:	fb 4f       	sbci	r31, 0xFB	; 251
     48c:	e2 0f       	add	r30, r18
     48e:	f3 1f       	adc	r31, r19
     490:	10 82       	st	Z, r1
			discovered[x][y] = 0;
     492:	82 5b       	subi	r24, 0xB2	; 178
     494:	9b 4f       	sbci	r25, 0xFB	; 251
     496:	fc 01       	movw	r30, r24
     498:	e2 0f       	add	r30, r18
     49a:	f3 1f       	adc	r31, r19
     49c:	10 82       	st	Z, r1
	game_over = 0;
	steps = 0;
	game_initialised = 1;
	// go through and initialise the state of the playing_field
	for (int x = 0; x < WIDTH; x++) {
		for (int y = 0; y < HEIGHT; y++) {
     49e:	2f 5f       	subi	r18, 0xFF	; 255
     4a0:	3f 4f       	sbci	r19, 0xFF	; 255
     4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <initialise_game_state_alt+0x9c>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	28 30       	cpi	r18, 0x08	; 8
     4aa:	31 05       	cpc	r19, r1
     4ac:	54 f2       	brlt	.-108    	; 0x442 <initialise_game_state_alt+0x36>
	bomb_visible = 1;
	game_over = 0;
	steps = 0;
	game_initialised = 1;
	// go through and initialise the state of the playing_field
	for (int x = 0; x < WIDTH; x++) {
     4ae:	4f 5f       	subi	r20, 0xFF	; 255
     4b0:	5f 4f       	sbci	r21, 0xFF	; 255
     4b2:	40 31       	cpi	r20, 0x10	; 16
     4b4:	51 05       	cpc	r21, r1
     4b6:	b4 f3       	brlt	.-20     	; 0x4a4 <initialise_game_state_alt+0x98>
			// updated once the display is initialised as well
			visible[x][y] = 0;
			discovered[x][y] = 0;
		}
	}	
}
     4b8:	08 95       	ret

000004ba <in_bounds>:
	initialise_game_display();
}

uint8_t in_bounds(uint8_t x, uint8_t y) {
	// a square is in bounds if 0 <= x < WIDTH && 0 <= y < HEIGHT
	return x >= 0 && x < WIDTH && y >= 0 && y < HEIGHT;
     4ba:	80 31       	cpi	r24, 0x10	; 16
     4bc:	20 f4       	brcc	.+8      	; 0x4c6 <in_bounds+0xc>
     4be:	68 30       	cpi	r22, 0x08	; 8
     4c0:	20 f0       	brcs	.+8      	; 0x4ca <in_bounds+0x10>
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	08 95       	ret
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	08 95       	ret
     4ca:	81 e0       	ldi	r24, 0x01	; 1
}
     4cc:	08 95       	ret

000004ce <get_object_at>:

uint8_t get_object_at(uint8_t x, uint8_t y) {
     4ce:	cf 93       	push	r28
     4d0:	df 93       	push	r29
     4d2:	c8 2f       	mov	r28, r24
     4d4:	d6 2f       	mov	r29, r22
	// check the bounds, anything outside the boundss
	// will be considered an unbreakable wall
	if (!in_bounds(x,y)) {
     4d6:	0e 94 5d 02 	call	0x4ba	; 0x4ba <in_bounds>
     4da:	88 23       	and	r24, r24
     4dc:	81 f0       	breq	.+32     	; 0x4fe <get_object_at+0x30>
		return UNBREAKABLE;
	} else {
		//if in the bounds, just index into the array
		return playing_field[x][y];
     4de:	ec 2f       	mov	r30, r28
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	ee 0f       	add	r30, r30
     4e4:	ff 1f       	adc	r31, r31
     4e6:	ee 0f       	add	r30, r30
     4e8:	ff 1f       	adc	r31, r31
     4ea:	ee 0f       	add	r30, r30
     4ec:	ff 1f       	adc	r31, r31
     4ee:	ed 0f       	add	r30, r29
     4f0:	f1 1d       	adc	r31, r1
     4f2:	ee 0f       	add	r30, r30
     4f4:	ff 1f       	adc	r31, r31
     4f6:	e3 5b       	subi	r30, 0xB3	; 179
     4f8:	fc 4f       	sbci	r31, 0xFC	; 252
     4fa:	80 81       	ld	r24, Z
     4fc:	01 c0       	rjmp	.+2      	; 0x500 <get_object_at+0x32>

uint8_t get_object_at(uint8_t x, uint8_t y) {
	// check the bounds, anything outside the boundss
	// will be considered an unbreakable wall
	if (!in_bounds(x,y)) {
		return UNBREAKABLE;
     4fe:	84 e0       	ldi	r24, 0x04	; 4
	} else {
		//if in the bounds, just index into the array
		return playing_field[x][y];
	}
}
     500:	df 91       	pop	r29
     502:	cf 91       	pop	r28
     504:	08 95       	ret

00000506 <flash_facing>:

void flash_facing(void) {
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
	// only flash the facing cursor if it is in bounds
	if (in_bounds(facing_x, facing_y)) {
     50a:	d0 91 55 05 	lds	r29, 0x0555	; 0x800555 <facing_y>
     50e:	c0 91 57 05 	lds	r28, 0x0557	; 0x800557 <facing_x>
     512:	6d 2f       	mov	r22, r29
     514:	8c 2f       	mov	r24, r28
     516:	0e 94 5d 02 	call	0x4ba	; 0x4ba <in_bounds>
     51a:	88 23       	and	r24, r24
     51c:	d9 f0       	breq	.+54     	; 0x554 <flash_facing+0x4e>
		if (facing_visible) {
     51e:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <facing_visible>
     522:	88 23       	and	r24, r24
     524:	59 f0       	breq	.+22     	; 0x53c <flash_facing+0x36>
			// we need to flash the facing cursor off, it should be replaced by
			// the colour of the piece which is at that location
			uint16_t piece_at_cursor = get_object_at(facing_x, facing_y);
     526:	6d 2f       	mov	r22, r29
     528:	8c 2f       	mov	r24, r28
     52a:	0e 94 67 02 	call	0x4ce	; 0x4ce <get_object_at>
     52e:	48 2f       	mov	r20, r24
     530:	50 e0       	ldi	r21, 0x00	; 0
			update_square_colour(facing_x, facing_y, piece_at_cursor);
     532:	6d 2f       	mov	r22, r29
     534:	8c 2f       	mov	r24, r28
     536:	0e 94 7f 01 	call	0x2fe	; 0x2fe <update_square_colour>
     53a:	06 c0       	rjmp	.+12     	; 0x548 <flash_facing+0x42>
		
		} else {
			// we need to flash the facing cursor on
			update_square_colour(facing_x, facing_y, FACING);
     53c:	42 e0       	ldi	r20, 0x02	; 2
     53e:	50 e0       	ldi	r21, 0x00	; 0
     540:	6d 2f       	mov	r22, r29
     542:	8c 2f       	mov	r24, r28
     544:	0e 94 7f 01 	call	0x2fe	; 0x2fe <update_square_colour>
		}
		facing_visible = 1 - facing_visible; //alternate between 0 and 1
     548:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <facing_visible>
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	89 1b       	sub	r24, r25
     550:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <facing_visible>
	}
}
     554:	df 91       	pop	r29
     556:	cf 91       	pop	r28
     558:	08 95       	ret

0000055a <is_game_over>:
}

uint8_t is_game_over(void) {
	// initially the game never ends
	return game_over; // Note game_over = 0 if game hasn't ended and 1 otherwise
}
     55a:	80 91 d1 04 	lds	r24, 0x04D1	; 0x8004d1 <game_over>
     55e:	08 95       	ret

00000560 <discoverable_dfs>:
 * squares reachable from here visible. If a wall is broken at a position
 * (x,y), this function should be called with coordinates (x,y)
 * YOU SHOULD NOT NEED TO MODIFY THIS FUNCTION
 * Matthew Chen Edit: Spoiler. I modified it. Now it wont update square colour if its outside of field of vision and field of vision is active.
 */
void discoverable_dfs(uint8_t x, uint8_t y) {
     560:	df 92       	push	r13
     562:	ef 92       	push	r14
     564:	ff 92       	push	r15
     566:	0f 93       	push	r16
     568:	1f 93       	push	r17
     56a:	cf 93       	push	r28
     56c:	df 93       	push	r29
     56e:	f8 2e       	mov	r15, r24
     570:	e6 2e       	mov	r14, r22
	uint8_t x_adj, y_adj, object_here;
	// set the current square to be visible and update display
	visible[x][y] = 1;
     572:	08 2f       	mov	r16, r24
     574:	10 e0       	ldi	r17, 0x00	; 0
     576:	c6 2f       	mov	r28, r22
     578:	d0 e0       	ldi	r29, 0x00	; 0
     57a:	c8 01       	movw	r24, r16
     57c:	88 0f       	add	r24, r24
     57e:	99 1f       	adc	r25, r25
     580:	88 0f       	add	r24, r24
     582:	99 1f       	adc	r25, r25
     584:	88 0f       	add	r24, r24
     586:	99 1f       	adc	r25, r25
     588:	fc 01       	movw	r30, r24
     58a:	ee 52       	subi	r30, 0x2E	; 46
     58c:	fb 4f       	sbci	r31, 0xFB	; 251
     58e:	ec 0f       	add	r30, r28
     590:	fd 1f       	adc	r31, r29
     592:	21 e0       	ldi	r18, 0x01	; 1
     594:	20 83       	st	Z, r18
	discovered[x][y] = 1;
     596:	82 5b       	subi	r24, 0xB2	; 178
     598:	9b 4f       	sbci	r25, 0xFB	; 251
     59a:	fc 01       	movw	r30, r24
     59c:	ec 0f       	add	r30, r28
     59e:	fd 1f       	adc	r31, r29
     5a0:	20 83       	st	Z, r18
	object_here = get_object_at(x, y);
     5a2:	8f 2d       	mov	r24, r15
     5a4:	0e 94 67 02 	call	0x4ce	; 0x4ce <get_object_at>
     5a8:	d8 2e       	mov	r13, r24
	
	// Make sure that if field of vision is on, we don't update square colours that are outside of field of vision
	uint8_t 
	
	distance = abs(x - player_x) + abs(y - player_y);
     5aa:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <player_x>
     5ae:	08 1b       	sub	r16, r24
     5b0:	11 09       	sbc	r17, r1
     5b2:	c8 01       	movw	r24, r16
     5b4:	99 23       	and	r25, r25
     5b6:	24 f4       	brge	.+8      	; 0x5c0 <discoverable_dfs+0x60>
     5b8:	88 27       	eor	r24, r24
     5ba:	99 27       	eor	r25, r25
     5bc:	80 1b       	sub	r24, r16
     5be:	91 0b       	sbc	r25, r17
     5c0:	9c 01       	movw	r18, r24
     5c2:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <player_y>
     5c6:	c8 1b       	sub	r28, r24
     5c8:	d1 09       	sbc	r29, r1
     5ca:	ce 01       	movw	r24, r28
     5cc:	22 f4       	brpl	.+8      	; 0x5d6 <discoverable_dfs+0x76>
     5ce:	88 27       	eor	r24, r24
     5d0:	99 27       	eor	r25, r25
     5d2:	8c 1b       	sub	r24, r28
     5d4:	9d 0b       	sbc	r25, r29
     5d6:	ac 01       	movw	r20, r24
     5d8:	82 0f       	add	r24, r18
	if (vision_field_on == 0 || (distance <= 2 || (distance == 3 && (abs(x - player_x) == 1 || abs(y - player_y) == 1)))) {
     5da:	90 91 ce 04 	lds	r25, 0x04CE	; 0x8004ce <vision_field_on>
     5de:	99 23       	and	r25, r25
     5e0:	51 f0       	breq	.+20     	; 0x5f6 <discoverable_dfs+0x96>
     5e2:	83 30       	cpi	r24, 0x03	; 3
     5e4:	40 f0       	brcs	.+16     	; 0x5f6 <discoverable_dfs+0x96>
     5e6:	83 30       	cpi	r24, 0x03	; 3
     5e8:	61 f4       	brne	.+24     	; 0x602 <discoverable_dfs+0xa2>
     5ea:	21 30       	cpi	r18, 0x01	; 1
     5ec:	31 05       	cpc	r19, r1
     5ee:	19 f0       	breq	.+6      	; 0x5f6 <discoverable_dfs+0x96>
     5f0:	41 30       	cpi	r20, 0x01	; 1
     5f2:	51 05       	cpc	r21, r1
     5f4:	31 f4       	brne	.+12     	; 0x602 <discoverable_dfs+0xa2>
		update_square_colour(x, y, object_here);
     5f6:	4d 2d       	mov	r20, r13
     5f8:	50 e0       	ldi	r21, 0x00	; 0
     5fa:	6e 2d       	mov	r22, r14
     5fc:	8f 2d       	mov	r24, r15
     5fe:	0e 94 7f 01 	call	0x2fe	; 0x2fe <update_square_colour>
	}
	
	// we can continue exploring from this square if it is empty
	if (object_here == EMPTY_SQUARE || object_here == DIAMOND) {
     602:	dd 20       	and	r13, r13
     604:	49 f1       	breq	.+82     	; 0x658 <discoverable_dfs+0xf8>
     606:	85 e0       	ldi	r24, 0x05	; 5
     608:	d8 12       	cpse	r13, r24
     60a:	2e c0       	rjmp	.+92     	; 0x668 <discoverable_dfs+0x108>
     60c:	28 c0       	rjmp	.+80     	; 0x65e <discoverable_dfs+0xfe>
		// consider all 4 adjacent square
		for (int i = 0; i < NUM_DIRECTIONS; i++) {
			x_adj = x + directions[i][0];
     60e:	f8 01       	movw	r30, r16
     610:	ee 0f       	add	r30, r30
     612:	ff 1f       	adc	r31, r31
     614:	e2 5d       	subi	r30, 0xD2	; 210
     616:	fe 4f       	sbci	r31, 0xFE	; 254
     618:	c0 81       	ld	r28, Z
     61a:	cf 0d       	add	r28, r15
			y_adj = y + directions[i][1];
     61c:	d1 81       	ldd	r29, Z+1	; 0x01
     61e:	de 0d       	add	r29, r14
			// if this square is not visible yet, it should be explored
			if (in_bounds(x_adj, y_adj) && !visible[x_adj][y_adj]) {
     620:	6d 2f       	mov	r22, r29
     622:	8c 2f       	mov	r24, r28
     624:	0e 94 5d 02 	call	0x4ba	; 0x4ba <in_bounds>
     628:	88 23       	and	r24, r24
     62a:	99 f0       	breq	.+38     	; 0x652 <discoverable_dfs+0xf2>
     62c:	ec 2f       	mov	r30, r28
     62e:	f0 e0       	ldi	r31, 0x00	; 0
     630:	ee 0f       	add	r30, r30
     632:	ff 1f       	adc	r31, r31
     634:	ee 0f       	add	r30, r30
     636:	ff 1f       	adc	r31, r31
     638:	ee 0f       	add	r30, r30
     63a:	ff 1f       	adc	r31, r31
     63c:	ee 52       	subi	r30, 0x2E	; 46
     63e:	fb 4f       	sbci	r31, 0xFB	; 251
     640:	ed 0f       	add	r30, r29
     642:	f1 1d       	adc	r31, r1
     644:	80 81       	ld	r24, Z
     646:	81 11       	cpse	r24, r1
     648:	04 c0       	rjmp	.+8      	; 0x652 <discoverable_dfs+0xf2>
				// this recursive call implements a depth first search
				// the visible array ensures termination
				discoverable_dfs(x_adj, y_adj);
     64a:	6d 2f       	mov	r22, r29
     64c:	8c 2f       	mov	r24, r28
     64e:	0e 94 b0 02 	call	0x560	; 0x560 <discoverable_dfs>
	}
	
	// we can continue exploring from this square if it is empty
	if (object_here == EMPTY_SQUARE || object_here == DIAMOND) {
		// consider all 4 adjacent square
		for (int i = 0; i < NUM_DIRECTIONS; i++) {
     652:	0f 5f       	subi	r16, 0xFF	; 255
     654:	1f 4f       	sbci	r17, 0xFF	; 255
     656:	05 c0       	rjmp	.+10     	; 0x662 <discoverable_dfs+0x102>
     658:	00 e0       	ldi	r16, 0x00	; 0
     65a:	10 e0       	ldi	r17, 0x00	; 0
     65c:	02 c0       	rjmp	.+4      	; 0x662 <discoverable_dfs+0x102>
     65e:	00 e0       	ldi	r16, 0x00	; 0
     660:	10 e0       	ldi	r17, 0x00	; 0
     662:	08 30       	cpi	r16, 0x08	; 8
     664:	11 05       	cpc	r17, r1
     666:	9c f2       	brlt	.-90     	; 0x60e <discoverable_dfs+0xae>
				// the visible array ensures termination
				discoverable_dfs(x_adj, y_adj);
			}
		}
	}
}
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	1f 91       	pop	r17
     66e:	0f 91       	pop	r16
     670:	ff 90       	pop	r15
     672:	ef 90       	pop	r14
     674:	df 90       	pop	r13
     676:	08 95       	ret

00000678 <initialise_game_display>:
/*
 * initialise the display of the game, shows the player and the player
 * direction indicator. 
 * executes a visibility search from the player's starting location
 */
void initialise_game_display(void) {
     678:	0f 93       	push	r16
     67a:	1f 93       	push	r17
     67c:	cf 93       	push	r28
     67e:	df 93       	push	r29
	// initialise the display
	initialise_display();
     680:	0e 94 38 01 	call	0x270	; 0x270 <initialise_display>
	// make the entire playing field undiscovered to start
	for (int x = 0; x < WIDTH; x++) {
     684:	00 e0       	ldi	r16, 0x00	; 0
     686:	10 e0       	ldi	r17, 0x00	; 0
     688:	0f c0       	rjmp	.+30     	; 0x6a8 <initialise_game_display+0x30>
		for (int y = 0; y < HEIGHT; y++) {
			update_square_colour(x, y, UNDISCOVERED);
     68a:	46 e0       	ldi	r20, 0x06	; 6
     68c:	50 e0       	ldi	r21, 0x00	; 0
     68e:	6c 2f       	mov	r22, r28
     690:	80 2f       	mov	r24, r16
     692:	0e 94 7f 01 	call	0x2fe	; 0x2fe <update_square_colour>
void initialise_game_display(void) {
	// initialise the display
	initialise_display();
	// make the entire playing field undiscovered to start
	for (int x = 0; x < WIDTH; x++) {
		for (int y = 0; y < HEIGHT; y++) {
     696:	21 96       	adiw	r28, 0x01	; 1
     698:	02 c0       	rjmp	.+4      	; 0x69e <initialise_game_display+0x26>
     69a:	c0 e0       	ldi	r28, 0x00	; 0
     69c:	d0 e0       	ldi	r29, 0x00	; 0
     69e:	c8 30       	cpi	r28, 0x08	; 8
     6a0:	d1 05       	cpc	r29, r1
     6a2:	9c f3       	brlt	.-26     	; 0x68a <initialise_game_display+0x12>
 */
void initialise_game_display(void) {
	// initialise the display
	initialise_display();
	// make the entire playing field undiscovered to start
	for (int x = 0; x < WIDTH; x++) {
     6a4:	0f 5f       	subi	r16, 0xFF	; 255
     6a6:	1f 4f       	sbci	r17, 0xFF	; 255
     6a8:	00 31       	cpi	r16, 0x10	; 16
     6aa:	11 05       	cpc	r17, r1
     6ac:	b4 f3       	brlt	.-20     	; 0x69a <initialise_game_display+0x22>
		for (int y = 0; y < HEIGHT; y++) {
			update_square_colour(x, y, UNDISCOVERED);
		}
	}
	// now explore visibility from the starting location
	discoverable_dfs(player_x, player_y);
     6ae:	60 91 4c 03 	lds	r22, 0x034C	; 0x80034c <player_y>
     6b2:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <player_x>
     6b6:	0e 94 b0 02 	call	0x560	; 0x560 <discoverable_dfs>
	// make the player and facing square visible
	update_square_colour(player_x, player_y, PLAYER);
     6ba:	41 e0       	ldi	r20, 0x01	; 1
     6bc:	50 e0       	ldi	r21, 0x00	; 0
     6be:	60 91 4c 03 	lds	r22, 0x034C	; 0x80034c <player_y>
     6c2:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <player_x>
     6c6:	0e 94 7f 01 	call	0x2fe	; 0x2fe <update_square_colour>
	update_square_colour(facing_x, facing_y, FACING);
     6ca:	42 e0       	ldi	r20, 0x02	; 2
     6cc:	50 e0       	ldi	r21, 0x00	; 0
     6ce:	60 91 55 05 	lds	r22, 0x0555	; 0x800555 <facing_y>
     6d2:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <facing_x>
     6d6:	0e 94 7f 01 	call	0x2fe	; 0x2fe <update_square_colour>
}
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	1f 91       	pop	r17
     6e0:	0f 91       	pop	r16
     6e2:	08 95       	ret

000006e4 <initialise_game>:

void initialise_game(uint8_t level) {
	// to initialise the game, we need to initialise the state (variables)
	// and the display
	if (level == 0) {
     6e4:	81 11       	cpse	r24, r1
     6e6:	03 c0       	rjmp	.+6      	; 0x6ee <initialise_game+0xa>
		initialise_game_state();	
     6e8:	0e 94 ad 01 	call	0x35a	; 0x35a <initialise_game_state>
     6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <initialise_game+0xe>
	} else {
		initialise_game_state_alt();
     6ee:	0e 94 06 02 	call	0x40c	; 0x40c <initialise_game_state_alt>
	}
	initialise_game_display();
     6f2:	0e 94 3c 03 	call	0x678	; 0x678 <initialise_game_display>
     6f6:	08 95       	ret

000006f8 <inspect_wall>:

/*
 * Inspects to see if it is breakable wall.
 * If it is breakable, highlights it blue.
 */
void inspect_wall(uint8_t cheatMode) {
     6f8:	1f 93       	push	r17
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
     6fe:	18 2f       	mov	r17, r24
	if (get_object_at(facing_x, facing_y) == BREAKABLE || get_object_at(facing_x, facing_y) == DISCOVERED_BREAKABLE) {
     700:	d0 91 55 05 	lds	r29, 0x0555	; 0x800555 <facing_y>
     704:	c0 91 57 05 	lds	r28, 0x0557	; 0x800557 <facing_x>
     708:	6d 2f       	mov	r22, r29
     70a:	8c 2f       	mov	r24, r28
     70c:	0e 94 67 02 	call	0x4ce	; 0x4ce <get_object_at>
     710:	83 30       	cpi	r24, 0x03	; 3
     712:	11 f0       	breq	.+4      	; 0x718 <inspect_wall+0x20>
     714:	87 30       	cpi	r24, 0x07	; 7
     716:	49 f5       	brne	.+82     	; 0x76a <inspect_wall+0x72>
		if (cheatMode == 0) {
     718:	11 11       	cpse	r17, r1
     71a:	13 c0       	rjmp	.+38     	; 0x742 <inspect_wall+0x4a>
			playing_field[facing_x][facing_y] = DISCOVERED_BREAKABLE;
     71c:	ec 2f       	mov	r30, r28
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	ee 0f       	add	r30, r30
     722:	ff 1f       	adc	r31, r31
     724:	ee 0f       	add	r30, r30
     726:	ff 1f       	adc	r31, r31
     728:	ee 0f       	add	r30, r30
     72a:	ff 1f       	adc	r31, r31
     72c:	ed 0f       	add	r30, r29
     72e:	f1 1d       	adc	r31, r1
     730:	ee 0f       	add	r30, r30
     732:	ff 1f       	adc	r31, r31
     734:	e3 5b       	subi	r30, 0xB3	; 179
     736:	fc 4f       	sbci	r31, 0xFC	; 252
     738:	87 e0       	ldi	r24, 0x07	; 7
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	91 83       	std	Z+1, r25	; 0x01
     73e:	80 83       	st	Z, r24
     740:	14 c0       	rjmp	.+40     	; 0x76a <inspect_wall+0x72>
		} else {
			playing_field[facing_x][facing_y] = EMPTY_SQUARE;
     742:	ec 2f       	mov	r30, r28
     744:	f0 e0       	ldi	r31, 0x00	; 0
     746:	ee 0f       	add	r30, r30
     748:	ff 1f       	adc	r31, r31
     74a:	ee 0f       	add	r30, r30
     74c:	ff 1f       	adc	r31, r31
     74e:	ee 0f       	add	r30, r30
     750:	ff 1f       	adc	r31, r31
     752:	ed 0f       	add	r30, r29
     754:	f1 1d       	adc	r31, r1
     756:	ee 0f       	add	r30, r30
     758:	ff 1f       	adc	r31, r31
     75a:	e3 5b       	subi	r30, 0xB3	; 179
     75c:	fc 4f       	sbci	r31, 0xFC	; 252
     75e:	11 82       	std	Z+1, r1	; 0x01
     760:	10 82       	st	Z, r1
			discoverable_dfs(facing_x, facing_y);
     762:	6d 2f       	mov	r22, r29
     764:	8c 2f       	mov	r24, r28
     766:	0e 94 b0 02 	call	0x560	; 0x560 <discoverable_dfs>
		}
	}
}
     76a:	df 91       	pop	r29
     76c:	cf 91       	pop	r28
     76e:	1f 91       	pop	r17
     770:	08 95       	ret

00000772 <check_diamond>:

/*
 * Check if standing on diamond. Removes diamond if standing on it and returns 1, else returns 0.
 */
uint8_t check_diamond() {
     772:	cf 93       	push	r28
     774:	df 93       	push	r29
	if (get_object_at(player_x, player_y) == DIAMOND) {
     776:	d0 91 4c 03 	lds	r29, 0x034C	; 0x80034c <player_y>
     77a:	c0 91 54 05 	lds	r28, 0x0554	; 0x800554 <player_x>
     77e:	6d 2f       	mov	r22, r29
     780:	8c 2f       	mov	r24, r28
     782:	0e 94 67 02 	call	0x4ce	; 0x4ce <get_object_at>
     786:	85 30       	cpi	r24, 0x05	; 5
     788:	91 f4       	brne	.+36     	; 0x7ae <check_diamond+0x3c>
		playing_field[player_x][player_y] = EMPTY_SQUARE;
     78a:	ec 2f       	mov	r30, r28
     78c:	f0 e0       	ldi	r31, 0x00	; 0
     78e:	ee 0f       	add	r30, r30
     790:	ff 1f       	adc	r31, r31
     792:	ee 0f       	add	r30, r30
     794:	ff 1f       	adc	r31, r31
     796:	ee 0f       	add	r30, r30
     798:	ff 1f       	adc	r31, r31
     79a:	ed 0f       	add	r30, r29
     79c:	f1 1d       	adc	r31, r1
     79e:	ee 0f       	add	r30, r30
     7a0:	ff 1f       	adc	r31, r31
     7a2:	e3 5b       	subi	r30, 0xB3	; 179
     7a4:	fc 4f       	sbci	r31, 0xFC	; 252
     7a6:	11 82       	std	Z+1, r1	; 0x01
     7a8:	10 82       	st	Z, r1
		return 1;
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	01 c0       	rjmp	.+2      	; 0x7b0 <check_diamond+0x3e>
	}
	return 0;
     7ae:	80 e0       	ldi	r24, 0x00	; 0
}
     7b0:	df 91       	pop	r29
     7b2:	cf 91       	pop	r28
     7b4:	08 95       	ret

000007b6 <diamond_distance>:

/*
 * Returns the Manhattan distance to closest diamond.
 */
uint16_t diamond_distance() {
     7b6:	ef 92       	push	r14
     7b8:	ff 92       	push	r15
     7ba:	0f 93       	push	r16
     7bc:	1f 93       	push	r17
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
	uint16_t minDistance = UINT16_MAX;
	
	// Brute force O(n^2) solution. Constant memory though!
	for (int x = 0; x < WIDTH; x ++) {
     7c2:	00 e0       	ldi	r16, 0x00	; 0
     7c4:	10 e0       	ldi	r17, 0x00	; 0

/*
 * Returns the Manhattan distance to closest diamond.
 */
uint16_t diamond_distance() {
	uint16_t minDistance = UINT16_MAX;
     7c6:	ee 24       	eor	r14, r14
     7c8:	ea 94       	dec	r14
     7ca:	fe 2c       	mov	r15, r14
	
	// Brute force O(n^2) solution. Constant memory though!
	for (int x = 0; x < WIDTH; x ++) {
     7cc:	2c c0       	rjmp	.+88     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
		for (int y = 0; y < HEIGHT; y ++) {
			if (get_object_at(x, y) == DIAMOND) {
     7ce:	6c 2f       	mov	r22, r28
     7d0:	80 2f       	mov	r24, r16
     7d2:	0e 94 67 02 	call	0x4ce	; 0x4ce <get_object_at>
     7d6:	85 30       	cpi	r24, 0x05	; 5
     7d8:	e9 f4       	brne	.+58     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
				uint16_t distance = abs(player_x - x) + abs(player_y - y);
     7da:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <player_x>
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	80 1b       	sub	r24, r16
     7e2:	91 0b       	sbc	r25, r17
     7e4:	9c 01       	movw	r18, r24
     7e6:	22 f4       	brpl	.+8      	; 0x7f0 <diamond_distance+0x3a>
     7e8:	22 27       	eor	r18, r18
     7ea:	33 27       	eor	r19, r19
     7ec:	28 1b       	sub	r18, r24
     7ee:	39 0b       	sbc	r19, r25
     7f0:	a9 01       	movw	r20, r18
     7f2:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <player_y>
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	8c 1b       	sub	r24, r28
     7fa:	9d 0b       	sbc	r25, r29
     7fc:	9c 01       	movw	r18, r24
     7fe:	22 f4       	brpl	.+8      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     800:	22 27       	eor	r18, r18
     802:	33 27       	eor	r19, r19
     804:	28 1b       	sub	r18, r24
     806:	39 0b       	sbc	r19, r25
     808:	24 0f       	add	r18, r20
     80a:	35 1f       	adc	r19, r21
				if (distance < minDistance ) {
     80c:	2e 15       	cp	r18, r14
     80e:	3f 05       	cpc	r19, r15
     810:	08 f4       	brcc	.+2      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
					minDistance = distance;
     812:	79 01       	movw	r14, r18
uint16_t diamond_distance() {
	uint16_t minDistance = UINT16_MAX;
	
	// Brute force O(n^2) solution. Constant memory though!
	for (int x = 0; x < WIDTH; x ++) {
		for (int y = 0; y < HEIGHT; y ++) {
     814:	21 96       	adiw	r28, 0x01	; 1
     816:	02 c0       	rjmp	.+4      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     818:	c0 e0       	ldi	r28, 0x00	; 0
     81a:	d0 e0       	ldi	r29, 0x00	; 0
     81c:	c8 30       	cpi	r28, 0x08	; 8
     81e:	d1 05       	cpc	r29, r1
     820:	b4 f2       	brlt	.-84     	; 0x7ce <diamond_distance+0x18>
 */
uint16_t diamond_distance() {
	uint16_t minDistance = UINT16_MAX;
	
	// Brute force O(n^2) solution. Constant memory though!
	for (int x = 0; x < WIDTH; x ++) {
     822:	0f 5f       	subi	r16, 0xFF	; 255
     824:	1f 4f       	sbci	r17, 0xFF	; 255
     826:	00 31       	cpi	r16, 0x10	; 16
     828:	11 05       	cpc	r17, r1
     82a:	b4 f3       	brlt	.-20     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
				}
			}
		}
	}
	return minDistance;
}
     82c:	c7 01       	movw	r24, r14
     82e:	df 91       	pop	r29
     830:	cf 91       	pop	r28
     832:	1f 91       	pop	r17
     834:	0f 91       	pop	r16
     836:	ff 90       	pop	r15
     838:	ef 90       	pop	r14
     83a:	08 95       	ret

0000083c <place_bomb>:
/*
 * Places bomb (as long as there is no other bomb currently)
 * Return 1 if successfully places new bomb.
 */
uint8_t place_bomb() {
	if ((bomb_x == NO_BOMB) && (bomb_y == NO_BOMB)) {
     83c:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <bomb_x>
     840:	8f 3f       	cpi	r24, 0xFF	; 255
     842:	01 f5       	brne	.+64     	; 0x884 <place_bomb+0x48>
     844:	80 91 4d 04 	lds	r24, 0x044D	; 0x80044d <bomb_y>
     848:	8f 3f       	cpi	r24, 0xFF	; 255
     84a:	f1 f4       	brne	.+60     	; 0x888 <place_bomb+0x4c>
		playing_field[player_x][player_y] = BOMB;
     84c:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <player_x>
     850:	e9 2f       	mov	r30, r25
     852:	f0 e0       	ldi	r31, 0x00	; 0
     854:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <player_y>
     858:	ee 0f       	add	r30, r30
     85a:	ff 1f       	adc	r31, r31
     85c:	ee 0f       	add	r30, r30
     85e:	ff 1f       	adc	r31, r31
     860:	ee 0f       	add	r30, r30
     862:	ff 1f       	adc	r31, r31
     864:	e8 0f       	add	r30, r24
     866:	f1 1d       	adc	r31, r1
     868:	ee 0f       	add	r30, r30
     86a:	ff 1f       	adc	r31, r31
     86c:	e3 5b       	subi	r30, 0xB3	; 179
     86e:	fc 4f       	sbci	r31, 0xFC	; 252
     870:	28 e0       	ldi	r18, 0x08	; 8
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	31 83       	std	Z+1, r19	; 0x01
     876:	20 83       	st	Z, r18
		bomb_x = player_x;
     878:	90 93 56 05 	sts	0x0556, r25	; 0x800556 <bomb_x>
		bomb_y = player_y;
     87c:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <bomb_y>
		return 1;
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	08 95       	ret
	}
	return 0;
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	08 95       	ret
     888:	80 e0       	ldi	r24, 0x00	; 0
}
     88a:	08 95       	ret

0000088c <get_steps>:
	bomb_animation_start();
}

uint8_t get_steps() {
	return steps;
}
     88c:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <steps>
     890:	08 95       	ret

00000892 <get_game_initialised>:

uint8_t get_game_initialised() {
	return game_initialised;
}
     892:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <game_initialised>
     896:	08 95       	ret

00000898 <is_game_won>:

/*
 * Return 0 if game is not won. Return 1 if game is won.
 * Game is won if no diamonds are left and player is standing on square on rightmost column of map.
 */
uint8_t is_game_won() {
     898:	0f 93       	push	r16
     89a:	1f 93       	push	r17
     89c:	cf 93       	push	r28
     89e:	df 93       	push	r29
	// Brute force O(n^2) solution. One could just store the actual number diamonds at the start...
	// but I think this makes it easier for further development (e.g. some diamonds spawn later after map creation etc)
	for (int x = 0; x < WIDTH; x ++) {
     8a0:	00 e0       	ldi	r16, 0x00	; 0
     8a2:	10 e0       	ldi	r17, 0x00	; 0
     8a4:	0f c0       	rjmp	.+30     	; 0x8c4 <is_game_won+0x2c>
		for (int y = 0; y < HEIGHT; y ++) {
			if (get_object_at(x, y) == DIAMOND) {
     8a6:	6c 2f       	mov	r22, r28
     8a8:	80 2f       	mov	r24, r16
     8aa:	0e 94 67 02 	call	0x4ce	; 0x4ce <get_object_at>
     8ae:	85 30       	cpi	r24, 0x05	; 5
     8b0:	91 f0       	breq	.+36     	; 0x8d6 <is_game_won+0x3e>
 */
uint8_t is_game_won() {
	// Brute force O(n^2) solution. One could just store the actual number diamonds at the start...
	// but I think this makes it easier for further development (e.g. some diamonds spawn later after map creation etc)
	for (int x = 0; x < WIDTH; x ++) {
		for (int y = 0; y < HEIGHT; y ++) {
     8b2:	21 96       	adiw	r28, 0x01	; 1
     8b4:	02 c0       	rjmp	.+4      	; 0x8ba <is_game_won+0x22>
     8b6:	c0 e0       	ldi	r28, 0x00	; 0
     8b8:	d0 e0       	ldi	r29, 0x00	; 0
     8ba:	c8 30       	cpi	r28, 0x08	; 8
     8bc:	d1 05       	cpc	r29, r1
     8be:	9c f3       	brlt	.-26     	; 0x8a6 <is_game_won+0xe>
 * Game is won if no diamonds are left and player is standing on square on rightmost column of map.
 */
uint8_t is_game_won() {
	// Brute force O(n^2) solution. One could just store the actual number diamonds at the start...
	// but I think this makes it easier for further development (e.g. some diamonds spawn later after map creation etc)
	for (int x = 0; x < WIDTH; x ++) {
     8c0:	0f 5f       	subi	r16, 0xFF	; 255
     8c2:	1f 4f       	sbci	r17, 0xFF	; 255
     8c4:	00 31       	cpi	r16, 0x10	; 16
     8c6:	11 05       	cpc	r17, r1
     8c8:	b4 f3       	brlt	.-20     	; 0x8b6 <is_game_won+0x1e>
			if (get_object_at(x, y) == DIAMOND) {
				return 0;
			}
		}
	}
	if (player_x == WIDTH-1) {
     8ca:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <player_x>
     8ce:	8f 30       	cpi	r24, 0x0F	; 15
     8d0:	21 f4       	brne	.+8      	; 0x8da <is_game_won+0x42>
		return 1;
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	03 c0       	rjmp	.+6      	; 0x8dc <is_game_won+0x44>
	// Brute force O(n^2) solution. One could just store the actual number diamonds at the start...
	// but I think this makes it easier for further development (e.g. some diamonds spawn later after map creation etc)
	for (int x = 0; x < WIDTH; x ++) {
		for (int y = 0; y < HEIGHT; y ++) {
			if (get_object_at(x, y) == DIAMOND) {
				return 0;
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <is_game_won+0x44>
		}
	}
	if (player_x == WIDTH-1) {
		return 1;
	}
	return 0;
     8da:	80 e0       	ldi	r24, 0x00	; 0
}
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	1f 91       	pop	r17
     8e2:	0f 91       	pop	r16
     8e4:	08 95       	ret

000008e6 <maintain_field_of_vision>:

/*
 * Super hacky solution
 */
void maintain_field_of_vision() {
     8e6:	0f 93       	push	r16
     8e8:	1f 93       	push	r17
     8ea:	cf 93       	push	r28
     8ec:	df 93       	push	r29
	if (vision_field_on) {
     8ee:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <vision_field_on>
     8f2:	81 11       	cpse	r24, r1
     8f4:	6e c0       	rjmp	.+220    	; 0x9d2 <__stack+0xd3>
     8f6:	72 c0       	rjmp	.+228    	; 0x9dc <__stack+0xdd>
		for (int x = 0; x < WIDTH; x++) {
			for (int y = 0; y < HEIGHT; y++) {
				uint8_t distance = abs(x - player_x) + abs(y - player_y);
     8f8:	40 91 54 05 	lds	r20, 0x0554	; 0x800554 <player_x>
     8fc:	50 e0       	ldi	r21, 0x00	; 0
     8fe:	98 01       	movw	r18, r16
     900:	24 1b       	sub	r18, r20
     902:	35 0b       	sbc	r19, r21
     904:	c9 01       	movw	r24, r18
     906:	99 23       	and	r25, r25
     908:	24 f4       	brge	.+8      	; 0x912 <__stack+0x13>
     90a:	88 27       	eor	r24, r24
     90c:	99 27       	eor	r25, r25
     90e:	82 1b       	sub	r24, r18
     910:	93 0b       	sbc	r25, r19
     912:	9c 01       	movw	r18, r24
     914:	60 91 4c 03 	lds	r22, 0x034C	; 0x80034c <player_y>
     918:	70 e0       	ldi	r23, 0x00	; 0
     91a:	fe 01       	movw	r30, r28
     91c:	e6 1b       	sub	r30, r22
     91e:	f7 0b       	sbc	r31, r23
     920:	cf 01       	movw	r24, r30
     922:	22 f4       	brpl	.+8      	; 0x92c <__stack+0x2d>
     924:	88 27       	eor	r24, r24
     926:	99 27       	eor	r25, r25
     928:	8e 1b       	sub	r24, r30
     92a:	9f 0b       	sbc	r25, r31
     92c:	fc 01       	movw	r30, r24
     92e:	82 0f       	add	r24, r18
				if ((distance <= 2 || (distance == 3 && (abs(x - player_x) == 1 || abs(y - player_y) == 1)))) {
     930:	83 30       	cpi	r24, 0x03	; 3
     932:	38 f0       	brcs	.+14     	; 0x942 <__stack+0x43>
     934:	83 30       	cpi	r24, 0x03	; 3
     936:	81 f5       	brne	.+96     	; 0x998 <__stack+0x99>
     938:	21 30       	cpi	r18, 0x01	; 1
     93a:	31 05       	cpc	r19, r1
     93c:	11 f0       	breq	.+4      	; 0x942 <__stack+0x43>
     93e:	31 97       	sbiw	r30, 0x01	; 1
     940:	59 f5       	brne	.+86     	; 0x998 <__stack+0x99>
					if ((player_x != x || player_y != y) && discovered[x][y] == 1) {
     942:	04 17       	cp	r16, r20
     944:	15 07       	cpc	r17, r21
     946:	19 f4       	brne	.+6      	; 0x94e <__stack+0x4f>
     948:	c6 17       	cp	r28, r22
     94a:	d7 07       	cpc	r29, r23
     94c:	b9 f1       	breq	.+110    	; 0x9bc <__stack+0xbd>
     94e:	f8 01       	movw	r30, r16
     950:	ee 0f       	add	r30, r30
     952:	ff 1f       	adc	r31, r31
     954:	ee 0f       	add	r30, r30
     956:	ff 1f       	adc	r31, r31
     958:	ee 0f       	add	r30, r30
     95a:	ff 1f       	adc	r31, r31
     95c:	e2 5b       	subi	r30, 0xB2	; 178
     95e:	fb 4f       	sbci	r31, 0xFB	; 251
     960:	ec 0f       	add	r30, r28
     962:	fd 1f       	adc	r31, r29
     964:	80 81       	ld	r24, Z
     966:	81 30       	cpi	r24, 0x01	; 1
     968:	49 f5       	brne	.+82     	; 0x9bc <__stack+0xbd>
						visible[x][y] = 1;
     96a:	f8 01       	movw	r30, r16
     96c:	ee 0f       	add	r30, r30
     96e:	ff 1f       	adc	r31, r31
     970:	ee 0f       	add	r30, r30
     972:	ff 1f       	adc	r31, r31
     974:	ee 0f       	add	r30, r30
     976:	ff 1f       	adc	r31, r31
     978:	ee 52       	subi	r30, 0x2E	; 46
     97a:	fb 4f       	sbci	r31, 0xFB	; 251
     97c:	ec 0f       	add	r30, r28
     97e:	fd 1f       	adc	r31, r29
     980:	80 83       	st	Z, r24
						update_square_colour(x, y, get_object_at(x, y));
     982:	6c 2f       	mov	r22, r28
     984:	80 2f       	mov	r24, r16
     986:	0e 94 67 02 	call	0x4ce	; 0x4ce <get_object_at>
     98a:	48 2f       	mov	r20, r24
     98c:	50 e0       	ldi	r21, 0x00	; 0
     98e:	6c 2f       	mov	r22, r28
     990:	80 2f       	mov	r24, r16
     992:	0e 94 7f 01 	call	0x2fe	; 0x2fe <update_square_colour>
     996:	12 c0       	rjmp	.+36     	; 0x9bc <__stack+0xbd>
					}
				} else {
					visible[x][y] = 0;
     998:	f8 01       	movw	r30, r16
     99a:	ee 0f       	add	r30, r30
     99c:	ff 1f       	adc	r31, r31
     99e:	ee 0f       	add	r30, r30
     9a0:	ff 1f       	adc	r31, r31
     9a2:	ee 0f       	add	r30, r30
     9a4:	ff 1f       	adc	r31, r31
     9a6:	ee 52       	subi	r30, 0x2E	; 46
     9a8:	fb 4f       	sbci	r31, 0xFB	; 251
     9aa:	ec 0f       	add	r30, r28
     9ac:	fd 1f       	adc	r31, r29
     9ae:	10 82       	st	Z, r1
					update_square_colour(x, y, UNDISCOVERED);
     9b0:	46 e0       	ldi	r20, 0x06	; 6
     9b2:	50 e0       	ldi	r21, 0x00	; 0
     9b4:	6c 2f       	mov	r22, r28
     9b6:	80 2f       	mov	r24, r16
     9b8:	0e 94 7f 01 	call	0x2fe	; 0x2fe <update_square_colour>
 * Super hacky solution
 */
void maintain_field_of_vision() {
	if (vision_field_on) {
		for (int x = 0; x < WIDTH; x++) {
			for (int y = 0; y < HEIGHT; y++) {
     9bc:	21 96       	adiw	r28, 0x01	; 1
     9be:	02 c0       	rjmp	.+4      	; 0x9c4 <__stack+0xc5>
     9c0:	c0 e0       	ldi	r28, 0x00	; 0
     9c2:	d0 e0       	ldi	r29, 0x00	; 0
     9c4:	c8 30       	cpi	r28, 0x08	; 8
     9c6:	d1 05       	cpc	r29, r1
     9c8:	0c f4       	brge	.+2      	; 0x9cc <__stack+0xcd>
     9ca:	96 cf       	rjmp	.-212    	; 0x8f8 <maintain_field_of_vision+0x12>
/*
 * Super hacky solution
 */
void maintain_field_of_vision() {
	if (vision_field_on) {
		for (int x = 0; x < WIDTH; x++) {
     9cc:	0f 5f       	subi	r16, 0xFF	; 255
     9ce:	1f 4f       	sbci	r17, 0xFF	; 255
     9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <__stack+0xd7>
     9d2:	00 e0       	ldi	r16, 0x00	; 0
     9d4:	10 e0       	ldi	r17, 0x00	; 0
     9d6:	00 31       	cpi	r16, 0x10	; 16
     9d8:	11 05       	cpc	r17, r1
     9da:	94 f3       	brlt	.-28     	; 0x9c0 <__stack+0xc1>
					update_square_colour(x, y, UNDISCOVERED);
				}
			}
		}
	} 
}
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	08 95       	ret

000009e6 <move_player>:
}

// check the header file game.h for a description of what this function should do
// it contains a few extra hints
// Matthew Chen edit: returns 1 if a valid move is made
uint8_t move_player(uint8_t dx, uint8_t dy) {
     9e6:	ff 92       	push	r15
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	d8 2f       	mov	r29, r24
     9f2:	c6 2f       	mov	r28, r22
	//    this will include variables player_x and player_y
	// 4: display the player at the new location
	
	
	uint8_t valid_move = 0;
	uint8_t object_here = get_object_at(player_x+dx, player_y+dy);
     9f4:	f0 90 4c 03 	lds	r15, 0x034C	; 0x80034c <player_y>
     9f8:	6f 2d       	mov	r22, r15
     9fa:	6c 0f       	add	r22, r28
     9fc:	00 91 54 05 	lds	r16, 0x0554	; 0x800554 <player_x>
     a00:	80 2f       	mov	r24, r16
     a02:	8d 0f       	add	r24, r29
     a04:	0e 94 67 02 	call	0x4ce	; 0x4ce <get_object_at>
     a08:	18 2f       	mov	r17, r24
	if (object_here == EMPTY_SQUARE || object_here == DIAMOND) {
     a0a:	88 23       	and	r24, r24
     a0c:	11 f0       	breq	.+4      	; 0xa12 <move_player+0x2c>
     a0e:	85 30       	cpi	r24, 0x05	; 5
     a10:	11 f5       	brne	.+68     	; 0xa56 <move_player+0x70>
		update_square_colour(player_x, player_y, get_object_at(player_x, player_y));
     a12:	6f 2d       	mov	r22, r15
     a14:	80 2f       	mov	r24, r16
     a16:	0e 94 67 02 	call	0x4ce	; 0x4ce <get_object_at>
     a1a:	48 2f       	mov	r20, r24
     a1c:	50 e0       	ldi	r21, 0x00	; 0
     a1e:	6f 2d       	mov	r22, r15
     a20:	80 2f       	mov	r24, r16
     a22:	0e 94 7f 01 	call	0x2fe	; 0x2fe <update_square_colour>
		player_x += dx;
     a26:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <player_x>
     a2a:	8d 0f       	add	r24, r29
     a2c:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <player_x>
		player_y += dy;
     a30:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <player_y>
     a34:	8c 0f       	add	r24, r28
     a36:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <player_y>
		if (steps < 99) {
     a3a:	80 91 cf 04 	lds	r24, 0x04CF	; 0x8004cf <steps>
     a3e:	83 36       	cpi	r24, 0x63	; 99
     a40:	18 f4       	brcc	.+6      	; 0xa48 <move_player+0x62>
			steps ++;
     a42:	8f 5f       	subi	r24, 0xFF	; 255
     a44:	80 93 cf 04 	sts	0x04CF, r24	; 0x8004cf <steps>
		}
		if (object_here == DIAMOND) {
     a48:	15 30       	cpi	r17, 0x05	; 5
     a4a:	39 f4       	brne	.+14     	; 0xa5a <move_player+0x74>
			play_found_diamond();
     a4c:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <play_found_diamond>
		}
		valid_move = 1;
     a50:	ff 24       	eor	r15, r15
     a52:	f3 94       	inc	r15
     a54:	04 c0       	rjmp	.+8      	; 0xa5e <move_player+0x78>
	// 3: if the player can move, update the positional knowledge of the player, 
	//    this will include variables player_x and player_y
	// 4: display the player at the new location
	
	
	uint8_t valid_move = 0;
     a56:	f1 2c       	mov	r15, r1
     a58:	02 c0       	rjmp	.+4      	; 0xa5e <move_player+0x78>
			steps ++;
		}
		if (object_here == DIAMOND) {
			play_found_diamond();
		}
		valid_move = 1;
     a5a:	ff 24       	eor	r15, r15
     a5c:	f3 94       	inc	r15
	}
	update_square_colour(facing_x, facing_y, get_object_at(facing_x, facing_y)); // Make sure to change LED to correct colour (otherwise it may be stuck in red flash)
     a5e:	00 91 55 05 	lds	r16, 0x0555	; 0x800555 <facing_y>
     a62:	10 91 57 05 	lds	r17, 0x0557	; 0x800557 <facing_x>
     a66:	60 2f       	mov	r22, r16
     a68:	81 2f       	mov	r24, r17
     a6a:	0e 94 67 02 	call	0x4ce	; 0x4ce <get_object_at>
     a6e:	48 2f       	mov	r20, r24
     a70:	50 e0       	ldi	r21, 0x00	; 0
     a72:	60 2f       	mov	r22, r16
     a74:	81 2f       	mov	r24, r17
     a76:	0e 94 7f 01 	call	0x2fe	; 0x2fe <update_square_colour>
	facing_x = player_x + dx;
     a7a:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <player_x>
     a7e:	d8 0f       	add	r29, r24
     a80:	d0 93 57 05 	sts	0x0557, r29	; 0x800557 <facing_x>
	facing_y = player_y + dy;
     a84:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <player_y>
     a88:	c8 0f       	add	r28, r24
     a8a:	c0 93 55 05 	sts	0x0555, r28	; 0x800555 <facing_y>
	flash_facing();
     a8e:	0e 94 83 02 	call	0x506	; 0x506 <flash_facing>
	update_square_colour(player_x, player_y, PLAYER);
     a92:	41 e0       	ldi	r20, 0x01	; 1
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	60 91 4c 03 	lds	r22, 0x034C	; 0x80034c <player_y>
     a9a:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <player_x>
     a9e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <update_square_colour>
	
	maintain_field_of_vision();
     aa2:	0e 94 73 04 	call	0x8e6	; 0x8e6 <maintain_field_of_vision>
	return valid_move;
}
     aa6:	8f 2d       	mov	r24, r15
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	1f 91       	pop	r17
     aae:	0f 91       	pop	r16
     ab0:	ff 90       	pop	r15
     ab2:	08 95       	ret

00000ab4 <toggle_field_of_vision>:

/*
 * Toggle field of vision.
 */
void toggle_field_of_vision() {
	vision_field_on ^= 1;
     ab4:	90 91 ce 04 	lds	r25, 0x04CE	; 0x8004ce <vision_field_on>
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	89 27       	eor	r24, r25
     abc:	80 93 ce 04 	sts	0x04CE, r24	; 0x8004ce <vision_field_on>
	if (vision_field_on == 0) {
     ac0:	88 23       	and	r24, r24
     ac2:	b9 f0       	breq	.+46     	; 0xaf2 <toggle_field_of_vision+0x3e>
     ac4:	2a c0       	rjmp	.+84     	; 0xb1a <toggle_field_of_vision+0x66>
		for (int x = 0; x < WIDTH; x++) {
			for (int y = 0; y < HEIGHT; y++) {
				visible[x][y] = 0;
     ac6:	f9 01       	movw	r30, r18
     ac8:	ee 0f       	add	r30, r30
     aca:	ff 1f       	adc	r31, r31
     acc:	ee 0f       	add	r30, r30
     ace:	ff 1f       	adc	r31, r31
     ad0:	ee 0f       	add	r30, r30
     ad2:	ff 1f       	adc	r31, r31
     ad4:	ee 52       	subi	r30, 0x2E	; 46
     ad6:	fb 4f       	sbci	r31, 0xFB	; 251
     ad8:	e8 0f       	add	r30, r24
     ada:	f9 1f       	adc	r31, r25
     adc:	10 82       	st	Z, r1
 */
void toggle_field_of_vision() {
	vision_field_on ^= 1;
	if (vision_field_on == 0) {
		for (int x = 0; x < WIDTH; x++) {
			for (int y = 0; y < HEIGHT; y++) {
     ade:	01 96       	adiw	r24, 0x01	; 1
     ae0:	02 c0       	rjmp	.+4      	; 0xae6 <toggle_field_of_vision+0x32>
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	88 30       	cpi	r24, 0x08	; 8
     ae8:	91 05       	cpc	r25, r1
     aea:	6c f3       	brlt	.-38     	; 0xac6 <toggle_field_of_vision+0x12>
 * Toggle field of vision.
 */
void toggle_field_of_vision() {
	vision_field_on ^= 1;
	if (vision_field_on == 0) {
		for (int x = 0; x < WIDTH; x++) {
     aec:	2f 5f       	subi	r18, 0xFF	; 255
     aee:	3f 4f       	sbci	r19, 0xFF	; 255
     af0:	02 c0       	rjmp	.+4      	; 0xaf6 <toggle_field_of_vision+0x42>
     af2:	20 e0       	ldi	r18, 0x00	; 0
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	20 31       	cpi	r18, 0x10	; 16
     af8:	31 05       	cpc	r19, r1
     afa:	9c f3       	brlt	.-26     	; 0xae2 <toggle_field_of_vision+0x2e>
			for (int y = 0; y < HEIGHT; y++) {
				visible[x][y] = 0;
			}
		}
		discoverable_dfs(player_x, player_y);
     afc:	60 91 4c 03 	lds	r22, 0x034C	; 0x80034c <player_y>
     b00:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <player_x>
     b04:	0e 94 b0 02 	call	0x560	; 0x560 <discoverable_dfs>
		update_square_colour(player_x, player_y, PLAYER);
     b08:	41 e0       	ldi	r20, 0x01	; 1
     b0a:	50 e0       	ldi	r21, 0x00	; 0
     b0c:	60 91 4c 03 	lds	r22, 0x034C	; 0x80034c <player_y>
     b10:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <player_x>
     b14:	0e 94 7f 01 	call	0x2fe	; 0x2fe <update_square_colour>
     b18:	08 95       	ret
	} else {
		maintain_field_of_vision();
     b1a:	0e 94 73 04 	call	0x8e6	; 0x8e6 <maintain_field_of_vision>
     b1e:	08 95       	ret

00000b20 <in_danger>:
 */
uint8_t in_danger() {
	// technically due to implementation of NO_BOMB, we don't even need to check
	// if there is a bomb as if there isn't a bomb, the distance will be greater than
	// 1
	uint8_t distance_to_bomb = abs(player_x-bomb_x) + abs(player_y-bomb_y);
     b20:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <player_x>
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	20 91 56 05 	lds	r18, 0x0556	; 0x800556 <bomb_x>
     b2a:	82 1b       	sub	r24, r18
     b2c:	91 09       	sbc	r25, r1
     b2e:	9c 01       	movw	r18, r24
     b30:	22 f4       	brpl	.+8      	; 0xb3a <in_danger+0x1a>
     b32:	22 27       	eor	r18, r18
     b34:	33 27       	eor	r19, r19
     b36:	28 1b       	sub	r18, r24
     b38:	39 0b       	sbc	r19, r25
     b3a:	42 2f       	mov	r20, r18
     b3c:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <player_y>
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	20 91 4d 04 	lds	r18, 0x044D	; 0x80044d <bomb_y>
     b46:	82 1b       	sub	r24, r18
     b48:	91 09       	sbc	r25, r1
     b4a:	9c 01       	movw	r18, r24
     b4c:	22 f4       	brpl	.+8      	; 0xb56 <in_danger+0x36>
     b4e:	22 27       	eor	r18, r18
     b50:	33 27       	eor	r19, r19
     b52:	28 1b       	sub	r18, r24
     b54:	39 0b       	sbc	r19, r25
     b56:	24 0f       	add	r18, r20
	if (distance_to_bomb <= 1) {
     b58:	22 30       	cpi	r18, 0x02	; 2
     b5a:	10 f4       	brcc	.+4      	; 0xb60 <in_danger+0x40>
		return 1;
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	08 95       	ret
	}
	return 0;
     b60:	80 e0       	ldi	r24, 0x00	; 0
}
     b62:	08 95       	ret

00000b64 <bomb_active>:

/*
 * Returns if bomb is active
 */
uint8_t bomb_active() {
	return !(bomb_x == NO_BOMB || bomb_y == NO_BOMB);
     b64:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <bomb_x>
     b68:	8f 3f       	cpi	r24, 0xFF	; 255
     b6a:	31 f0       	breq	.+12     	; 0xb78 <bomb_active+0x14>
     b6c:	80 91 4d 04 	lds	r24, 0x044D	; 0x80044d <bomb_y>
     b70:	8f 3f       	cpi	r24, 0xFF	; 255
     b72:	21 f4       	brne	.+8      	; 0xb7c <bomb_active+0x18>
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	08 95       	ret
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	08 95       	ret
     b7c:	81 e0       	ldi	r24, 0x01	; 1
}
     b7e:	08 95       	ret

00000b80 <in_field_of_vision>:

/*
 * Returns 1 if object is in field of vision, else returns 0.
 */
uint8_t in_field_of_vision(uint8_t x, uint8_t y) {
	uint8_t distance = abs(x - player_x) + abs(y - player_y);
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	20 91 54 05 	lds	r18, 0x0554	; 0x800554 <player_x>
     b86:	82 1b       	sub	r24, r18
     b88:	91 09       	sbc	r25, r1
     b8a:	9c 01       	movw	r18, r24
     b8c:	22 f4       	brpl	.+8      	; 0xb96 <in_field_of_vision+0x16>
     b8e:	22 27       	eor	r18, r18
     b90:	33 27       	eor	r19, r19
     b92:	28 1b       	sub	r18, r24
     b94:	39 0b       	sbc	r19, r25
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <player_y>
     b9c:	68 1b       	sub	r22, r24
     b9e:	71 09       	sbc	r23, r1
     ba0:	cb 01       	movw	r24, r22
     ba2:	99 23       	and	r25, r25
     ba4:	24 f4       	brge	.+8      	; 0xbae <in_field_of_vision+0x2e>
     ba6:	88 27       	eor	r24, r24
     ba8:	99 27       	eor	r25, r25
     baa:	86 1b       	sub	r24, r22
     bac:	97 0b       	sbc	r25, r23
     bae:	ac 01       	movw	r20, r24
     bb0:	82 0f       	add	r24, r18
	if (vision_field_on) {
     bb2:	90 91 ce 04 	lds	r25, 0x04CE	; 0x8004ce <vision_field_on>
     bb6:	99 23       	and	r25, r25
     bb8:	61 f0       	breq	.+24     	; 0xbd2 <in_field_of_vision+0x52>
		if ((distance <= 2 || (distance == 3 && (abs(x - player_x) == 1 || abs(y - player_y) == 1)))) {
     bba:	83 30       	cpi	r24, 0x03	; 3
     bbc:	60 f0       	brcs	.+24     	; 0xbd6 <in_field_of_vision+0x56>
     bbe:	83 30       	cpi	r24, 0x03	; 3
     bc0:	61 f4       	brne	.+24     	; 0xbda <in_field_of_vision+0x5a>
     bc2:	21 30       	cpi	r18, 0x01	; 1
     bc4:	31 05       	cpc	r19, r1
     bc6:	59 f0       	breq	.+22     	; 0xbde <in_field_of_vision+0x5e>
     bc8:	41 30       	cpi	r20, 0x01	; 1
     bca:	51 05       	cpc	r21, r1
     bcc:	51 f0       	breq	.+20     	; 0xbe2 <in_field_of_vision+0x62>
			return 1;			// within field of vision
		} else {
			return 0;			// outside field of vision
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	08 95       	ret
		}
	}
	return 1; 
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	08 95       	ret
 */
uint8_t in_field_of_vision(uint8_t x, uint8_t y) {
	uint8_t distance = abs(x - player_x) + abs(y - player_y);
	if (vision_field_on) {
		if ((distance <= 2 || (distance == 3 && (abs(x - player_x) == 1 || abs(y - player_y) == 1)))) {
			return 1;			// within field of vision
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	08 95       	ret
		} else {
			return 0;			// outside field of vision
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	08 95       	ret
 */
uint8_t in_field_of_vision(uint8_t x, uint8_t y) {
	uint8_t distance = abs(x - player_x) + abs(y - player_y);
	if (vision_field_on) {
		if ((distance <= 2 || (distance == 3 && (abs(x - player_x) == 1 || abs(y - player_y) == 1)))) {
			return 1;			// within field of vision
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	08 95       	ret
     be2:	81 e0       	ldi	r24, 0x01	; 1
		} else {
			return 0;			// outside field of vision
		}
	}
	return 1; 
     be4:	08 95       	ret

00000be6 <bomb_animation_start>:
		return 1;
	}
	return 0;
}

void bomb_animation_start() {
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
	if (bomb_x == NO_BOMB || bomb_y == NO_BOMB) {
     bea:	c0 91 56 05 	lds	r28, 0x0556	; 0x800556 <bomb_x>
     bee:	cf 3f       	cpi	r28, 0xFF	; 255
     bf0:	81 f0       	breq	.+32     	; 0xc12 <bomb_animation_start+0x2c>
     bf2:	d0 91 4d 04 	lds	r29, 0x044D	; 0x80044d <bomb_y>
     bf6:	df 3f       	cpi	r29, 0xFF	; 255
     bf8:	61 f0       	breq	.+24     	; 0xc12 <bomb_animation_start+0x2c>
		return;
	}
	if (in_field_of_vision(bomb_x, bomb_y)) {
     bfa:	6d 2f       	mov	r22, r29
     bfc:	8c 2f       	mov	r24, r28
     bfe:	0e 94 c0 05 	call	0xb80	; 0xb80 <in_field_of_vision>
     c02:	88 23       	and	r24, r24
     c04:	31 f0       	breq	.+12     	; 0xc12 <bomb_animation_start+0x2c>
		update_square_colour(bomb_x, bomb_y, PLAYER);
     c06:	41 e0       	ldi	r20, 0x01	; 1
     c08:	50 e0       	ldi	r21, 0x00	; 0
     c0a:	6d 2f       	mov	r22, r29
     c0c:	8c 2f       	mov	r24, r28
     c0e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <update_square_colour>
	}
}
     c12:	df 91       	pop	r29
     c14:	cf 91       	pop	r28
     c16:	08 95       	ret

00000c18 <blow_bomb>:

/*
 * Blows up the bomb, destroying walls (as well as the player if they're in the range).
 * Range is any object within 1 manhattan distance from it.
 */
void blow_bomb() {
     c18:	0f 93       	push	r16
     c1a:	1f 93       	push	r17
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
	if (bomb_x == NO_BOMB || bomb_y == NO_BOMB) {
     c20:	e0 91 56 05 	lds	r30, 0x0556	; 0x800556 <bomb_x>
     c24:	ef 3f       	cpi	r30, 0xFF	; 255
     c26:	09 f4       	brne	.+2      	; 0xc2a <blow_bomb+0x12>
     c28:	cf c0       	rjmp	.+414    	; 0xdc8 <blow_bomb+0x1b0>
     c2a:	80 91 4d 04 	lds	r24, 0x044D	; 0x80044d <bomb_y>
     c2e:	8f 3f       	cpi	r24, 0xFF	; 255
     c30:	09 f4       	brne	.+2      	; 0xc34 <blow_bomb+0x1c>
     c32:	ca c0       	rjmp	.+404    	; 0xdc8 <blow_bomb+0x1b0>
		return;
	}
	playing_field[bomb_x][bomb_y] = EMPTY_SQUARE;
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	ee 0f       	add	r30, r30
     c38:	ff 1f       	adc	r31, r31
     c3a:	ee 0f       	add	r30, r30
     c3c:	ff 1f       	adc	r31, r31
     c3e:	ee 0f       	add	r30, r30
     c40:	ff 1f       	adc	r31, r31
     c42:	e8 0f       	add	r30, r24
     c44:	f1 1d       	adc	r31, r1
     c46:	ee 0f       	add	r30, r30
     c48:	ff 1f       	adc	r31, r31
     c4a:	e3 5b       	subi	r30, 0xB3	; 179
     c4c:	fc 4f       	sbci	r31, 0xFC	; 252
     c4e:	11 82       	std	Z+1, r1	; 0x01
     c50:	10 82       	st	Z, r1
	for (int i = -1; i <= 1; i+=2) {
     c52:	cf ef       	ldi	r28, 0xFF	; 255
     c54:	df ef       	ldi	r29, 0xFF	; 255
     c56:	3e c0       	rjmp	.+124    	; 0xcd4 <blow_bomb+0xbc>
		uint8_t xPos = bomb_x +i;
     c58:	10 91 56 05 	lds	r17, 0x0556	; 0x800556 <bomb_x>
     c5c:	1c 0f       	add	r17, r28
		uint8_t yPos = bomb_y;
     c5e:	00 91 4d 04 	lds	r16, 0x044D	; 0x80044d <bomb_y>
		uint16_t blownLocation = playing_field[xPos][yPos];
     c62:	21 2f       	mov	r18, r17
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	80 2f       	mov	r24, r16
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	f9 01       	movw	r30, r18
     c6c:	ee 0f       	add	r30, r30
     c6e:	ff 1f       	adc	r31, r31
     c70:	ee 0f       	add	r30, r30
     c72:	ff 1f       	adc	r31, r31
     c74:	ee 0f       	add	r30, r30
     c76:	ff 1f       	adc	r31, r31
     c78:	e8 0f       	add	r30, r24
     c7a:	f9 1f       	adc	r31, r25
     c7c:	ee 0f       	add	r30, r30
     c7e:	ff 1f       	adc	r31, r31
     c80:	e3 5b       	subi	r30, 0xB3	; 179
     c82:	fc 4f       	sbci	r31, 0xFC	; 252
     c84:	40 81       	ld	r20, Z
     c86:	51 81       	ldd	r21, Z+1	; 0x01
		if (blownLocation == BREAKABLE || blownLocation == DISCOVERED_BREAKABLE) {
     c88:	43 30       	cpi	r20, 0x03	; 3
     c8a:	51 05       	cpc	r21, r1
     c8c:	19 f0       	breq	.+6      	; 0xc94 <blow_bomb+0x7c>
     c8e:	47 30       	cpi	r20, 0x07	; 7
     c90:	51 05       	cpc	r21, r1
     c92:	f9 f4       	brne	.+62     	; 0xcd2 <blow_bomb+0xba>
			playing_field[xPos][yPos] = EMPTY_SQUARE;
     c94:	f9 01       	movw	r30, r18
     c96:	ee 0f       	add	r30, r30
     c98:	ff 1f       	adc	r31, r31
     c9a:	ee 0f       	add	r30, r30
     c9c:	ff 1f       	adc	r31, r31
     c9e:	ee 0f       	add	r30, r30
     ca0:	ff 1f       	adc	r31, r31
     ca2:	e8 0f       	add	r30, r24
     ca4:	f9 1f       	adc	r31, r25
     ca6:	ee 0f       	add	r30, r30
     ca8:	ff 1f       	adc	r31, r31
     caa:	e3 5b       	subi	r30, 0xB3	; 179
     cac:	fc 4f       	sbci	r31, 0xFC	; 252
     cae:	11 82       	std	Z+1, r1	; 0x01
     cb0:	10 82       	st	Z, r1
			if (in_field_of_vision(xPos, yPos)) {
     cb2:	60 2f       	mov	r22, r16
     cb4:	81 2f       	mov	r24, r17
     cb6:	0e 94 c0 05 	call	0xb80	; 0xb80 <in_field_of_vision>
     cba:	88 23       	and	r24, r24
     cbc:	31 f0       	breq	.+12     	; 0xcca <blow_bomb+0xb2>
				update_square_colour(xPos, yPos, EMPTY_SQUARE);
     cbe:	40 e0       	ldi	r20, 0x00	; 0
     cc0:	50 e0       	ldi	r21, 0x00	; 0
     cc2:	60 2f       	mov	r22, r16
     cc4:	81 2f       	mov	r24, r17
     cc6:	0e 94 7f 01 	call	0x2fe	; 0x2fe <update_square_colour>
			}
			discoverable_dfs(xPos, yPos);
     cca:	60 2f       	mov	r22, r16
     ccc:	81 2f       	mov	r24, r17
     cce:	0e 94 b0 02 	call	0x560	; 0x560 <discoverable_dfs>
void blow_bomb() {
	if (bomb_x == NO_BOMB || bomb_y == NO_BOMB) {
		return;
	}
	playing_field[bomb_x][bomb_y] = EMPTY_SQUARE;
	for (int i = -1; i <= 1; i+=2) {
     cd2:	22 96       	adiw	r28, 0x02	; 2
     cd4:	c2 30       	cpi	r28, 0x02	; 2
     cd6:	d1 05       	cpc	r29, r1
     cd8:	0c f4       	brge	.+2      	; 0xcdc <blow_bomb+0xc4>
     cda:	be cf       	rjmp	.-132    	; 0xc58 <blow_bomb+0x40>
     cdc:	cf ef       	ldi	r28, 0xFF	; 255
     cde:	df ef       	ldi	r29, 0xFF	; 255
     ce0:	3e c0       	rjmp	.+124    	; 0xd5e <blow_bomb+0x146>
			}
			discoverable_dfs(xPos, yPos);
		}
	}
	for (int i = -1; i <= 1; i+=2) {
		uint8_t xPos = bomb_x;
     ce2:	00 91 56 05 	lds	r16, 0x0556	; 0x800556 <bomb_x>
		uint8_t yPos = bomb_y+i;
     ce6:	10 91 4d 04 	lds	r17, 0x044D	; 0x80044d <bomb_y>
     cea:	1c 0f       	add	r17, r28
		uint16_t blownLocation = playing_field[xPos][yPos];
     cec:	20 2f       	mov	r18, r16
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	81 2f       	mov	r24, r17
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	f9 01       	movw	r30, r18
     cf6:	ee 0f       	add	r30, r30
     cf8:	ff 1f       	adc	r31, r31
     cfa:	ee 0f       	add	r30, r30
     cfc:	ff 1f       	adc	r31, r31
     cfe:	ee 0f       	add	r30, r30
     d00:	ff 1f       	adc	r31, r31
     d02:	e8 0f       	add	r30, r24
     d04:	f9 1f       	adc	r31, r25
     d06:	ee 0f       	add	r30, r30
     d08:	ff 1f       	adc	r31, r31
     d0a:	e3 5b       	subi	r30, 0xB3	; 179
     d0c:	fc 4f       	sbci	r31, 0xFC	; 252
     d0e:	40 81       	ld	r20, Z
     d10:	51 81       	ldd	r21, Z+1	; 0x01
		if (blownLocation == BREAKABLE || blownLocation == DISCOVERED_BREAKABLE) {
     d12:	43 30       	cpi	r20, 0x03	; 3
     d14:	51 05       	cpc	r21, r1
     d16:	19 f0       	breq	.+6      	; 0xd1e <blow_bomb+0x106>
     d18:	47 30       	cpi	r20, 0x07	; 7
     d1a:	51 05       	cpc	r21, r1
     d1c:	f9 f4       	brne	.+62     	; 0xd5c <blow_bomb+0x144>
			playing_field[xPos][yPos] = EMPTY_SQUARE;
     d1e:	f9 01       	movw	r30, r18
     d20:	ee 0f       	add	r30, r30
     d22:	ff 1f       	adc	r31, r31
     d24:	ee 0f       	add	r30, r30
     d26:	ff 1f       	adc	r31, r31
     d28:	ee 0f       	add	r30, r30
     d2a:	ff 1f       	adc	r31, r31
     d2c:	e8 0f       	add	r30, r24
     d2e:	f9 1f       	adc	r31, r25
     d30:	ee 0f       	add	r30, r30
     d32:	ff 1f       	adc	r31, r31
     d34:	e3 5b       	subi	r30, 0xB3	; 179
     d36:	fc 4f       	sbci	r31, 0xFC	; 252
     d38:	11 82       	std	Z+1, r1	; 0x01
     d3a:	10 82       	st	Z, r1
			if (in_field_of_vision(xPos, yPos)) {
     d3c:	61 2f       	mov	r22, r17
     d3e:	80 2f       	mov	r24, r16
     d40:	0e 94 c0 05 	call	0xb80	; 0xb80 <in_field_of_vision>
     d44:	88 23       	and	r24, r24
     d46:	31 f0       	breq	.+12     	; 0xd54 <blow_bomb+0x13c>
				update_square_colour(xPos, yPos, EMPTY_SQUARE);
     d48:	40 e0       	ldi	r20, 0x00	; 0
     d4a:	50 e0       	ldi	r21, 0x00	; 0
     d4c:	61 2f       	mov	r22, r17
     d4e:	80 2f       	mov	r24, r16
     d50:	0e 94 7f 01 	call	0x2fe	; 0x2fe <update_square_colour>
			}
			discoverable_dfs(xPos, yPos);
     d54:	61 2f       	mov	r22, r17
     d56:	80 2f       	mov	r24, r16
     d58:	0e 94 b0 02 	call	0x560	; 0x560 <discoverable_dfs>
				update_square_colour(xPos, yPos, EMPTY_SQUARE);
			}
			discoverable_dfs(xPos, yPos);
		}
	}
	for (int i = -1; i <= 1; i+=2) {
     d5c:	22 96       	adiw	r28, 0x02	; 2
     d5e:	c2 30       	cpi	r28, 0x02	; 2
     d60:	d1 05       	cpc	r29, r1
     d62:	0c f4       	brge	.+2      	; 0xd66 <blow_bomb+0x14e>
     d64:	be cf       	rjmp	.-132    	; 0xce2 <blow_bomb+0xca>
			}
			discoverable_dfs(xPos, yPos);
		}
	}
	
	uint8_t distance_to_bomb = abs(player_x-bomb_x) + abs(player_y-bomb_y);
     d66:	c0 91 56 05 	lds	r28, 0x0556	; 0x800556 <bomb_x>
     d6a:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <player_x>
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	8c 1b       	sub	r24, r28
     d72:	91 09       	sbc	r25, r1
     d74:	9c 01       	movw	r18, r24
     d76:	22 f4       	brpl	.+8      	; 0xd80 <blow_bomb+0x168>
     d78:	22 27       	eor	r18, r18
     d7a:	33 27       	eor	r19, r19
     d7c:	28 1b       	sub	r18, r24
     d7e:	39 0b       	sbc	r19, r25
     d80:	42 2f       	mov	r20, r18
     d82:	d0 91 4d 04 	lds	r29, 0x044D	; 0x80044d <bomb_y>
     d86:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <player_y>
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	8d 1b       	sub	r24, r29
     d8e:	91 09       	sbc	r25, r1
     d90:	9c 01       	movw	r18, r24
     d92:	22 f4       	brpl	.+8      	; 0xd9c <blow_bomb+0x184>
     d94:	22 27       	eor	r18, r18
     d96:	33 27       	eor	r19, r19
     d98:	28 1b       	sub	r18, r24
     d9a:	39 0b       	sbc	r19, r25
     d9c:	24 0f       	add	r18, r20
	if (distance_to_bomb <= 1) {
     d9e:	22 30       	cpi	r18, 0x02	; 2
     da0:	18 f4       	brcc	.+6      	; 0xda8 <blow_bomb+0x190>
		game_over = 1;
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <game_over>
	}
	if (in_field_of_vision(bomb_x, bomb_y)) {
     da8:	6d 2f       	mov	r22, r29
     daa:	8c 2f       	mov	r24, r28
     dac:	0e 94 c0 05 	call	0xb80	; 0xb80 <in_field_of_vision>
     db0:	88 23       	and	r24, r24
     db2:	31 f0       	breq	.+12     	; 0xdc0 <blow_bomb+0x1a8>
		update_square_colour(bomb_x, bomb_y, EMPTY_SQUARE);
     db4:	40 e0       	ldi	r20, 0x00	; 0
     db6:	50 e0       	ldi	r21, 0x00	; 0
     db8:	6d 2f       	mov	r22, r29
     dba:	8c 2f       	mov	r24, r28
     dbc:	0e 94 7f 01 	call	0x2fe	; 0x2fe <update_square_colour>
	}
	bomb_visible = 0;
     dc0:	10 92 d0 04 	sts	0x04D0, r1	; 0x8004d0 <bomb_visible>
	bomb_animation_start();
     dc4:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <bomb_animation_start>
}
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	1f 91       	pop	r17
     dce:	0f 91       	pop	r16
     dd0:	08 95       	ret

00000dd2 <bomb_animation_middle>:
	if (in_field_of_vision(bomb_x, bomb_y)) {
		update_square_colour(bomb_x, bomb_y, PLAYER);
	}
}

void bomb_animation_middle() {
     dd2:	0f 93       	push	r16
     dd4:	1f 93       	push	r17
     dd6:	cf 93       	push	r28
     dd8:	df 93       	push	r29
	if (bomb_x == NO_BOMB || bomb_y == NO_BOMB) {
     dda:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <bomb_x>
     dde:	8f 3f       	cpi	r24, 0xFF	; 255
     de0:	a1 f1       	breq	.+104    	; 0xe4a <bomb_animation_middle+0x78>
     de2:	80 91 4d 04 	lds	r24, 0x044D	; 0x80044d <bomb_y>
     de6:	8f 3f       	cpi	r24, 0xFF	; 255
     de8:	81 f1       	breq	.+96     	; 0xe4a <bomb_animation_middle+0x78>
     dea:	cf ef       	ldi	r28, 0xFF	; 255
     dec:	df ef       	ldi	r29, 0xFF	; 255
     dee:	12 c0       	rjmp	.+36     	; 0xe14 <bomb_animation_middle+0x42>
		return;
	}
	for (int i = -1; i <= 1; i+=2) {
		uint8_t xPos = bomb_x +i;
     df0:	10 91 56 05 	lds	r17, 0x0556	; 0x800556 <bomb_x>
     df4:	1c 0f       	add	r17, r28
		uint8_t yPos = bomb_y;
     df6:	00 91 4d 04 	lds	r16, 0x044D	; 0x80044d <bomb_y>
		if (in_field_of_vision(xPos, yPos)) {
     dfa:	60 2f       	mov	r22, r16
     dfc:	81 2f       	mov	r24, r17
     dfe:	0e 94 c0 05 	call	0xb80	; 0xb80 <in_field_of_vision>
     e02:	88 23       	and	r24, r24
     e04:	31 f0       	breq	.+12     	; 0xe12 <bomb_animation_middle+0x40>
			update_square_colour(xPos, yPos, FACING);
     e06:	42 e0       	ldi	r20, 0x02	; 2
     e08:	50 e0       	ldi	r21, 0x00	; 0
     e0a:	60 2f       	mov	r22, r16
     e0c:	81 2f       	mov	r24, r17
     e0e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <update_square_colour>

void bomb_animation_middle() {
	if (bomb_x == NO_BOMB || bomb_y == NO_BOMB) {
		return;
	}
	for (int i = -1; i <= 1; i+=2) {
     e12:	22 96       	adiw	r28, 0x02	; 2
     e14:	c2 30       	cpi	r28, 0x02	; 2
     e16:	d1 05       	cpc	r29, r1
     e18:	5c f3       	brlt	.-42     	; 0xdf0 <bomb_animation_middle+0x1e>
     e1a:	cf ef       	ldi	r28, 0xFF	; 255
     e1c:	df ef       	ldi	r29, 0xFF	; 255
     e1e:	12 c0       	rjmp	.+36     	; 0xe44 <bomb_animation_middle+0x72>
		if (in_field_of_vision(xPos, yPos)) {
			update_square_colour(xPos, yPos, FACING);
		}
	}
	for (int i = -1; i <= 1; i+=2) {
		uint8_t xPos = bomb_x;
     e20:	00 91 56 05 	lds	r16, 0x0556	; 0x800556 <bomb_x>
		uint8_t yPos = bomb_y+i;
     e24:	10 91 4d 04 	lds	r17, 0x044D	; 0x80044d <bomb_y>
     e28:	1c 0f       	add	r17, r28
		if (in_field_of_vision(xPos, yPos)) {
     e2a:	61 2f       	mov	r22, r17
     e2c:	80 2f       	mov	r24, r16
     e2e:	0e 94 c0 05 	call	0xb80	; 0xb80 <in_field_of_vision>
     e32:	88 23       	and	r24, r24
     e34:	31 f0       	breq	.+12     	; 0xe42 <bomb_animation_middle+0x70>
			update_square_colour(xPos, yPos, FACING);
     e36:	42 e0       	ldi	r20, 0x02	; 2
     e38:	50 e0       	ldi	r21, 0x00	; 0
     e3a:	61 2f       	mov	r22, r17
     e3c:	80 2f       	mov	r24, r16
     e3e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <update_square_colour>
		uint8_t yPos = bomb_y;
		if (in_field_of_vision(xPos, yPos)) {
			update_square_colour(xPos, yPos, FACING);
		}
	}
	for (int i = -1; i <= 1; i+=2) {
     e42:	22 96       	adiw	r28, 0x02	; 2
     e44:	c2 30       	cpi	r28, 0x02	; 2
     e46:	d1 05       	cpc	r29, r1
     e48:	5c f3       	brlt	.-42     	; 0xe20 <bomb_animation_middle+0x4e>
		uint8_t yPos = bomb_y+i;
		if (in_field_of_vision(xPos, yPos)) {
			update_square_colour(xPos, yPos, FACING);
		}
	}
}
     e4a:	df 91       	pop	r29
     e4c:	cf 91       	pop	r28
     e4e:	1f 91       	pop	r17
     e50:	0f 91       	pop	r16
     e52:	08 95       	ret

00000e54 <bomb_animation_end>:

void bomb_animation_end() {
     e54:	0f 93       	push	r16
     e56:	1f 93       	push	r17
     e58:	cf 93       	push	r28
     e5a:	df 93       	push	r29
	if (bomb_x == NO_BOMB || bomb_y == NO_BOMB) {
     e5c:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <bomb_x>
     e60:	8f 3f       	cpi	r24, 0xFF	; 255
     e62:	09 f4       	brne	.+2      	; 0xe66 <bomb_animation_end+0x12>
     e64:	52 c0       	rjmp	.+164    	; 0xf0a <bomb_animation_end+0xb6>
     e66:	80 91 4d 04 	lds	r24, 0x044D	; 0x80044d <bomb_y>
     e6a:	8f 3f       	cpi	r24, 0xFF	; 255
     e6c:	09 f4       	brne	.+2      	; 0xe70 <bomb_animation_end+0x1c>
     e6e:	4d c0       	rjmp	.+154    	; 0xf0a <bomb_animation_end+0xb6>
     e70:	cf ef       	ldi	r28, 0xFF	; 255
     e72:	df ef       	ldi	r29, 0xFF	; 255
     e74:	16 c0       	rjmp	.+44     	; 0xea2 <bomb_animation_end+0x4e>
		return;
	}
	for (int i = -1; i <= 1; i+=2) {
		uint8_t xPos = bomb_x +i;
     e76:	10 91 56 05 	lds	r17, 0x0556	; 0x800556 <bomb_x>
     e7a:	1c 0f       	add	r17, r28
		uint8_t yPos = bomb_y;
     e7c:	00 91 4d 04 	lds	r16, 0x044D	; 0x80044d <bomb_y>
		if (in_field_of_vision(xPos, yPos)) {
     e80:	60 2f       	mov	r22, r16
     e82:	81 2f       	mov	r24, r17
     e84:	0e 94 c0 05 	call	0xb80	; 0xb80 <in_field_of_vision>
     e88:	88 23       	and	r24, r24
     e8a:	51 f0       	breq	.+20     	; 0xea0 <bomb_animation_end+0x4c>
			update_square_colour(xPos, yPos, get_object_at(xPos, yPos));
     e8c:	60 2f       	mov	r22, r16
     e8e:	81 2f       	mov	r24, r17
     e90:	0e 94 67 02 	call	0x4ce	; 0x4ce <get_object_at>
     e94:	48 2f       	mov	r20, r24
     e96:	50 e0       	ldi	r21, 0x00	; 0
     e98:	60 2f       	mov	r22, r16
     e9a:	81 2f       	mov	r24, r17
     e9c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <update_square_colour>

void bomb_animation_end() {
	if (bomb_x == NO_BOMB || bomb_y == NO_BOMB) {
		return;
	}
	for (int i = -1; i <= 1; i+=2) {
     ea0:	22 96       	adiw	r28, 0x02	; 2
     ea2:	c2 30       	cpi	r28, 0x02	; 2
     ea4:	d1 05       	cpc	r29, r1
     ea6:	3c f3       	brlt	.-50     	; 0xe76 <bomb_animation_end+0x22>
     ea8:	cf ef       	ldi	r28, 0xFF	; 255
     eaa:	df ef       	ldi	r29, 0xFF	; 255
     eac:	16 c0       	rjmp	.+44     	; 0xeda <bomb_animation_end+0x86>
		if (in_field_of_vision(xPos, yPos)) {
			update_square_colour(xPos, yPos, get_object_at(xPos, yPos));
		}
	}
	for (int i = -1; i <= 1; i+=2) {
		uint8_t xPos = bomb_x;
     eae:	00 91 56 05 	lds	r16, 0x0556	; 0x800556 <bomb_x>
		uint8_t yPos = bomb_y+i;
     eb2:	10 91 4d 04 	lds	r17, 0x044D	; 0x80044d <bomb_y>
     eb6:	1c 0f       	add	r17, r28
		if (in_field_of_vision(xPos, yPos)) {
     eb8:	61 2f       	mov	r22, r17
     eba:	80 2f       	mov	r24, r16
     ebc:	0e 94 c0 05 	call	0xb80	; 0xb80 <in_field_of_vision>
     ec0:	88 23       	and	r24, r24
     ec2:	51 f0       	breq	.+20     	; 0xed8 <bomb_animation_end+0x84>
			update_square_colour(xPos, yPos, get_object_at(xPos, yPos));
     ec4:	61 2f       	mov	r22, r17
     ec6:	80 2f       	mov	r24, r16
     ec8:	0e 94 67 02 	call	0x4ce	; 0x4ce <get_object_at>
     ecc:	48 2f       	mov	r20, r24
     ece:	50 e0       	ldi	r21, 0x00	; 0
     ed0:	61 2f       	mov	r22, r17
     ed2:	80 2f       	mov	r24, r16
     ed4:	0e 94 7f 01 	call	0x2fe	; 0x2fe <update_square_colour>
		uint8_t yPos = bomb_y;
		if (in_field_of_vision(xPos, yPos)) {
			update_square_colour(xPos, yPos, get_object_at(xPos, yPos));
		}
	}
	for (int i = -1; i <= 1; i+=2) {
     ed8:	22 96       	adiw	r28, 0x02	; 2
     eda:	c2 30       	cpi	r28, 0x02	; 2
     edc:	d1 05       	cpc	r29, r1
     ede:	3c f3       	brlt	.-50     	; 0xeae <bomb_animation_end+0x5a>
		uint8_t yPos = bomb_y+i;
		if (in_field_of_vision(xPos, yPos)) {
			update_square_colour(xPos, yPos, get_object_at(xPos, yPos));
		}
	}
	if (in_field_of_vision(bomb_x, bomb_y)) {
     ee0:	d0 91 4d 04 	lds	r29, 0x044D	; 0x80044d <bomb_y>
     ee4:	c0 91 56 05 	lds	r28, 0x0556	; 0x800556 <bomb_x>
     ee8:	6d 2f       	mov	r22, r29
     eea:	8c 2f       	mov	r24, r28
     eec:	0e 94 c0 05 	call	0xb80	; 0xb80 <in_field_of_vision>
     ef0:	88 23       	and	r24, r24
     ef2:	31 f0       	breq	.+12     	; 0xf00 <bomb_animation_end+0xac>
		update_square_colour(bomb_x, bomb_y, EMPTY_SQUARE);
     ef4:	40 e0       	ldi	r20, 0x00	; 0
     ef6:	50 e0       	ldi	r21, 0x00	; 0
     ef8:	6d 2f       	mov	r22, r29
     efa:	8c 2f       	mov	r24, r28
     efc:	0e 94 7f 01 	call	0x2fe	; 0x2fe <update_square_colour>
	}
	bomb_x = NO_BOMB;
     f00:	8f ef       	ldi	r24, 0xFF	; 255
     f02:	80 93 56 05 	sts	0x0556, r24	; 0x800556 <bomb_x>
	bomb_y = NO_BOMB;
     f06:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <bomb_y>
}
     f0a:	df 91       	pop	r29
     f0c:	cf 91       	pop	r28
     f0e:	1f 91       	pop	r17
     f10:	0f 91       	pop	r16
     f12:	08 95       	ret

00000f14 <flash_bomb>:

/* 
 * Flashes bomb (basically same as flash_facing())
 */
void flash_bomb() {
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
	if (bomb_x == NO_BOMB || bomb_y == NO_BOMB) {
     f18:	c0 91 56 05 	lds	r28, 0x0556	; 0x800556 <bomb_x>
     f1c:	cf 3f       	cpi	r28, 0xFF	; 255
     f1e:	39 f1       	breq	.+78     	; 0xf6e <flash_bomb+0x5a>
     f20:	d0 91 4d 04 	lds	r29, 0x044D	; 0x80044d <bomb_y>
     f24:	df 3f       	cpi	r29, 0xFF	; 255
     f26:	19 f1       	breq	.+70     	; 0xf6e <flash_bomb+0x5a>
		return;
	}
	if (bomb_visible) {
     f28:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <bomb_visible>
     f2c:	88 23       	and	r24, r24
     f2e:	69 f0       	breq	.+26     	; 0xf4a <flash_bomb+0x36>
		// we need to flash the facing cursor off, it should be replaced by
		// the colour of the piece which is at that location
		if (in_field_of_vision(bomb_x, bomb_y)) {
     f30:	6d 2f       	mov	r22, r29
     f32:	8c 2f       	mov	r24, r28
     f34:	0e 94 c0 05 	call	0xb80	; 0xb80 <in_field_of_vision>
     f38:	88 23       	and	r24, r24
     f3a:	99 f0       	breq	.+38     	; 0xf62 <flash_bomb+0x4e>
			update_square_colour(bomb_x, bomb_y, NO_BOMB);		
     f3c:	4f ef       	ldi	r20, 0xFF	; 255
     f3e:	50 e0       	ldi	r21, 0x00	; 0
     f40:	6d 2f       	mov	r22, r29
     f42:	8c 2f       	mov	r24, r28
     f44:	0e 94 7f 01 	call	0x2fe	; 0x2fe <update_square_colour>
     f48:	0c c0       	rjmp	.+24     	; 0xf62 <flash_bomb+0x4e>
		}
	} else {
		// we need to flash the facing cursor on
		if (in_field_of_vision(bomb_x, bomb_y)) {
     f4a:	6d 2f       	mov	r22, r29
     f4c:	8c 2f       	mov	r24, r28
     f4e:	0e 94 c0 05 	call	0xb80	; 0xb80 <in_field_of_vision>
     f52:	88 23       	and	r24, r24
     f54:	31 f0       	breq	.+12     	; 0xf62 <flash_bomb+0x4e>
			update_square_colour(bomb_x, bomb_y, BOMB);
     f56:	48 e0       	ldi	r20, 0x08	; 8
     f58:	50 e0       	ldi	r21, 0x00	; 0
     f5a:	6d 2f       	mov	r22, r29
     f5c:	8c 2f       	mov	r24, r28
     f5e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <update_square_colour>
		}
	}

	bomb_visible = 1 - bomb_visible; //alternate between 0 and 1
     f62:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <bomb_visible>
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	89 1b       	sub	r24, r25
     f6a:	80 93 d0 04 	sts	0x04D0, r24	; 0x8004d0 <bomb_visible>
}
     f6e:	df 91       	pop	r29
     f70:	cf 91       	pop	r28
     f72:	08 95       	ret

00000f74 <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     f74:	80 e8       	ldi	r24, 0x80	; 128
     f76:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <spi_setup_master>
     f7a:	08 95       	ret

00000f7c <ledmatrix_update_pixel>:
     f7c:	1f 93       	push	r17
     f7e:	cf 93       	push	r28
     f80:	df 93       	push	r29
     f82:	80 31       	cpi	r24, 0x10	; 16
     f84:	b0 f4       	brcc	.+44     	; 0xfb2 <ledmatrix_update_pixel+0x36>
     f86:	68 30       	cpi	r22, 0x08	; 8
     f88:	a0 f4       	brcc	.+40     	; 0xfb2 <ledmatrix_update_pixel+0x36>
     f8a:	14 2f       	mov	r17, r20
     f8c:	c6 2f       	mov	r28, r22
     f8e:	d8 2f       	mov	r29, r24
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <spi_send_byte>
     f96:	6c 2f       	mov	r22, r28
     f98:	67 70       	andi	r22, 0x07	; 7
     f9a:	80 e1       	ldi	r24, 0x10	; 16
     f9c:	68 9f       	mul	r22, r24
     f9e:	90 01       	movw	r18, r0
     fa0:	11 24       	eor	r1, r1
     fa2:	8d 2f       	mov	r24, r29
     fa4:	8f 70       	andi	r24, 0x0F	; 15
     fa6:	82 2b       	or	r24, r18
     fa8:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <spi_send_byte>
     fac:	81 2f       	mov	r24, r17
     fae:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <spi_send_byte>
     fb2:	df 91       	pop	r29
     fb4:	cf 91       	pop	r28
     fb6:	1f 91       	pop	r17
     fb8:	08 95       	ret

00000fba <ledmatrix_update_column>:
     fba:	0f 93       	push	r16
     fbc:	1f 93       	push	r17
     fbe:	cf 93       	push	r28
     fc0:	80 31       	cpi	r24, 0x10	; 16
     fc2:	a0 f4       	brcc	.+40     	; 0xfec <ledmatrix_update_column+0x32>
     fc4:	8b 01       	movw	r16, r22
     fc6:	c8 2f       	mov	r28, r24
     fc8:	83 e0       	ldi	r24, 0x03	; 3
     fca:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <spi_send_byte>
     fce:	8c 2f       	mov	r24, r28
     fd0:	8f 70       	andi	r24, 0x0F	; 15
     fd2:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <spi_send_byte>
     fd6:	c0 e0       	ldi	r28, 0x00	; 0
     fd8:	07 c0       	rjmp	.+14     	; 0xfe8 <ledmatrix_update_column+0x2e>
     fda:	f8 01       	movw	r30, r16
     fdc:	ec 0f       	add	r30, r28
     fde:	f1 1d       	adc	r31, r1
     fe0:	80 81       	ld	r24, Z
     fe2:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <spi_send_byte>
     fe6:	cf 5f       	subi	r28, 0xFF	; 255
     fe8:	c8 30       	cpi	r28, 0x08	; 8
     fea:	b8 f3       	brcs	.-18     	; 0xfda <ledmatrix_update_column+0x20>
     fec:	cf 91       	pop	r28
     fee:	1f 91       	pop	r17
     ff0:	0f 91       	pop	r16
     ff2:	08 95       	ret

00000ff4 <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     ff4:	8f e0       	ldi	r24, 0x0F	; 15
     ff6:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <spi_send_byte>
     ffa:	08 95       	ret

00000ffc <start_screen>:
	 
}

void start_screen(void) {
	// Clear terminal screen and output a message
	clear_terminal();
     ffc:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <clear_terminal>
	move_terminal_cursor(10,10);
    1000:	6a e0       	ldi	r22, 0x0A	; 10
    1002:	70 e0       	ldi	r23, 0x00	; 0
    1004:	8a e0       	ldi	r24, 0x0A	; 10
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <move_terminal_cursor>
	printf_P(PSTR("Diamond Miners"));
    100c:	89 e1       	ldi	r24, 0x19	; 25
    100e:	91 e0       	ldi	r25, 0x01	; 1
    1010:	9f 93       	push	r25
    1012:	8f 93       	push	r24
    1014:	0e 94 55 12 	call	0x24aa	; 0x24aa <printf_P>
	move_terminal_cursor(10,12);
    1018:	6c e0       	ldi	r22, 0x0C	; 12
    101a:	70 e0       	ldi	r23, 0x00	; 0
    101c:	8a e0       	ldi	r24, 0x0A	; 10
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <move_terminal_cursor>
	printf_P(PSTR("CSSE2010/7201 project by Matthew Chen 46387110"));
    1024:	8a ee       	ldi	r24, 0xEA	; 234
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	9f 93       	push	r25
    102a:	8f 93       	push	r24
    102c:	0e 94 55 12 	call	0x24aa	; 0x24aa <printf_P>
	
	// Output the static start screen and wait for a push button 
	// to be pushed or a serial input of 's'
	start_display();
    1030:	0e 94 3b 01 	call	0x276	; 0x276 <start_display>
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
    1038:	0f 90       	pop	r0
    103a:	0f 90       	pop	r0
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
		if (serial_input_available()) {
    103c:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <serial_input_available>
    1040:	88 23       	and	r24, r24
    1042:	39 f0       	breq	.+14     	; 0x1052 <start_screen+0x56>
			serial_input = fgetc(stdin);
    1044:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <__iob>
    1048:	90 91 92 06 	lds	r25, 0x0692	; 0x800692 <__iob+0x1>
    104c:	0e 94 17 12 	call	0x242e	; 0x242e <fgetc>
    1050:	01 c0       	rjmp	.+2      	; 0x1054 <start_screen+0x58>
	while(1) {
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
    1052:	8f ef       	ldi	r24, 0xFF	; 255
		if (serial_input_available()) {
			serial_input = fgetc(stdin);
		}
		// If the serial input is 's', then exit the start screen
		if (serial_input == 's' || serial_input == 'S') {
    1054:	83 37       	cpi	r24, 0x73	; 115
    1056:	31 f0       	breq	.+12     	; 0x1064 <start_screen+0x68>
    1058:	83 35       	cpi	r24, 0x53	; 83
    105a:	21 f0       	breq	.+8      	; 0x1064 <start_screen+0x68>
			break;
		}
		// Next check for any button presses
		int8_t btn = button_pushed();
    105c:	0e 94 ca 00 	call	0x194	; 0x194 <button_pushed>
		if (btn != NO_BUTTON_PUSHED) {
    1060:	8f 3f       	cpi	r24, 0xFF	; 255
    1062:	61 f3       	breq	.-40     	; 0x103c <start_screen+0x40>
    1064:	08 95       	ret

00001066 <new_game>:
	}
}

void new_game(void) {
	// Clear the serial terminal
	clear_terminal();
    1066:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <clear_terminal>
	
	// Initialise the game and display
	initialise_game(level);
    106a:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <level>
    106e:	0e 94 72 03 	call	0x6e4	; 0x6e4 <initialise_game>
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
    1072:	0e 94 ca 00 	call	0x194	; 0x194 <button_pushed>
	clear_serial_input_buffer();
    1076:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <clear_serial_input_buffer>
    107a:	08 95       	ret

0000107c <handle_game_over>:

	}
	// We get here if the game is over.
}

void handle_game_over() {
    107c:	8f 92       	push	r8
    107e:	9f 92       	push	r9
    1080:	af 92       	push	r10
    1082:	bf 92       	push	r11
    1084:	cf 92       	push	r12
    1086:	df 92       	push	r13
    1088:	ef 92       	push	r14
    108a:	ff 92       	push	r15
	clear_terminal();
    108c:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <clear_terminal>
	move_terminal_cursor(10,14);
    1090:	6e e0       	ldi	r22, 0x0E	; 14
    1092:	70 e0       	ldi	r23, 0x00	; 0
    1094:	8a e0       	ldi	r24, 0x0A	; 10
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <move_terminal_cursor>
	printf_P(PSTR("GAME OVER"));
    109c:	80 ee       	ldi	r24, 0xE0	; 224
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	9f 93       	push	r25
    10a2:	8f 93       	push	r24
    10a4:	0e 94 55 12 	call	0x24aa	; 0x24aa <printf_P>
	move_terminal_cursor(10,15);
    10a8:	6f e0       	ldi	r22, 0x0F	; 15
    10aa:	70 e0       	ldi	r23, 0x00	; 0
    10ac:	8a e0       	ldi	r24, 0x0A	; 10
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <move_terminal_cursor>
	printf_P(PSTR("Press a button to start again"));
    10b4:	82 ec       	ldi	r24, 0xC2	; 194
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	9f 93       	push	r25
    10ba:	8f 93       	push	r24
    10bc:	0e 94 55 12 	call	0x24aa	; 0x24aa <printf_P>
	play_game_over();
    10c0:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <play_game_over>
	uint32_t current_time = get_current_time();
    10c4:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <get_current_time>
    10c8:	4b 01       	movw	r8, r22
    10ca:	5c 01       	movw	r10, r24
	uint32_t time_since_end = current_time;
	while(button_pushed() == NO_BUTTON_PUSHED) {
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	1d c0       	rjmp	.+58     	; 0x1110 <handle_game_over+0x94>
		current_time = get_current_time();
    10d6:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <get_current_time>
    10da:	6b 01       	movw	r12, r22
    10dc:	7c 01       	movw	r14, r24
		if (current_time >= time_since_end + 50) {
    10de:	d5 01       	movw	r26, r10
    10e0:	c4 01       	movw	r24, r8
    10e2:	c2 96       	adiw	r24, 0x32	; 50
    10e4:	a1 1d       	adc	r26, r1
    10e6:	b1 1d       	adc	r27, r1
    10e8:	c8 16       	cp	r12, r24
    10ea:	d9 06       	cpc	r13, r25
    10ec:	ea 06       	cpc	r14, r26
    10ee:	fb 06       	cpc	r15, r27
    10f0:	10 f0       	brcs	.+4      	; 0x10f6 <handle_game_over+0x7a>
			bomb_animation_middle();
    10f2:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <bomb_animation_middle>
		}
		if (current_time >= time_since_end + 100) {
    10f6:	d5 01       	movw	r26, r10
    10f8:	c4 01       	movw	r24, r8
    10fa:	8c 59       	subi	r24, 0x9C	; 156
    10fc:	9f 4f       	sbci	r25, 0xFF	; 255
    10fe:	af 4f       	sbci	r26, 0xFF	; 255
    1100:	bf 4f       	sbci	r27, 0xFF	; 255
    1102:	c8 16       	cp	r12, r24
    1104:	d9 06       	cpc	r13, r25
    1106:	ea 06       	cpc	r14, r26
    1108:	fb 06       	cpc	r15, r27
    110a:	10 f0       	brcs	.+4      	; 0x1110 <handle_game_over+0x94>
			bomb_animation_end();
    110c:	0e 94 2a 07 	call	0xe54	; 0xe54 <bomb_animation_end>
	move_terminal_cursor(10,15);
	printf_P(PSTR("Press a button to start again"));
	play_game_over();
	uint32_t current_time = get_current_time();
	uint32_t time_since_end = current_time;
	while(button_pushed() == NO_BUTTON_PUSHED) {
    1110:	0e 94 ca 00 	call	0x194	; 0x194 <button_pushed>
    1114:	8f 3f       	cpi	r24, 0xFF	; 255
    1116:	f9 f2       	breq	.-66     	; 0x10d6 <handle_game_over+0x5a>
		}
		if (current_time >= time_since_end + 100) {
			bomb_animation_end();
		}
	}
	new_game();
    1118:	0e 94 33 08 	call	0x1066	; 0x1066 <new_game>
}
    111c:	ff 90       	pop	r15
    111e:	ef 90       	pop	r14
    1120:	df 90       	pop	r13
    1122:	cf 90       	pop	r12
    1124:	bf 90       	pop	r11
    1126:	af 90       	pop	r10
    1128:	9f 90       	pop	r9
    112a:	8f 90       	pop	r8
    112c:	08 95       	ret

0000112e <updateInfo>:

/*
 * Updates visible info (e.g. cheat mode enabled, distance, diamond count, etc)
 */
void updateInfo(uint8_t cheatMode) {
    112e:	cf 93       	push	r28
    1130:	c8 2f       	mov	r28, r24
		// Update terminal info
		clear_terminal();
    1132:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <clear_terminal>
		move_terminal_cursor(10,10);
    1136:	6a e0       	ldi	r22, 0x0A	; 10
    1138:	70 e0       	ldi	r23, 0x00	; 0
    113a:	8a e0       	ldi	r24, 0x0A	; 10
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <move_terminal_cursor>
		if (cheatMode == 1) {
    1142:	c1 30       	cpi	r28, 0x01	; 1
    1144:	49 f4       	brne	.+18     	; 0x1158 <updateInfo+0x2a>
			printf_P(PSTR("CHEATMODE ENABLED"));
    1146:	80 eb       	ldi	r24, 0xB0	; 176
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	9f 93       	push	r25
    114c:	8f 93       	push	r24
    114e:	0e 94 55 12 	call	0x24aa	; 0x24aa <printf_P>
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	0b c0       	rjmp	.+22     	; 0x116e <updateInfo+0x40>
		} else {
			printf_P(PSTR("CHEATMODE DISABLED"));
    1158:	8d e9       	ldi	r24, 0x9D	; 157
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	9f 93       	push	r25
    115e:	8f 93       	push	r24
    1160:	0e 94 55 12 	call	0x24aa	; 0x24aa <printf_P>
			PORTA &= ~(1 << PORTA7); // turn A7 pin off
    1164:	82 b1       	in	r24, 0x02	; 2
    1166:	8f 77       	andi	r24, 0x7F	; 127
    1168:	82 b9       	out	0x02, r24	; 2
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
		}
		if (diamond_distance() == -1) {				// for case where no diamonds on map but cheat mode is on
    116e:	0e 94 db 03 	call	0x7b6	; 0x7b6 <diamond_distance>
    1172:	01 96       	adiw	r24, 0x01	; 1
    1174:	19 f4       	brne	.+6      	; 0x117c <updateInfo+0x4e>
			PORTA &= ~(1 << PORTA7); // turn A7 pin off
    1176:	82 b1       	in	r24, 0x02	; 2
    1178:	8f 77       	andi	r24, 0x7F	; 127
    117a:	82 b9       	out	0x02, r24	; 2
		}
			
		move_terminal_cursor(10,12);
    117c:	6c e0       	ldi	r22, 0x0C	; 12
    117e:	70 e0       	ldi	r23, 0x00	; 0
    1180:	8a e0       	ldi	r24, 0x0A	; 10
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <move_terminal_cursor>
		printf_P(PSTR("Diamond Count %d"), diamondCount);
    1188:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <diamondCount+0x1>
    118c:	8f 93       	push	r24
    118e:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <diamondCount>
    1192:	8f 93       	push	r24
    1194:	8c e8       	ldi	r24, 0x8C	; 140
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	9f 93       	push	r25
    119a:	8f 93       	push	r24
    119c:	0e 94 55 12 	call	0x24aa	; 0x24aa <printf_P>
		diamondDistance = diamond_distance();
    11a0:	0e 94 db 03 	call	0x7b6	; 0x7b6 <diamond_distance>
    11a4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    11a8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	cf 91       	pop	r28
    11b6:	08 95       	ret

000011b8 <setUpPins>:
 * MAYBE CHANGE INTO SETUP ALL PINS IN HERE??
 */
void setUpPins() {
	// Set A pins to be outputs for LEDs and CC control for SSD and JOYSTICK CONTROL
	// A7 is for LED steps blinker, A6 is for CC, A5 is for bomb danger LED, A0 is for U/D, A1 is for L/R
	DDRA = (1 << DDRA5) | (1 << DDRA6) | (1 << DDRA7);
    11b8:	80 ee       	ldi	r24, 0xE0	; 224
    11ba:	81 b9       	out	0x01, r24	; 1
	// Set C pins to be outputs for SSD
	DDRC = 0xFF;
    11bc:	8f ef       	ldi	r24, 0xFF	; 255
    11be:	87 b9       	out	0x07, r24	; 7
	
	// SETUP FOR JOYSTICK. COPY AND PASTED FROM LAB 16
	// Set up ADC - AVCC reference, right adjust
	// Input selection doesn't matter yet - we'll swap this around in the while
	// loop below.
	ADMUX = (1<<REFS0);
    11c0:	80 e4       	ldi	r24, 0x40	; 64
    11c2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	// Turn on the ADC (but don't start a conversion yet). Choose a clock
	// divider of 64. (The ADC clock must be somewhere
	// between 50kHz and 200kHz. We will divide our 8MHz clock by 64
	// to give us 125kHz.)
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1);
    11c6:	86 e8       	ldi	r24, 0x86	; 134
    11c8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    11cc:	08 95       	ret

000011ce <initialise_hardware>:
		}
	}
}

void initialise_hardware(void) {
	ledmatrix_setup();
    11ce:	0e 94 ba 07 	call	0xf74	; 0xf74 <ledmatrix_setup>
	init_button_interrupts();
    11d2:	0e 94 ba 00 	call	0x174	; 0x174 <init_button_interrupts>
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200,0);
    11d6:	40 e0       	ldi	r20, 0x00	; 0
    11d8:	60 e0       	ldi	r22, 0x00	; 0
    11da:	7b e4       	ldi	r23, 0x4B	; 75
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	0e 94 12 0c 	call	0x1824	; 0x1824 <init_serial_stdio>
	
	setUpPins();
    11e4:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <setUpPins>
	
	init_timer0();
    11e8:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <init_timer0>
	init_timer1();
    11ec:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <init_timer1>
	// Turn on global interrupts
	sei();
    11f0:	78 94       	sei
    11f2:	08 95       	ret

000011f4 <joystickDirX>:

/*
 * Some sort of direction thing. Currently using polling. May need to use interrupts instead.
 */ 
uint16_t joystickDirX() {
	ADMUX &= ~1; //turn off first bit
    11f4:	ec e7       	ldi	r30, 0x7C	; 124
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	8e 7f       	andi	r24, 0xFE	; 254
    11fc:	80 83       	st	Z, r24
	// Start the ADC conversion
	ADCSRA |= (1<<ADSC);
    11fe:	ea e7       	ldi	r30, 0x7A	; 122
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	80 64       	ori	r24, 0x40	; 64
    1206:	80 83       	st	Z, r24
			
	while(ADCSRA & (1<<ADSC)) {
    1208:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    120c:	86 fd       	sbrc	r24, 6
    120e:	fc cf       	rjmp	.-8      	; 0x1208 <joystickDirX+0x14>
		; /* Wait until conversion finished */
	}
	return ADC;
    1210:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    1214:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
    1218:	08 95       	ret

0000121a <joystickDirY>:

/*
 * Some sort of direction thing. Currently using polling. May need to use interrupts instead.
 */ 
uint16_t joystickDirY() {
	ADMUX |= 1;		//turn on first bit
    121a:	ec e7       	ldi	r30, 0x7C	; 124
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	81 60       	ori	r24, 0x01	; 1
    1222:	80 83       	st	Z, r24
	// Start the ADC conversion
	ADCSRA |= (1<<ADSC);
    1224:	ea e7       	ldi	r30, 0x7A	; 122
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	80 64       	ori	r24, 0x40	; 64
    122c:	80 83       	st	Z, r24
			
	while(ADCSRA & (1<<ADSC)) {
    122e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    1232:	86 fd       	sbrc	r24, 6
    1234:	fc cf       	rjmp	.-8      	; 0x122e <joystickDirY+0x14>
		; /* Wait until conversion finished */
	}
	return ADC;
    1236:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
    123a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
    123e:	08 95       	ret

00001240 <play_game>:
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
	clear_serial_input_buffer();
}

void play_game(void) {
    1240:	2f 92       	push	r2
    1242:	3f 92       	push	r3
    1244:	4f 92       	push	r4
    1246:	5f 92       	push	r5
    1248:	6f 92       	push	r6
    124a:	7f 92       	push	r7
    124c:	8f 92       	push	r8
    124e:	9f 92       	push	r9
    1250:	af 92       	push	r10
    1252:	bf 92       	push	r11
    1254:	cf 92       	push	r12
    1256:	df 92       	push	r13
    1258:	ef 92       	push	r14
    125a:	ff 92       	push	r15
    125c:	0f 93       	push	r16
    125e:	1f 93       	push	r17
    1260:	cf 93       	push	r28
    1262:	df 93       	push	r29
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
    1268:	2c 97       	sbiw	r28, 0x0c	; 12
    126a:	0f b6       	in	r0, 0x3f	; 63
    126c:	f8 94       	cli
    126e:	de bf       	out	0x3e, r29	; 62
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	cd bf       	out	0x3d, r28	; 61
	uint16_t joystickX, joystickY, bomb_flash_interval;
	uint8_t firstLoop = 1; // Whether it is the first loop of the game.
	uint8_t valid_move_made = 0;		// Whether any valid move has been made during this loop
	joystickX = NO_JOYSTICK_ACTION;
	joystickY = NO_JOYSTICK_ACTION;
	diamondCount = 0; 
    1274:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <diamondCount+0x1>
    1278:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <diamondCount>
	last_flash_time = get_current_time();
    127c:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <get_current_time>
    1280:	6a 83       	std	Y+2, r22	; 0x02
    1282:	7b 83       	std	Y+3, r23	; 0x03
    1284:	8c 83       	std	Y+4, r24	; 0x04
    1286:	9d 83       	std	Y+5, r25	; 0x05
	last_diamond_flash_time = get_current_time();
    1288:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <get_current_time>
    128c:	6f 83       	std	Y+7, r22	; 0x07
    128e:	78 87       	std	Y+8, r23	; 0x08
    1290:	89 87       	std	Y+9, r24	; 0x09
    1292:	9a 87       	std	Y+10, r25	; 0x0a
	last_joystick_time = 0;
	bomb_time = NO_BOMB;
	bomb_flash_interval = 600;
	updateInfo(cheatMode);
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	0e 94 97 08 	call	0x112e	; 0x112e <updateInfo>
	
	uint32_t last_flash_time, current_time, last_diamond_flash_time, bomb_time, last_joystick_time;
	uint8_t btn; //the button pushed
	uint8_t cheatMode = 0; // 1 if cheat mode is enable else 0.
	uint16_t joystickX, joystickY, bomb_flash_interval;
	uint8_t firstLoop = 1; // Whether it is the first loop of the game.
    129a:	21 e0       	ldi	r18, 0x01	; 1
    129c:	2e 83       	std	Y+6, r18	; 0x06
	diamondCount = 0; 
	last_flash_time = get_current_time();
	last_diamond_flash_time = get_current_time();
	last_joystick_time = 0;
	bomb_time = NO_BOMB;
	bomb_flash_interval = 600;
    129e:	0f 2e       	mov	r0, r31
    12a0:	f8 e5       	ldi	r31, 0x58	; 88
    12a2:	2f 2e       	mov	r2, r31
    12a4:	f2 e0       	ldi	r31, 0x02	; 2
    12a6:	3f 2e       	mov	r3, r31
    12a8:	f0 2d       	mov	r31, r0

void play_game(void) {
	
	uint32_t last_flash_time, current_time, last_diamond_flash_time, bomb_time, last_joystick_time;
	uint8_t btn; //the button pushed
	uint8_t cheatMode = 0; // 1 if cheat mode is enable else 0.
    12aa:	19 82       	std	Y+1, r1	; 0x01
	joystickX = NO_JOYSTICK_ACTION;
	joystickY = NO_JOYSTICK_ACTION;
	diamondCount = 0; 
	last_flash_time = get_current_time();
	last_diamond_flash_time = get_current_time();
	last_joystick_time = 0;
    12ac:	81 2c       	mov	r8, r1
    12ae:	91 2c       	mov	r9, r1
    12b0:	54 01       	movw	r10, r8
	bomb_time = NO_BOMB;
    12b2:	44 24       	eor	r4, r4
    12b4:	4a 94       	dec	r4
    12b6:	54 2c       	mov	r5, r4
    12b8:	32 01       	movw	r6, r4
	bomb_flash_interval = 600;
	updateInfo(cheatMode);
	// We play the game until it's over
	while(!is_game_over()) {
    12ba:	15 c2       	rjmp	.+1066   	; 0x16e6 <play_game+0x4a6>
		// We need to check if any button has been pushed, this will be
		// NO_BUTTON_PUSHED if no button has been pushed
		btn = button_pushed();
    12bc:	0e 94 ca 00 	call	0x194	; 0x194 <button_pushed>
    12c0:	08 2f       	mov	r16, r24
		valid_move_made = 0;
		// If the last joystick movement was taken greater than 0.5 seconds ago, we will take another joystick movement
		// Note we allow change in direction to be instantly registered as movements as I think this make it
		// more playable (as change in direction is likeable to change in keys pressed so should have instantaneous feedback)
		// This occurs naturally.
		if (get_current_time() - last_joystick_time > 500 || last_joystick_time == 0) {
    12c2:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <get_current_time>
    12c6:	dc 01       	movw	r26, r24
    12c8:	cb 01       	movw	r24, r22
    12ca:	88 19       	sub	r24, r8
    12cc:	99 09       	sbc	r25, r9
    12ce:	aa 09       	sbc	r26, r10
    12d0:	bb 09       	sbc	r27, r11
    12d2:	85 3f       	cpi	r24, 0xF5	; 245
    12d4:	91 40       	sbci	r25, 0x01	; 1
    12d6:	a1 05       	cpc	r26, r1
    12d8:	b1 05       	cpc	r27, r1
    12da:	28 f4       	brcc	.+10     	; 0x12e6 <play_game+0xa6>
    12dc:	81 14       	cp	r8, r1
    12de:	91 04       	cpc	r9, r1
    12e0:	a1 04       	cpc	r10, r1
    12e2:	b1 04       	cpc	r11, r1
    12e4:	f1 f4       	brne	.+60     	; 0x1322 <play_game+0xe2>
			joystickX = joystickDirX();
    12e6:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <joystickDirX>
    12ea:	9c 87       	std	Y+12, r25	; 0x0c
    12ec:	8b 87       	std	Y+11, r24	; 0x0b
			joystickY = joystickDirY();
    12ee:	0e 94 0d 09 	call	0x121a	; 0x121a <joystickDirY>
    12f2:	6c 01       	movw	r12, r24
			if (joystickX >= JOYSTICK_HIGH || joystickX <= JOYSTICK_LOW) {
    12f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    12f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    12f8:	8d 52       	subi	r24, 0x2D	; 45
    12fa:	91 40       	sbci	r25, 0x01	; 1
    12fc:	81 3c       	cpi	r24, 0xC1	; 193
    12fe:	91 40       	sbci	r25, 0x01	; 1
    1300:	28 f0       	brcs	.+10     	; 0x130c <play_game+0xcc>
				last_joystick_time = get_current_time();
    1302:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <get_current_time>
    1306:	4b 01       	movw	r8, r22
    1308:	5c 01       	movw	r10, r24
    130a:	17 c0       	rjmp	.+46     	; 0x133a <play_game+0xfa>
			} else if (joystickY >= JOYSTICK_HIGH || joystickY <= JOYSTICK_LOW) {
    130c:	c6 01       	movw	r24, r12
    130e:	8d 52       	subi	r24, 0x2D	; 45
    1310:	91 40       	sbci	r25, 0x01	; 1
    1312:	81 3c       	cpi	r24, 0xC1	; 193
    1314:	91 40       	sbci	r25, 0x01	; 1
    1316:	70 f0       	brcs	.+28     	; 0x1334 <play_game+0xf4>
				last_joystick_time = get_current_time();
    1318:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <get_current_time>
    131c:	4b 01       	movw	r8, r22
    131e:	5c 01       	movw	r10, r24
    1320:	0c c0       	rjmp	.+24     	; 0x133a <play_game+0xfa>
			} else {
				last_joystick_time = 0;
			}
		} else {
			joystickX = NO_JOYSTICK_ACTION;
			joystickY = NO_JOYSTICK_ACTION;
    1322:	c1 2c       	mov	r12, r1
    1324:	68 94       	set
    1326:	dd 24       	eor	r13, r13
    1328:	d1 f8       	bld	r13, 1
				last_joystick_time = get_current_time();
			} else {
				last_joystick_time = 0;
			}
		} else {
			joystickX = NO_JOYSTICK_ACTION;
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	92 e0       	ldi	r25, 0x02	; 2
    132e:	9c 87       	std	Y+12, r25	; 0x0c
    1330:	8b 87       	std	Y+11, r24	; 0x0b
    1332:	03 c0       	rjmp	.+6      	; 0x133a <play_game+0xfa>
			if (joystickX >= JOYSTICK_HIGH || joystickX <= JOYSTICK_LOW) {
				last_joystick_time = get_current_time();
			} else if (joystickY >= JOYSTICK_HIGH || joystickY <= JOYSTICK_LOW) {
				last_joystick_time = get_current_time();
			} else {
				last_joystick_time = 0;
    1334:	81 2c       	mov	r8, r1
    1336:	91 2c       	mov	r9, r1
    1338:	54 01       	movw	r10, r8
			joystickY = NO_JOYSTICK_ACTION;
		}
		
		// Get keyboard input
		char serial_input = -1;
		if (serial_input_available()) {
    133a:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <serial_input_available>
    133e:	88 23       	and	r24, r24
    1340:	41 f0       	breq	.+16     	; 0x1352 <play_game+0x112>
			serial_input = fgetc(stdin);
    1342:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <__iob>
    1346:	90 91 92 06 	lds	r25, 0x0692	; 0x800692 <__iob+0x1>
    134a:	0e 94 17 12 	call	0x242e	; 0x242e <fgetc>
    134e:	18 2f       	mov	r17, r24
    1350:	01 c0       	rjmp	.+2      	; 0x1354 <play_game+0x114>
			joystickX = NO_JOYSTICK_ACTION;
			joystickY = NO_JOYSTICK_ACTION;
		}
		
		// Get keyboard input
		char serial_input = -1;
    1352:	1f ef       	ldi	r17, 0xFF	; 255
		if (serial_input_available()) {
			serial_input = fgetc(stdin);
		}
		if (btn == BUTTON0_PUSHED || serial_input == 'd' || serial_input == 'D' || joystickX >= JOYSTICK_HIGH) {
    1354:	00 23       	and	r16, r16
    1356:	49 f0       	breq	.+18     	; 0x136a <play_game+0x12a>
    1358:	14 36       	cpi	r17, 0x64	; 100
    135a:	39 f0       	breq	.+14     	; 0x136a <play_game+0x12a>
    135c:	14 34       	cpi	r17, 0x44	; 68
    135e:	29 f0       	breq	.+10     	; 0x136a <play_game+0x12a>
    1360:	2b 85       	ldd	r18, Y+11	; 0x0b
    1362:	3c 85       	ldd	r19, Y+12	; 0x0c
    1364:	2e 3e       	cpi	r18, 0xEE	; 238
    1366:	32 40       	sbci	r19, 0x02	; 2
    1368:	d0 f0       	brcs	.+52     	; 0x139e <play_game+0x15e>
			// If button 0 is pushed, move right, i.e increase x by 1 and leave
			// y the same
			valid_move_made = move_player(1, 0);
    136a:	60 e0       	ldi	r22, 0x00	; 0
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <move_player>
    1372:	f8 2e       	mov	r15, r24
			if (is_game_won()) {
    1374:	0e 94 4c 04 	call	0x898	; 0x898 <is_game_won>
    1378:	81 11       	cpse	r24, r1
    137a:	ba c1       	rjmp	.+884    	; 0x16f0 <play_game+0x4b0>
				break;
			}
			if (check_diamond() == 1) {
    137c:	0e 94 b9 03 	call	0x772	; 0x772 <check_diamond>
    1380:	81 30       	cpi	r24, 0x01	; 1
    1382:	71 f4       	brne	.+28     	; 0x13a0 <play_game+0x160>
				diamondCount ++;
    1384:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <diamondCount>
    1388:	90 91 46 03 	lds	r25, 0x0346	; 0x800346 <diamondCount+0x1>
    138c:	01 96       	adiw	r24, 0x01	; 1
    138e:	90 93 46 03 	sts	0x0346, r25	; 0x800346 <diamondCount+0x1>
    1392:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <diamondCount>
				updateInfo(cheatMode);
    1396:	89 81       	ldd	r24, Y+1	; 0x01
    1398:	0e 94 97 08 	call	0x112e	; 0x112e <updateInfo>
    139c:	01 c0       	rjmp	.+2      	; 0x13a0 <play_game+0x160>
	// We play the game until it's over
	while(!is_game_over()) {
		// We need to check if any button has been pushed, this will be
		// NO_BUTTON_PUSHED if no button has been pushed
		btn = button_pushed();
		valid_move_made = 0;
    139e:	f1 2c       	mov	r15, r1
			}
			if (check_diamond() == 1) {
				diamondCount ++;
				updateInfo(cheatMode);
			}
		} if ((btn == BUTTON1_PUSHED || serial_input == 's' || serial_input == 'S' || joystickY >= JOYSTICK_HIGH) && valid_move_made == 0) {
    13a0:	01 30       	cpi	r16, 0x01	; 1
    13a2:	49 f0       	breq	.+18     	; 0x13b6 <play_game+0x176>
    13a4:	13 37       	cpi	r17, 0x73	; 115
    13a6:	39 f0       	breq	.+14     	; 0x13b6 <play_game+0x176>
    13a8:	13 35       	cpi	r17, 0x53	; 83
    13aa:	29 f0       	breq	.+10     	; 0x13b6 <play_game+0x176>
    13ac:	5e ee       	ldi	r21, 0xEE	; 238
    13ae:	c5 16       	cp	r12, r21
    13b0:	52 e0       	ldi	r21, 0x02	; 2
    13b2:	d5 06       	cpc	r13, r21
    13b4:	d8 f0       	brcs	.+54     	; 0x13ec <play_game+0x1ac>
    13b6:	f1 10       	cpse	r15, r1
    13b8:	19 c0       	rjmp	.+50     	; 0x13ec <play_game+0x1ac>
			// move down
			valid_move_made = move_player(0, -1);
    13ba:	6f ef       	ldi	r22, 0xFF	; 255
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <move_player>
    13c2:	f8 2e       	mov	r15, r24
			if (is_game_won()) {
    13c4:	0e 94 4c 04 	call	0x898	; 0x898 <is_game_won>
    13c8:	81 11       	cpse	r24, r1
    13ca:	92 c1       	rjmp	.+804    	; 0x16f0 <play_game+0x4b0>
				break; // CHANGE THIS TO A BREAK
			}
			if (check_diamond() == 1) {
    13cc:	0e 94 b9 03 	call	0x772	; 0x772 <check_diamond>
    13d0:	81 30       	cpi	r24, 0x01	; 1
    13d2:	61 f4       	brne	.+24     	; 0x13ec <play_game+0x1ac>
				diamondCount ++;
    13d4:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <diamondCount>
    13d8:	90 91 46 03 	lds	r25, 0x0346	; 0x800346 <diamondCount+0x1>
    13dc:	01 96       	adiw	r24, 0x01	; 1
    13de:	90 93 46 03 	sts	0x0346, r25	; 0x800346 <diamondCount+0x1>
    13e2:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <diamondCount>
				updateInfo(cheatMode);
    13e6:	89 81       	ldd	r24, Y+1	; 0x01
    13e8:	0e 94 97 08 	call	0x112e	; 0x112e <updateInfo>
			}
		} if ((btn == BUTTON2_PUSHED || serial_input == 'w' || serial_input == 'W' || joystickY <= JOYSTICK_LOW) && valid_move_made == 0){
    13ec:	02 30       	cpi	r16, 0x02	; 2
    13ee:	49 f0       	breq	.+18     	; 0x1402 <play_game+0x1c2>
    13f0:	17 37       	cpi	r17, 0x77	; 119
    13f2:	39 f0       	breq	.+14     	; 0x1402 <play_game+0x1c2>
    13f4:	17 35       	cpi	r17, 0x57	; 87
    13f6:	29 f0       	breq	.+10     	; 0x1402 <play_game+0x1c2>
    13f8:	8d e2       	ldi	r24, 0x2D	; 45
    13fa:	c8 16       	cp	r12, r24
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	d8 06       	cpc	r13, r24
    1400:	d8 f4       	brcc	.+54     	; 0x1438 <play_game+0x1f8>
    1402:	f1 10       	cpse	r15, r1
    1404:	19 c0       	rjmp	.+50     	; 0x1438 <play_game+0x1f8>
			// move up
			valid_move_made = move_player(0, 1);
    1406:	61 e0       	ldi	r22, 0x01	; 1
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <move_player>
    140e:	f8 2e       	mov	r15, r24
			if (is_game_won()) {
    1410:	0e 94 4c 04 	call	0x898	; 0x898 <is_game_won>
    1414:	81 11       	cpse	r24, r1
    1416:	6c c1       	rjmp	.+728    	; 0x16f0 <play_game+0x4b0>
				break;
			}
			if (check_diamond() == 1) {
    1418:	0e 94 b9 03 	call	0x772	; 0x772 <check_diamond>
    141c:	81 30       	cpi	r24, 0x01	; 1
    141e:	61 f4       	brne	.+24     	; 0x1438 <play_game+0x1f8>
				diamondCount ++;
    1420:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <diamondCount>
    1424:	90 91 46 03 	lds	r25, 0x0346	; 0x800346 <diamondCount+0x1>
    1428:	01 96       	adiw	r24, 0x01	; 1
    142a:	90 93 46 03 	sts	0x0346, r25	; 0x800346 <diamondCount+0x1>
    142e:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <diamondCount>
				updateInfo(cheatMode);
    1432:	89 81       	ldd	r24, Y+1	; 0x01
    1434:	0e 94 97 08 	call	0x112e	; 0x112e <updateInfo>
			}
		} if ((btn == BUTTON3_PUSHED || serial_input == 'a' || serial_input == 'A' || joystickX <= JOYSTICK_LOW) && valid_move_made == 0) {
    1438:	03 30       	cpi	r16, 0x03	; 3
    143a:	49 f0       	breq	.+18     	; 0x144e <play_game+0x20e>
    143c:	11 36       	cpi	r17, 0x61	; 97
    143e:	39 f0       	breq	.+14     	; 0x144e <play_game+0x20e>
    1440:	11 34       	cpi	r17, 0x41	; 65
    1442:	29 f0       	breq	.+10     	; 0x144e <play_game+0x20e>
    1444:	2b 85       	ldd	r18, Y+11	; 0x0b
    1446:	3c 85       	ldd	r19, Y+12	; 0x0c
    1448:	2d 32       	cpi	r18, 0x2D	; 45
    144a:	31 40       	sbci	r19, 0x01	; 1
    144c:	e0 f4       	brcc	.+56     	; 0x1486 <play_game+0x246>
    144e:	f1 10       	cpse	r15, r1
    1450:	1a c0       	rjmp	.+52     	; 0x1486 <play_game+0x246>
			// move left
			valid_move_made = move_player(-1, 0);
    1452:	60 e0       	ldi	r22, 0x00	; 0
    1454:	8f ef       	ldi	r24, 0xFF	; 255
    1456:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <move_player>
			if (is_game_won()) {
    145a:	0e 94 4c 04 	call	0x898	; 0x898 <is_game_won>
    145e:	81 11       	cpse	r24, r1
    1460:	47 c1       	rjmp	.+654    	; 0x16f0 <play_game+0x4b0>
				break;
			}
			if (check_diamond() == 1) {
    1462:	0e 94 b9 03 	call	0x772	; 0x772 <check_diamond>
    1466:	81 30       	cpi	r24, 0x01	; 1
    1468:	09 f0       	breq	.+2      	; 0x146c <play_game+0x22c>
    146a:	9f c0       	rjmp	.+318    	; 0x15aa <play_game+0x36a>
				diamondCount ++;
    146c:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <diamondCount>
    1470:	90 91 46 03 	lds	r25, 0x0346	; 0x800346 <diamondCount+0x1>
    1474:	01 96       	adiw	r24, 0x01	; 1
    1476:	90 93 46 03 	sts	0x0346, r25	; 0x800346 <diamondCount+0x1>
    147a:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <diamondCount>
				updateInfo(cheatMode);
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	0e 94 97 08 	call	0x112e	; 0x112e <updateInfo>
    1484:	92 c0       	rjmp	.+292    	; 0x15aa <play_game+0x36a>
			}
		} else if (serial_input == 'e' || serial_input == 'E') {
    1486:	15 36       	cpi	r17, 0x65	; 101
    1488:	11 f0       	breq	.+4      	; 0x148e <play_game+0x24e>
    148a:	15 34       	cpi	r17, 0x45	; 69
    148c:	21 f4       	brne	.+8      	; 0x1496 <play_game+0x256>
			// Inspect wall
			inspect_wall(cheatMode);
    148e:	89 81       	ldd	r24, Y+1	; 0x01
    1490:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <inspect_wall>
    1494:	8a c0       	rjmp	.+276    	; 0x15aa <play_game+0x36a>
		} else if (serial_input == 'c' || serial_input == 'C') {
    1496:	13 36       	cpi	r17, 0x63	; 99
    1498:	11 f0       	breq	.+4      	; 0x149e <play_game+0x25e>
    149a:	13 34       	cpi	r17, 0x43	; 67
    149c:	41 f4       	brne	.+16     	; 0x14ae <play_game+0x26e>
			cheatMode = !cheatMode;
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	59 81       	ldd	r21, Y+1	; 0x01
    14a2:	51 11       	cpse	r21, r1
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	89 83       	std	Y+1, r24	; 0x01
			updateInfo(cheatMode);
    14a8:	0e 94 97 08 	call	0x112e	; 0x112e <updateInfo>
    14ac:	7e c0       	rjmp	.+252    	; 0x15aa <play_game+0x36a>
		} else if (serial_input == ' ') {
    14ae:	10 32       	cpi	r17, 0x20	; 32
    14b0:	81 f4       	brne	.+32     	; 0x14d2 <play_game+0x292>
			if (place_bomb() == 1) {
    14b2:	0e 94 1e 04 	call	0x83c	; 0x83c <place_bomb>
    14b6:	81 30       	cpi	r24, 0x01	; 1
    14b8:	09 f0       	breq	.+2      	; 0x14bc <play_game+0x27c>
    14ba:	77 c0       	rjmp	.+238    	; 0x15aa <play_game+0x36a>
				bomb_time = get_current_time() + 2000; // set bomb time to 2 secs from now
    14bc:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <get_current_time>
    14c0:	2b 01       	movw	r4, r22
    14c2:	3c 01       	movw	r6, r24
    14c4:	e0 ed       	ldi	r30, 0xD0	; 208
    14c6:	4e 0e       	add	r4, r30
    14c8:	e7 e0       	ldi	r30, 0x07	; 7
    14ca:	5e 1e       	adc	r5, r30
    14cc:	61 1c       	adc	r6, r1
    14ce:	71 1c       	adc	r7, r1
    14d0:	6c c0       	rjmp	.+216    	; 0x15aa <play_game+0x36a>
			}
		} else if (serial_input == 'p' || serial_input == 'P') {
    14d2:	10 37       	cpi	r17, 0x70	; 112
    14d4:	19 f0       	breq	.+6      	; 0x14dc <play_game+0x29c>
    14d6:	10 35       	cpi	r17, 0x50	; 80
    14d8:	09 f0       	breq	.+2      	; 0x14dc <play_game+0x29c>
    14da:	5a c0       	rjmp	.+180    	; 0x1590 <play_game+0x350>
			uint8_t paused_bomb_time = bomb_time - get_current_time();
    14dc:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <get_current_time>
    14e0:	24 2d       	mov	r18, r4
    14e2:	26 1b       	sub	r18, r22
    14e4:	2b 87       	std	Y+11, r18	; 0x0b
			uint8_t paused_last_diamond_flash_time = get_current_time() - last_diamond_flash_time;
    14e6:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <get_current_time>
    14ea:	3f 81       	ldd	r19, Y+7	; 0x07
    14ec:	63 1b       	sub	r22, r19
    14ee:	6f 83       	std	Y+7, r22	; 0x07
			if (is_muted() != 1) {
    14f0:	0e 94 00 10 	call	0x2000	; 0x2000 <is_muted>
    14f4:	81 30       	cpi	r24, 0x01	; 1
    14f6:	79 f0       	breq	.+30     	; 0x1516 <play_game+0x2d6>
				toggle_sound();
    14f8:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <toggle_sound>
    14fc:	0c c0       	rjmp	.+24     	; 0x1516 <play_game+0x2d6>
			}
			while (serial_input == 'p' || serial_input == 'P') {
				serial_input = -1;
				if (serial_input_available()) {
    14fe:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <serial_input_available>
			uint8_t paused_last_diamond_flash_time = get_current_time() - last_diamond_flash_time;
			if (is_muted() != 1) {
				toggle_sound();
			}
			while (serial_input == 'p' || serial_input == 'P') {
				serial_input = -1;
    1502:	1f ef       	ldi	r17, 0xFF	; 255
				if (serial_input_available()) {
    1504:	88 23       	and	r24, r24
    1506:	39 f0       	breq	.+14     	; 0x1516 <play_game+0x2d6>
					serial_input = fgetc(stdin);
    1508:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <__iob>
    150c:	90 91 92 06 	lds	r25, 0x0692	; 0x800692 <__iob+0x1>
    1510:	0e 94 17 12 	call	0x242e	; 0x242e <fgetc>
    1514:	18 2f       	mov	r17, r24
			uint8_t paused_bomb_time = bomb_time - get_current_time();
			uint8_t paused_last_diamond_flash_time = get_current_time() - last_diamond_flash_time;
			if (is_muted() != 1) {
				toggle_sound();
			}
			while (serial_input == 'p' || serial_input == 'P') {
    1516:	10 37       	cpi	r17, 0x70	; 112
    1518:	91 f3       	breq	.-28     	; 0x14fe <play_game+0x2be>
    151a:	10 35       	cpi	r17, 0x50	; 80
    151c:	81 f3       	breq	.-32     	; 0x14fe <play_game+0x2be>
    151e:	0c c0       	rjmp	.+24     	; 0x1538 <play_game+0x2f8>
					serial_input = fgetc(stdin);
				}
			}
			while (serial_input != 'p' && serial_input != 'P') {
				serial_input = -1;
				if (serial_input_available()) {
    1520:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <serial_input_available>
				if (serial_input_available()) {
					serial_input = fgetc(stdin);
				}
			}
			while (serial_input != 'p' && serial_input != 'P') {
				serial_input = -1;
    1524:	1f ef       	ldi	r17, 0xFF	; 255
				if (serial_input_available()) {
    1526:	88 23       	and	r24, r24
    1528:	39 f0       	breq	.+14     	; 0x1538 <play_game+0x2f8>
					serial_input = fgetc(stdin);
    152a:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <__iob>
    152e:	90 91 92 06 	lds	r25, 0x0692	; 0x800692 <__iob+0x1>
    1532:	0e 94 17 12 	call	0x242e	; 0x242e <fgetc>
    1536:	18 2f       	mov	r17, r24
				serial_input = -1;
				if (serial_input_available()) {
					serial_input = fgetc(stdin);
				}
			}
			while (serial_input != 'p' && serial_input != 'P') {
    1538:	10 37       	cpi	r17, 0x70	; 112
    153a:	79 f0       	breq	.+30     	; 0x155a <play_game+0x31a>
    153c:	10 35       	cpi	r17, 0x50	; 80
    153e:	81 f7       	brne	.-32     	; 0x1520 <play_game+0x2e0>
    1540:	0c c0       	rjmp	.+24     	; 0x155a <play_game+0x31a>
				}
			}

			while (serial_input == 'p' || serial_input == 'P') {
				serial_input = -1;
				if (serial_input_available()) {
    1542:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <serial_input_available>
					serial_input = fgetc(stdin);
				}
			}

			while (serial_input == 'p' || serial_input == 'P') {
				serial_input = -1;
    1546:	1f ef       	ldi	r17, 0xFF	; 255
				if (serial_input_available()) {
    1548:	88 23       	and	r24, r24
    154a:	39 f0       	breq	.+14     	; 0x155a <play_game+0x31a>
					serial_input = fgetc(stdin);
    154c:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <__iob>
    1550:	90 91 92 06 	lds	r25, 0x0692	; 0x800692 <__iob+0x1>
    1554:	0e 94 17 12 	call	0x242e	; 0x242e <fgetc>
    1558:	18 2f       	mov	r17, r24
				if (serial_input_available()) {
					serial_input = fgetc(stdin);
				}
			}

			while (serial_input == 'p' || serial_input == 'P') {
    155a:	10 37       	cpi	r17, 0x70	; 112
    155c:	91 f3       	breq	.-28     	; 0x1542 <play_game+0x302>
    155e:	10 35       	cpi	r17, 0x50	; 80
    1560:	81 f3       	breq	.-32     	; 0x1542 <play_game+0x302>
				serial_input = -1;
				if (serial_input_available()) {
					serial_input = fgetc(stdin);
				}
			}
			bomb_time = get_current_time() + paused_bomb_time;
    1562:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <get_current_time>
    1566:	2b 01       	movw	r4, r22
    1568:	3c 01       	movw	r6, r24
    156a:	4b 85       	ldd	r20, Y+11	; 0x0b
    156c:	44 0e       	add	r4, r20
    156e:	51 1c       	adc	r5, r1
    1570:	61 1c       	adc	r6, r1
    1572:	71 1c       	adc	r7, r1
			last_diamond_flash_time = get_current_time() - paused_last_diamond_flash_time;
    1574:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <get_current_time>
    1578:	9b 01       	movw	r18, r22
    157a:	ac 01       	movw	r20, r24
    157c:	ef 81       	ldd	r30, Y+7	; 0x07
    157e:	2e 1b       	sub	r18, r30
    1580:	31 09       	sbc	r19, r1
    1582:	41 09       	sbc	r20, r1
    1584:	51 09       	sbc	r21, r1
    1586:	2f 83       	std	Y+7, r18	; 0x07
    1588:	38 87       	std	Y+8, r19	; 0x08
    158a:	49 87       	std	Y+9, r20	; 0x09
    158c:	5a 87       	std	Y+10, r21	; 0x0a
			updateInfo(cheatMode);
		} else if (serial_input == ' ') {
			if (place_bomb() == 1) {
				bomb_time = get_current_time() + 2000; // set bomb time to 2 secs from now
			}
		} else if (serial_input == 'p' || serial_input == 'P') {
    158e:	0d c0       	rjmp	.+26     	; 0x15aa <play_game+0x36a>
					serial_input = fgetc(stdin);
				}
			}
			bomb_time = get_current_time() + paused_bomb_time;
			last_diamond_flash_time = get_current_time() - paused_last_diamond_flash_time;
		} else if (serial_input == 'f' || serial_input == 'F') {
    1590:	16 36       	cpi	r17, 0x66	; 102
    1592:	11 f0       	breq	.+4      	; 0x1598 <play_game+0x358>
    1594:	16 34       	cpi	r17, 0x46	; 70
    1596:	19 f4       	brne	.+6      	; 0x159e <play_game+0x35e>
			toggle_field_of_vision();
    1598:	0e 94 5a 05 	call	0xab4	; 0xab4 <toggle_field_of_vision>
    159c:	06 c0       	rjmp	.+12     	; 0x15aa <play_game+0x36a>
		} else if (serial_input == 'm' || serial_input == 'M') {
    159e:	1d 36       	cpi	r17, 0x6D	; 109
    15a0:	11 f0       	breq	.+4      	; 0x15a6 <play_game+0x366>
    15a2:	1d 34       	cpi	r17, 0x4D	; 77
    15a4:	11 f4       	brne	.+4      	; 0x15aa <play_game+0x36a>
			toggle_sound();
    15a6:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <toggle_sound>
		}

	

		current_time = get_current_time();
    15aa:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <get_current_time>
    15ae:	6b 01       	movw	r12, r22
    15b0:	7c 01       	movw	r14, r24
		if(current_time >= last_flash_time + 500) {
    15b2:	8a 81       	ldd	r24, Y+2	; 0x02
    15b4:	9b 81       	ldd	r25, Y+3	; 0x03
    15b6:	ac 81       	ldd	r26, Y+4	; 0x04
    15b8:	bd 81       	ldd	r27, Y+5	; 0x05
    15ba:	8c 50       	subi	r24, 0x0C	; 12
    15bc:	9e 4f       	sbci	r25, 0xFE	; 254
    15be:	af 4f       	sbci	r26, 0xFF	; 255
    15c0:	bf 4f       	sbci	r27, 0xFF	; 255
    15c2:	c8 16       	cp	r12, r24
    15c4:	d9 06       	cpc	r13, r25
    15c6:	ea 06       	cpc	r14, r26
    15c8:	fb 06       	cpc	r15, r27
    15ca:	30 f0       	brcs	.+12     	; 0x15d8 <play_game+0x398>
			// 500ms (0.5 second) has passed since the last time we
			// flashed the cursor, so flash the cursor
			flash_facing();
    15cc:	0e 94 83 02 	call	0x506	; 0x506 <flash_facing>
			
			// Update the most recent time the cursor was flashed
			last_flash_time = current_time;
    15d0:	ca 82       	std	Y+2, r12	; 0x02
    15d2:	db 82       	std	Y+3, r13	; 0x03
    15d4:	ec 82       	std	Y+4, r14	; 0x04
    15d6:	fd 82       	std	Y+5, r15	; 0x05
		}
		
		// Flash for diamond distance when cheat mode is on
		if(diamondDistance != -1 && cheatMode == 1) {
    15d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    15dc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    15e0:	01 96       	adiw	r24, 0x01	; 1
    15e2:	01 f1       	breq	.+64     	; 0x1624 <play_game+0x3e4>
    15e4:	39 81       	ldd	r19, Y+1	; 0x01
    15e6:	31 30       	cpi	r19, 0x01	; 1
    15e8:	e9 f4       	brne	.+58     	; 0x1624 <play_game+0x3e4>
			// Flash speed at 250 * the diamond distance (note it is 125 here as we toggle pin on and off so full period is 250)
			if (current_time >= last_diamond_flash_time + 125 * diamond_distance()) {
    15ea:	0e 94 db 03 	call	0x7b6	; 0x7b6 <diamond_distance>
    15ee:	2d e7       	ldi	r18, 0x7D	; 125
    15f0:	ac 01       	movw	r20, r24
    15f2:	24 9f       	mul	r18, r20
    15f4:	c0 01       	movw	r24, r0
    15f6:	25 9f       	mul	r18, r21
    15f8:	90 0d       	add	r25, r0
    15fa:	11 24       	eor	r1, r1
    15fc:	2f 81       	ldd	r18, Y+7	; 0x07
    15fe:	38 85       	ldd	r19, Y+8	; 0x08
    1600:	49 85       	ldd	r20, Y+9	; 0x09
    1602:	5a 85       	ldd	r21, Y+10	; 0x0a
    1604:	28 0f       	add	r18, r24
    1606:	39 1f       	adc	r19, r25
    1608:	41 1d       	adc	r20, r1
    160a:	51 1d       	adc	r21, r1
    160c:	c2 16       	cp	r12, r18
    160e:	d3 06       	cpc	r13, r19
    1610:	e4 06       	cpc	r14, r20
    1612:	f5 06       	cpc	r15, r21
    1614:	38 f0       	brcs	.+14     	; 0x1624 <play_game+0x3e4>
				PORTA ^= (1 << PORTA7); // toggle A7 pin
    1616:	82 b1       	in	r24, 0x02	; 2
    1618:	80 58       	subi	r24, 0x80	; 128
    161a:	82 b9       	out	0x02, r24	; 2
				
				// Update the most recent time the cursor was flashed
				last_diamond_flash_time = current_time;
    161c:	cf 82       	std	Y+7, r12	; 0x07
    161e:	d8 86       	std	Y+8, r13	; 0x08
    1620:	e9 86       	std	Y+9, r14	; 0x09
    1622:	fa 86       	std	Y+10, r15	; 0x0a
			}
			
		}
		
		// Check if there is a bomb active
		if(bomb_active()) {
    1624:	0e 94 b2 05 	call	0xb64	; 0xb64 <bomb_active>
    1628:	88 23       	and	r24, r24
    162a:	09 f4       	brne	.+2      	; 0x162e <play_game+0x3ee>
    162c:	56 c0       	rjmp	.+172    	; 0x16da <play_game+0x49a>
			if (in_danger()) {
    162e:	0e 94 90 05 	call	0xb20	; 0xb20 <in_danger>
    1632:	88 23       	and	r24, r24
    1634:	21 f0       	breq	.+8      	; 0x163e <play_game+0x3fe>
				PORTA |= (1 << PORTA5); // turn on A5 pin
    1636:	82 b1       	in	r24, 0x02	; 2
    1638:	80 62       	ori	r24, 0x20	; 32
    163a:	82 b9       	out	0x02, r24	; 2
    163c:	03 c0       	rjmp	.+6      	; 0x1644 <play_game+0x404>
				} else {
				PORTA &= ~(1 << PORTA5); // turn off A5 pin
    163e:	82 b1       	in	r24, 0x02	; 2
    1640:	8f 7d       	andi	r24, 0xDF	; 223
    1642:	82 b9       	out	0x02, r24	; 2
			}
			if (current_time >= bomb_time) {
    1644:	c4 14       	cp	r12, r4
    1646:	d5 04       	cpc	r13, r5
    1648:	e6 04       	cpc	r14, r6
    164a:	f7 04       	cpc	r15, r7
    164c:	20 f0       	brcs	.+8      	; 0x1656 <play_game+0x416>
				blow_bomb();
    164e:	0e 94 0c 06 	call	0xc18	; 0xc18 <blow_bomb>
				play_blow_bomb();
    1652:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <play_blow_bomb>
			}
			if (current_time >= bomb_time + 50) {
    1656:	d3 01       	movw	r26, r6
    1658:	c2 01       	movw	r24, r4
    165a:	c2 96       	adiw	r24, 0x32	; 50
    165c:	a1 1d       	adc	r26, r1
    165e:	b1 1d       	adc	r27, r1
    1660:	c8 16       	cp	r12, r24
    1662:	d9 06       	cpc	r13, r25
    1664:	ea 06       	cpc	r14, r26
    1666:	fb 06       	cpc	r15, r27
    1668:	10 f0       	brcs	.+4      	; 0x166e <play_game+0x42e>
				bomb_animation_middle();
    166a:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <bomb_animation_middle>
			}
			if (current_time >= bomb_time + 100) {
    166e:	d3 01       	movw	r26, r6
    1670:	c2 01       	movw	r24, r4
    1672:	8c 59       	subi	r24, 0x9C	; 156
    1674:	9f 4f       	sbci	r25, 0xFF	; 255
    1676:	af 4f       	sbci	r26, 0xFF	; 255
    1678:	bf 4f       	sbci	r27, 0xFF	; 255
    167a:	c8 16       	cp	r12, r24
    167c:	d9 06       	cpc	r13, r25
    167e:	ea 06       	cpc	r14, r26
    1680:	fb 06       	cpc	r15, r27
    1682:	60 f0       	brcs	.+24     	; 0x169c <play_game+0x45c>
				bomb_animation_end();
    1684:	0e 94 2a 07 	call	0xe54	; 0xe54 <bomb_animation_end>
				// reset bomb flash speed
				bomb_flash_interval = 600;
    1688:	0f 2e       	mov	r0, r31
    168a:	f8 e5       	ldi	r31, 0x58	; 88
    168c:	2f 2e       	mov	r2, r31
    168e:	f2 e0       	ldi	r31, 0x02	; 2
    1690:	3f 2e       	mov	r3, r31
    1692:	f0 2d       	mov	r31, r0
				bomb_time = NO_BOMB;
    1694:	44 24       	eor	r4, r4
    1696:	4a 94       	dec	r4
    1698:	54 2c       	mov	r5, r4
    169a:	32 01       	movw	r6, r4
			}
			if (current_time >= bomb_time - bomb_flash_interval) {
    169c:	d3 01       	movw	r26, r6
    169e:	c2 01       	movw	r24, r4
    16a0:	82 19       	sub	r24, r2
    16a2:	93 09       	sbc	r25, r3
    16a4:	a1 09       	sbc	r26, r1
    16a6:	b1 09       	sbc	r27, r1
    16a8:	c8 16       	cp	r12, r24
    16aa:	d9 06       	cpc	r13, r25
    16ac:	ea 06       	cpc	r14, r26
    16ae:	fb 06       	cpc	r15, r27
    16b0:	a0 f0       	brcs	.+40     	; 0x16da <play_game+0x49a>
				if (bomb_flash_interval > 75) {
    16b2:	3c e4       	ldi	r19, 0x4C	; 76
    16b4:	23 16       	cp	r2, r19
    16b6:	31 04       	cpc	r3, r1
    16b8:	70 f0       	brcs	.+28     	; 0x16d6 <play_game+0x496>
					bomb_flash_interval /= 1.5;
    16ba:	b1 01       	movw	r22, r2
    16bc:	80 e0       	ldi	r24, 0x00	; 0
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__floatunsisf>
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	40 ec       	ldi	r20, 0xC0	; 192
    16ca:	5f e3       	ldi	r21, 0x3F	; 63
    16cc:	0e 94 34 10 	call	0x2068	; 0x2068 <__divsf3>
    16d0:	0e 94 a6 10 	call	0x214c	; 0x214c <__fixunssfsi>
    16d4:	1b 01       	movw	r2, r22
				}
				flash_bomb();
    16d6:	0e 94 8a 07 	call	0xf14	; 0xf14 <flash_bomb>
			}
		}
		if (firstLoop) {
    16da:	4e 81       	ldd	r20, Y+6	; 0x06
    16dc:	44 23       	and	r20, r20
    16de:	19 f0       	breq	.+6      	; 0x16e6 <play_game+0x4a6>
			play_start_game();
    16e0:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <play_start_game>
			firstLoop = 0;
    16e4:	1e 82       	std	Y+6, r1	; 0x06
	last_joystick_time = 0;
	bomb_time = NO_BOMB;
	bomb_flash_interval = 600;
	updateInfo(cheatMode);
	// We play the game until it's over
	while(!is_game_over()) {
    16e6:	0e 94 ad 02 	call	0x55a	; 0x55a <is_game_over>
    16ea:	88 23       	and	r24, r24
    16ec:	09 f4       	brne	.+2      	; 0x16f0 <play_game+0x4b0>
    16ee:	e6 cd       	rjmp	.-1076   	; 0x12bc <play_game+0x7c>
			firstLoop = 0;
		}

	}
	// We get here if the game is over.
}
    16f0:	2c 96       	adiw	r28, 0x0c	; 12
    16f2:	0f b6       	in	r0, 0x3f	; 63
    16f4:	f8 94       	cli
    16f6:	de bf       	out	0x3e, r29	; 62
    16f8:	0f be       	out	0x3f, r0	; 63
    16fa:	cd bf       	out	0x3d, r28	; 61
    16fc:	df 91       	pop	r29
    16fe:	cf 91       	pop	r28
    1700:	1f 91       	pop	r17
    1702:	0f 91       	pop	r16
    1704:	ff 90       	pop	r15
    1706:	ef 90       	pop	r14
    1708:	df 90       	pop	r13
    170a:	cf 90       	pop	r12
    170c:	bf 90       	pop	r11
    170e:	af 90       	pop	r10
    1710:	9f 90       	pop	r9
    1712:	8f 90       	pop	r8
    1714:	7f 90       	pop	r7
    1716:	6f 90       	pop	r6
    1718:	5f 90       	pop	r5
    171a:	4f 90       	pop	r4
    171c:	3f 90       	pop	r3
    171e:	2f 90       	pop	r2
    1720:	08 95       	ret

00001722 <nextLevel>:

/*
 * Goes to next level
 */
void nextLevel() {
	level ^= 1;
    1722:	90 91 44 03 	lds	r25, 0x0344	; 0x800344 <level>
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	89 27       	eor	r24, r25
    172a:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <level>
	new_game();
    172e:	0e 94 33 08 	call	0x1066	; 0x1066 <new_game>
    1732:	08 95       	ret

00001734 <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
    1734:	0e 94 e7 08 	call	0x11ce	; 0x11ce <initialise_hardware>
	
	// Show the splash screen message. Returns when display is complete
	start_screen();
    1738:	0e 94 fe 07 	call	0xffc	; 0xffc <start_screen>
	
	// Loop forever,
	while(1) {
		new_game();
    173c:	0e 94 33 08 	call	0x1066	; 0x1066 <new_game>
		play_game();
    1740:	0e 94 20 09 	call	0x1240	; 0x1240 <play_game>
		if (is_game_won()) {
    1744:	0e 94 4c 04 	call	0x898	; 0x898 <is_game_won>
    1748:	88 23       	and	r24, r24
    174a:	19 f0       	breq	.+6      	; 0x1752 <main+0x1e>
			nextLevel();
    174c:	0e 94 91 0b 	call	0x1722	; 0x1722 <nextLevel>
    1750:	f5 cf       	rjmp	.-22     	; 0x173c <main+0x8>
		} else {
			handle_game_over();
    1752:	0e 94 3e 08 	call	0x107c	; 0x107c <handle_game_over>
    1756:	f2 cf       	rjmp	.-28     	; 0x173c <main+0x8>

00001758 <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
    1758:	cf 93       	push	r28
    175a:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
    175c:	8a 30       	cpi	r24, 0x0A	; 10
    175e:	19 f4       	brne	.+6      	; 0x1766 <uart_put_char+0xe>
		uart_put_char('\r', stream);
    1760:	8d e0       	ldi	r24, 0x0D	; 13
    1762:	0e 94 ac 0b 	call	0x1758	; 0x1758 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    1766:	9f b7       	in	r25, 0x3f	; 63
    1768:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <uart_put_char+0x18>
		if(!interrupts_enabled) {
    176c:	99 23       	and	r25, r25
    176e:	29 f1       	breq	.+74     	; 0x17ba <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    1770:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <bytes_in_out_buffer>
    1774:	8f 3f       	cpi	r24, 0xFF	; 255
    1776:	d1 f3       	breq	.-12     	; 0x176c <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    1778:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    177a:	e0 91 58 05 	lds	r30, 0x0558	; 0x800558 <out_insert_pos>
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	8e 0f       	add	r24, r30
    1782:	80 93 58 05 	sts	0x0558, r24	; 0x800558 <out_insert_pos>
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	e6 5a       	subi	r30, 0xA6	; 166
    178a:	fa 4f       	sbci	r31, 0xFA	; 250
    178c:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    178e:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <bytes_in_out_buffer>
    1792:	8f 5f       	subi	r24, 0xFF	; 255
    1794:	80 93 59 05 	sts	0x0559, r24	; 0x800559 <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
    1798:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <out_insert_pos>
    179c:	8f 3f       	cpi	r24, 0xFF	; 255
    179e:	11 f4       	brne	.+4      	; 0x17a4 <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    17a0:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    17a4:	e1 ec       	ldi	r30, 0xC1	; 193
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	80 62       	ori	r24, 0x20	; 32
    17ac:	80 83       	st	Z, r24
	if(interrupts_enabled) {
    17ae:	99 23       	and	r25, r25
    17b0:	39 f0       	breq	.+14     	; 0x17c0 <uart_put_char+0x68>
		sei();
    17b2:	78 94       	sei
	}
	return 0;
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	05 c0       	rjmp	.+10     	; 0x17c4 <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
    17c0:	80 e0       	ldi	r24, 0x00	; 0
    17c2:	90 e0       	ldi	r25, 0x00	; 0
}
    17c4:	cf 91       	pop	r28
    17c6:	08 95       	ret

000017c8 <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
    17c8:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <bytes_in_input_buffer>
    17cc:	88 23       	and	r24, r24
    17ce:	e1 f3       	breq	.-8      	; 0x17c8 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    17d0:	2f b7       	in	r18, 0x3f	; 63
    17d2:	20 78       	andi	r18, 0x80	; 128
	cli();
    17d4:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
    17d6:	80 91 59 06 	lds	r24, 0x0659	; 0x800659 <input_insert_pos>
    17da:	30 91 6b 06 	lds	r19, 0x066B	; 0x80066b <bytes_in_input_buffer>
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	83 1b       	sub	r24, r19
    17e2:	91 09       	sbc	r25, r1
    17e4:	5a f4       	brpl	.+22     	; 0x17fc <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    17e6:	e0 91 59 06 	lds	r30, 0x0659	; 0x800659 <input_insert_pos>
    17ea:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <bytes_in_input_buffer>
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	e8 1b       	sub	r30, r24
    17f2:	f1 09       	sbc	r31, r1
    17f4:	e6 59       	subi	r30, 0x96	; 150
    17f6:	f9 4f       	sbci	r31, 0xF9	; 249
    17f8:	80 81       	ld	r24, Z
    17fa:	0a c0       	rjmp	.+20     	; 0x1810 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    17fc:	e0 91 59 06 	lds	r30, 0x0659	; 0x800659 <input_insert_pos>
    1800:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <bytes_in_input_buffer>
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	e8 1b       	sub	r30, r24
    1808:	f1 09       	sbc	r31, r1
    180a:	e6 5a       	subi	r30, 0xA6	; 166
    180c:	f9 4f       	sbci	r31, 0xF9	; 249
    180e:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    1810:	90 91 6b 06 	lds	r25, 0x066B	; 0x80066b <bytes_in_input_buffer>
    1814:	91 50       	subi	r25, 0x01	; 1
    1816:	90 93 6b 06 	sts	0x066B, r25	; 0x80066b <bytes_in_input_buffer>
	if(interrupts_enabled) {
    181a:	22 23       	and	r18, r18
    181c:	09 f0       	breq	.+2      	; 0x1820 <uart_get_char+0x58>
		sei();
    181e:	78 94       	sei
	}	
	return c;
}
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	08 95       	ret

00001824 <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    1824:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <out_insert_pos>
	bytes_in_out_buffer = 0;
    1828:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <bytes_in_out_buffer>
	input_insert_pos = 0;
    182c:	10 92 59 06 	sts	0x0659, r1	; 0x800659 <input_insert_pos>
	bytes_in_input_buffer = 0;
    1830:	10 92 6b 06 	sts	0x066B, r1	; 0x80066b <bytes_in_input_buffer>
	input_overrun = 0;
    1834:	10 92 6a 06 	sts	0x066A, r1	; 0x80066a <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    1838:	40 93 47 03 	sts	0x0347, r20	; 0x800347 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
    183c:	dc 01       	movw	r26, r24
    183e:	cb 01       	movw	r24, r22
    1840:	88 0f       	add	r24, r24
    1842:	99 1f       	adc	r25, r25
    1844:	aa 1f       	adc	r26, r26
    1846:	bb 1f       	adc	r27, r27
    1848:	88 0f       	add	r24, r24
    184a:	99 1f       	adc	r25, r25
    184c:	aa 1f       	adc	r26, r26
    184e:	bb 1f       	adc	r27, r27
    1850:	9c 01       	movw	r18, r24
    1852:	ad 01       	movw	r20, r26
    1854:	22 0f       	add	r18, r18
    1856:	33 1f       	adc	r19, r19
    1858:	44 1f       	adc	r20, r20
    185a:	55 1f       	adc	r21, r21
    185c:	60 e0       	ldi	r22, 0x00	; 0
    185e:	72 e1       	ldi	r23, 0x12	; 18
    1860:	8a e7       	ldi	r24, 0x7A	; 122
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <__divmodsi4>
    1868:	ba 01       	movw	r22, r20
    186a:	a9 01       	movw	r20, r18
    186c:	4f 5f       	subi	r20, 0xFF	; 255
    186e:	5f 4f       	sbci	r21, 0xFF	; 255
    1870:	6f 4f       	sbci	r22, 0xFF	; 255
    1872:	7f 4f       	sbci	r23, 0xFF	; 255
    1874:	db 01       	movw	r26, r22
    1876:	ca 01       	movw	r24, r20
    1878:	1a f4       	brpl	.+6      	; 0x1880 <init_serial_stdio+0x5c>
    187a:	01 96       	adiw	r24, 0x01	; 1
    187c:	a1 1d       	adc	r26, r1
    187e:	b1 1d       	adc	r27, r1
    1880:	b5 95       	asr	r27
    1882:	a7 95       	ror	r26
    1884:	97 95       	ror	r25
    1886:	87 95       	ror	r24
    1888:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    188a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    188e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1892:	e1 ec       	ldi	r30, 0xC1	; 193
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	88 e1       	ldi	r24, 0x18	; 24
    1898:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
    189a:	80 81       	ld	r24, Z
    189c:	80 68       	ori	r24, 0x80	; 128
    189e:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    18a0:	e1 e9       	ldi	r30, 0x91	; 145
    18a2:	f6 e0       	ldi	r31, 0x06	; 6
    18a4:	82 e0       	ldi	r24, 0x02	; 2
    18a6:	91 e0       	ldi	r25, 0x01	; 1
    18a8:	93 83       	std	Z+3, r25	; 0x03
    18aa:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    18ac:	91 83       	std	Z+1, r25	; 0x01
    18ae:	80 83       	st	Z, r24
    18b0:	08 95       	ret

000018b2 <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
    18b2:	90 91 6b 06 	lds	r25, 0x066B	; 0x80066b <bytes_in_input_buffer>
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	91 11       	cpse	r25, r1
    18ba:	01 c0       	rjmp	.+2      	; 0x18be <serial_input_available+0xc>
    18bc:	80 e0       	ldi	r24, 0x00	; 0
}
    18be:	08 95       	ret

000018c0 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    18c0:	10 92 59 06 	sts	0x0659, r1	; 0x800659 <input_insert_pos>
	bytes_in_input_buffer = 0;
    18c4:	10 92 6b 06 	sts	0x066B, r1	; 0x80066b <bytes_in_input_buffer>
    18c8:	08 95       	ret

000018ca <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
    18ca:	1f 92       	push	r1
    18cc:	0f 92       	push	r0
    18ce:	0f b6       	in	r0, 0x3f	; 63
    18d0:	0f 92       	push	r0
    18d2:	11 24       	eor	r1, r1
    18d4:	2f 93       	push	r18
    18d6:	8f 93       	push	r24
    18d8:	9f 93       	push	r25
    18da:	ef 93       	push	r30
    18dc:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
    18de:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <bytes_in_out_buffer>
    18e2:	88 23       	and	r24, r24
    18e4:	29 f1       	breq	.+74     	; 0x1930 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
    18e6:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <out_insert_pos>
    18ea:	20 91 59 05 	lds	r18, 0x0559	; 0x800559 <bytes_in_out_buffer>
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	82 1b       	sub	r24, r18
    18f2:	91 09       	sbc	r25, r1
    18f4:	5a f4       	brpl	.+22     	; 0x190c <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    18f6:	e0 91 58 05 	lds	r30, 0x0558	; 0x800558 <out_insert_pos>
    18fa:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <bytes_in_out_buffer>
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	e8 1b       	sub	r30, r24
    1902:	f1 09       	sbc	r31, r1
    1904:	e7 5a       	subi	r30, 0xA7	; 167
    1906:	f9 4f       	sbci	r31, 0xF9	; 249
    1908:	90 81       	ld	r25, Z
    190a:	0a c0       	rjmp	.+20     	; 0x1920 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    190c:	e0 91 58 05 	lds	r30, 0x0558	; 0x800558 <out_insert_pos>
    1910:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <bytes_in_out_buffer>
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	e8 1b       	sub	r30, r24
    1918:	f1 09       	sbc	r31, r1
    191a:	e6 5a       	subi	r30, 0xA6	; 166
    191c:	fa 4f       	sbci	r31, 0xFA	; 250
    191e:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    1920:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <bytes_in_out_buffer>
    1924:	81 50       	subi	r24, 0x01	; 1
    1926:	80 93 59 05 	sts	0x0559, r24	; 0x800559 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    192a:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    192e:	05 c0       	rjmp	.+10     	; 0x193a <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
    1930:	e1 ec       	ldi	r30, 0xC1	; 193
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	8f 7d       	andi	r24, 0xDF	; 223
    1938:	80 83       	st	Z, r24
	}
}
    193a:	ff 91       	pop	r31
    193c:	ef 91       	pop	r30
    193e:	9f 91       	pop	r25
    1940:	8f 91       	pop	r24
    1942:	2f 91       	pop	r18
    1944:	0f 90       	pop	r0
    1946:	0f be       	out	0x3f, r0	; 63
    1948:	0f 90       	pop	r0
    194a:	1f 90       	pop	r1
    194c:	18 95       	reti

0000194e <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    194e:	1f 92       	push	r1
    1950:	0f 92       	push	r0
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	0f 92       	push	r0
    1956:	11 24       	eor	r1, r1
    1958:	2f 93       	push	r18
    195a:	3f 93       	push	r19
    195c:	4f 93       	push	r20
    195e:	5f 93       	push	r21
    1960:	6f 93       	push	r22
    1962:	7f 93       	push	r23
    1964:	8f 93       	push	r24
    1966:	9f 93       	push	r25
    1968:	af 93       	push	r26
    196a:	bf 93       	push	r27
    196c:	cf 93       	push	r28
    196e:	ef 93       	push	r30
    1970:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    1972:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
    1976:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <do_echo>
    197a:	88 23       	and	r24, r24
    197c:	49 f0       	breq	.+18     	; 0x1990 <__vector_20+0x42>
    197e:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <bytes_in_out_buffer>
    1982:	8f 3f       	cpi	r24, 0xFF	; 255
    1984:	29 f0       	breq	.+10     	; 0x1990 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    1986:	60 e0       	ldi	r22, 0x00	; 0
    1988:	70 e0       	ldi	r23, 0x00	; 0
    198a:	8c 2f       	mov	r24, r28
    198c:	0e 94 ac 0b 	call	0x1758	; 0x1758 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
    1990:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <bytes_in_input_buffer>
    1994:	80 31       	cpi	r24, 0x10	; 16
    1996:	20 f0       	brcs	.+8      	; 0x19a0 <__vector_20+0x52>
		input_overrun = 1;
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	80 93 6a 06 	sts	0x066A, r24	; 0x80066a <input_overrun>
    199e:	18 c0       	rjmp	.+48     	; 0x19d0 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
    19a0:	cd 30       	cpi	r28, 0x0D	; 13
    19a2:	09 f4       	brne	.+2      	; 0x19a6 <__vector_20+0x58>
			c = '\n';
    19a4:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    19a6:	e0 91 59 06 	lds	r30, 0x0659	; 0x800659 <input_insert_pos>
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	8e 0f       	add	r24, r30
    19ae:	80 93 59 06 	sts	0x0659, r24	; 0x800659 <input_insert_pos>
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	e6 5a       	subi	r30, 0xA6	; 166
    19b6:	f9 4f       	sbci	r31, 0xF9	; 249
    19b8:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    19ba:	80 91 6b 06 	lds	r24, 0x066B	; 0x80066b <bytes_in_input_buffer>
    19be:	8f 5f       	subi	r24, 0xFF	; 255
    19c0:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
    19c4:	80 91 59 06 	lds	r24, 0x0659	; 0x800659 <input_insert_pos>
    19c8:	80 31       	cpi	r24, 0x10	; 16
    19ca:	11 f4       	brne	.+4      	; 0x19d0 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    19cc:	10 92 59 06 	sts	0x0659, r1	; 0x800659 <input_insert_pos>
		}
	}
}
    19d0:	ff 91       	pop	r31
    19d2:	ef 91       	pop	r30
    19d4:	cf 91       	pop	r28
    19d6:	bf 91       	pop	r27
    19d8:	af 91       	pop	r26
    19da:	9f 91       	pop	r25
    19dc:	8f 91       	pop	r24
    19de:	7f 91       	pop	r23
    19e0:	6f 91       	pop	r22
    19e2:	5f 91       	pop	r21
    19e4:	4f 91       	pop	r20
    19e6:	3f 91       	pop	r19
    19e8:	2f 91       	pop	r18
    19ea:	0f 90       	pop	r0
    19ec:	0f be       	out	0x3f, r0	; 63
    19ee:	0f 90       	pop	r0
    19f0:	1f 90       	pop	r1
    19f2:	18 95       	reti

000019f4 <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
    19f4:	94 b1       	in	r25, 0x04	; 4
    19f6:	90 6b       	ori	r25, 0xB0	; 176
    19f8:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
    19fa:	95 b1       	in	r25, 0x05	; 5
    19fc:	90 61       	ori	r25, 0x10	; 16
    19fe:	95 b9       	out	0x05, r25	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
    1a00:	90 e5       	ldi	r25, 0x50	; 80
    1a02:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
    1a04:	88 30       	cpi	r24, 0x08	; 8
    1a06:	21 f0       	breq	.+8      	; 0x1a10 <spi_setup_master+0x1c>
    1a08:	80 32       	cpi	r24, 0x20	; 32
    1a0a:	11 f0       	breq	.+4      	; 0x1a10 <spi_setup_master+0x1c>
    1a0c:	82 30       	cpi	r24, 0x02	; 2
    1a0e:	19 f4       	brne	.+6      	; 0x1a16 <spi_setup_master+0x22>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
    1a10:	91 e0       	ldi	r25, 0x01	; 1
    1a12:	9d bd       	out	0x2d, r25	; 45
			break;
    1a14:	01 c0       	rjmp	.+2      	; 0x1a18 <spi_setup_master+0x24>
		default:
			SPSR0 = 0;
    1a16:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
    1a18:	80 32       	cpi	r24, 0x20	; 32
    1a1a:	69 f0       	breq	.+26     	; 0x1a36 <spi_setup_master+0x42>
    1a1c:	28 f4       	brcc	.+10     	; 0x1a28 <spi_setup_master+0x34>
    1a1e:	88 30       	cpi	r24, 0x08	; 8
    1a20:	71 f0       	breq	.+28     	; 0x1a3e <spi_setup_master+0x4a>
    1a22:	80 31       	cpi	r24, 0x10	; 16
    1a24:	61 f0       	breq	.+24     	; 0x1a3e <spi_setup_master+0x4a>
    1a26:	0e c0       	rjmp	.+28     	; 0x1a44 <spi_setup_master+0x50>
    1a28:	80 34       	cpi	r24, 0x40	; 64
    1a2a:	29 f0       	breq	.+10     	; 0x1a36 <spi_setup_master+0x42>
    1a2c:	80 38       	cpi	r24, 0x80	; 128
    1a2e:	51 f4       	brne	.+20     	; 0x1a44 <spi_setup_master+0x50>
		case 128:
			SPCR0 |= (1<<SPR00);
    1a30:	8c b5       	in	r24, 0x2c	; 44
    1a32:	81 60       	ori	r24, 0x01	; 1
    1a34:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
    1a36:	8c b5       	in	r24, 0x2c	; 44
    1a38:	82 60       	ori	r24, 0x02	; 2
    1a3a:	8c bd       	out	0x2c, r24	; 44
			break;
    1a3c:	03 c0       	rjmp	.+6      	; 0x1a44 <spi_setup_master+0x50>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
    1a3e:	8c b5       	in	r24, 0x2c	; 44
    1a40:	81 60       	ori	r24, 0x01	; 1
    1a42:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
    1a44:	85 b1       	in	r24, 0x05	; 5
    1a46:	8f 7e       	andi	r24, 0xEF	; 239
    1a48:	85 b9       	out	0x05, r24	; 5
    1a4a:	08 95       	ret

00001a4c <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
    1a4c:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
    1a4e:	0d b4       	in	r0, 0x2d	; 45
    1a50:	07 fe       	sbrs	r0, 7
    1a52:	fd cf       	rjmp	.-6      	; 0x1a4e <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    1a54:	8e b5       	in	r24, 0x2e	; 46
    1a56:	08 95       	ret

00001a58 <move_terminal_cursor>:
	printf_P(PSTR("\x1b[0m"));
}

void reverse_video(void) {
	printf_P(PSTR("\x1b[7m"));
}
    1a58:	9f 93       	push	r25
    1a5a:	8f 93       	push	r24
    1a5c:	7f 93       	push	r23
    1a5e:	6f 93       	push	r22
    1a60:	8d e2       	ldi	r24, 0x2D	; 45
    1a62:	91 e0       	ldi	r25, 0x01	; 1
    1a64:	9f 93       	push	r25
    1a66:	8f 93       	push	r24
    1a68:	0e 94 55 12 	call	0x24aa	; 0x24aa <printf_P>
    1a6c:	0f 90       	pop	r0
    1a6e:	0f 90       	pop	r0
    1a70:	0f 90       	pop	r0
    1a72:	0f 90       	pop	r0
    1a74:	0f 90       	pop	r0
    1a76:	0f 90       	pop	r0
    1a78:	08 95       	ret

00001a7a <clear_terminal>:

void clear_terminal(void) {
	printf_P(PSTR("\x1b[2J"));
    1a7a:	88 e2       	ldi	r24, 0x28	; 40
    1a7c:	91 e0       	ldi	r25, 0x01	; 1
    1a7e:	9f 93       	push	r25
    1a80:	8f 93       	push	r24
    1a82:	0e 94 55 12 	call	0x24aa	; 0x24aa <printf_P>
}
    1a86:	0f 90       	pop	r0
    1a88:	0f 90       	pop	r0
    1a8a:	08 95       	ret

00001a8c <init_timer0>:
 * Parameters:
 *		time: time in milliseconds after current time to switch sound off.
 */
void time_till_sound_off(uint32_t time) {
	sound_off_time = clockTicks + time;
}
    1a8c:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <clockTicks>
    1a90:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <clockTicks+0x1>
    1a94:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <clockTicks+0x2>
    1a98:	10 92 4b 03 	sts	0x034B, r1	; 0x80034b <clockTicks+0x3>
    1a9c:	16 bc       	out	0x26, r1	; 38
    1a9e:	8c e7       	ldi	r24, 0x7C	; 124
    1aa0:	87 bd       	out	0x27, r24	; 39
    1aa2:	82 e0       	ldi	r24, 0x02	; 2
    1aa4:	84 bd       	out	0x24, r24	; 36
    1aa6:	83 e0       	ldi	r24, 0x03	; 3
    1aa8:	85 bd       	out	0x25, r24	; 37
    1aaa:	ee e6       	ldi	r30, 0x6E	; 110
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	82 60       	ori	r24, 0x02	; 2
    1ab2:	80 83       	st	Z, r24
    1ab4:	85 b3       	in	r24, 0x15	; 21
    1ab6:	82 70       	andi	r24, 0x02	; 2
    1ab8:	85 bb       	out	0x15, r24	; 21
    1aba:	08 95       	ret

00001abc <get_current_time>:
    1abc:	8f b7       	in	r24, 0x3f	; 63
    1abe:	28 2f       	mov	r18, r24
    1ac0:	20 78       	andi	r18, 0x80	; 128
    1ac2:	f8 94       	cli
    1ac4:	60 91 48 03 	lds	r22, 0x0348	; 0x800348 <clockTicks>
    1ac8:	70 91 49 03 	lds	r23, 0x0349	; 0x800349 <clockTicks+0x1>
    1acc:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <clockTicks+0x2>
    1ad0:	90 91 4b 03 	lds	r25, 0x034B	; 0x80034b <clockTicks+0x3>
    1ad4:	22 23       	and	r18, r18
    1ad6:	09 f0       	breq	.+2      	; 0x1ada <get_current_time+0x1e>
    1ad8:	78 94       	sei
    1ada:	08 95       	ret

00001adc <__vector_16>:
    1adc:	1f 92       	push	r1
    1ade:	0f 92       	push	r0
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	0f 92       	push	r0
    1ae4:	11 24       	eor	r1, r1
    1ae6:	0f 93       	push	r16
    1ae8:	1f 93       	push	r17
    1aea:	2f 93       	push	r18
    1aec:	3f 93       	push	r19
    1aee:	4f 93       	push	r20
    1af0:	5f 93       	push	r21
    1af2:	6f 93       	push	r22
    1af4:	7f 93       	push	r23
    1af6:	8f 93       	push	r24
    1af8:	9f 93       	push	r25
    1afa:	af 93       	push	r26
    1afc:	bf 93       	push	r27
    1afe:	cf 93       	push	r28
    1b00:	ef 93       	push	r30
    1b02:	ff 93       	push	r31
    1b04:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <clockTicks>
    1b08:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <clockTicks+0x1>
    1b0c:	a0 91 4a 03 	lds	r26, 0x034A	; 0x80034a <clockTicks+0x2>
    1b10:	b0 91 4b 03 	lds	r27, 0x034B	; 0x80034b <clockTicks+0x3>
    1b14:	01 96       	adiw	r24, 0x01	; 1
    1b16:	a1 1d       	adc	r26, r1
    1b18:	b1 1d       	adc	r27, r1
    1b1a:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <clockTicks>
    1b1e:	90 93 49 03 	sts	0x0349, r25	; 0x800349 <clockTicks+0x1>
    1b22:	a0 93 4a 03 	sts	0x034A, r26	; 0x80034a <clockTicks+0x2>
    1b26:	b0 93 4b 03 	sts	0x034B, r27	; 0x80034b <clockTicks+0x3>
    1b2a:	82 b1       	in	r24, 0x02	; 2
    1b2c:	80 74       	andi	r24, 0x40	; 64
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	08 2e       	mov	r0, r24
    1b32:	89 2f       	mov	r24, r25
    1b34:	00 0c       	add	r0, r0
    1b36:	88 1f       	adc	r24, r24
    1b38:	99 0b       	sbc	r25, r25
    1b3a:	00 0c       	add	r0, r0
    1b3c:	88 1f       	adc	r24, r24
    1b3e:	99 1f       	adc	r25, r25
    1b40:	c8 2f       	mov	r28, r24
    1b42:	0e 94 49 04 	call	0x892	; 0x892 <get_game_initialised>
    1b46:	88 23       	and	r24, r24
    1b48:	09 f4       	brne	.+2      	; 0x1b4c <__vector_16+0x70>
    1b4a:	be c0       	rjmp	.+380    	; 0x1cc8 <__vector_16+0x1ec>
    1b4c:	c1 30       	cpi	r28, 0x01	; 1
    1b4e:	b1 f4       	brne	.+44     	; 0x1b7c <__vector_16+0xa0>
    1b50:	0e 94 46 04 	call	0x88c	; 0x88c <get_steps>
    1b54:	9d ec       	ldi	r25, 0xCD	; 205
    1b56:	89 9f       	mul	r24, r25
    1b58:	91 2d       	mov	r25, r1
    1b5a:	11 24       	eor	r1, r1
    1b5c:	96 95       	lsr	r25
    1b5e:	96 95       	lsr	r25
    1b60:	96 95       	lsr	r25
    1b62:	99 0f       	add	r25, r25
    1b64:	29 2f       	mov	r18, r25
    1b66:	22 0f       	add	r18, r18
    1b68:	22 0f       	add	r18, r18
    1b6a:	92 0f       	add	r25, r18
    1b6c:	89 1b       	sub	r24, r25
    1b6e:	e8 2f       	mov	r30, r24
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	ec 5e       	subi	r30, 0xEC	; 236
    1b74:	fe 4f       	sbci	r31, 0xFE	; 254
    1b76:	80 81       	ld	r24, Z
    1b78:	88 b9       	out	0x08, r24	; 8
    1b7a:	0e c0       	rjmp	.+28     	; 0x1b98 <__vector_16+0xbc>
    1b7c:	0e 94 46 04 	call	0x88c	; 0x88c <get_steps>
    1b80:	ed ec       	ldi	r30, 0xCD	; 205
    1b82:	8e 9f       	mul	r24, r30
    1b84:	e1 2d       	mov	r30, r1
    1b86:	11 24       	eor	r1, r1
    1b88:	e6 95       	lsr	r30
    1b8a:	e6 95       	lsr	r30
    1b8c:	e6 95       	lsr	r30
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	ec 5e       	subi	r30, 0xEC	; 236
    1b92:	fe 4f       	sbci	r31, 0xFE	; 254
    1b94:	80 81       	ld	r24, Z
    1b96:	88 b9       	out	0x08, r24	; 8
    1b98:	92 b1       	in	r25, 0x02	; 2
    1b9a:	80 e4       	ldi	r24, 0x40	; 64
    1b9c:	89 27       	eor	r24, r25
    1b9e:	82 b9       	out	0x02, r24	; 2
    1ba0:	40 91 48 03 	lds	r20, 0x0348	; 0x800348 <clockTicks>
    1ba4:	50 91 49 03 	lds	r21, 0x0349	; 0x800349 <clockTicks+0x1>
    1ba8:	60 91 4a 03 	lds	r22, 0x034A	; 0x80034a <clockTicks+0x2>
    1bac:	70 91 4b 03 	lds	r23, 0x034B	; 0x80034b <clockTicks+0x3>
    1bb0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <sound_off_time>
    1bb4:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <sound_off_time+0x1>
    1bb8:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <sound_off_time+0x2>
    1bbc:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <sound_off_time+0x3>
    1bc0:	84 17       	cp	r24, r20
    1bc2:	95 07       	cpc	r25, r21
    1bc4:	a6 07       	cpc	r26, r22
    1bc6:	b7 07       	cpc	r27, r23
    1bc8:	68 f4       	brcc	.+26     	; 0x1be4 <__vector_16+0x108>
    1bca:	8f ef       	ldi	r24, 0xFF	; 255
    1bcc:	9f ef       	ldi	r25, 0xFF	; 255
    1bce:	dc 01       	movw	r26, r24
    1bd0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <sound_off_time>
    1bd4:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <sound_off_time+0x1>
    1bd8:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <sound_off_time+0x2>
    1bdc:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <sound_off_time+0x3>
    1be0:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <sound_off>
    1be4:	80 91 7c 06 	lds	r24, 0x067C	; 0x80067c <jingle+0x10>
    1be8:	81 30       	cpi	r24, 0x01	; 1
    1bea:	09 f0       	breq	.+2      	; 0x1bee <__vector_16+0x112>
    1bec:	6e c0       	rjmp	.+220    	; 0x1cca <__vector_16+0x1ee>
    1bee:	40 91 82 06 	lds	r20, 0x0682	; 0x800682 <jingle+0x16>
    1bf2:	50 91 83 06 	lds	r21, 0x0683	; 0x800683 <jingle+0x17>
    1bf6:	60 91 84 06 	lds	r22, 0x0684	; 0x800684 <jingle+0x18>
    1bfa:	70 91 85 06 	lds	r23, 0x0685	; 0x800685 <jingle+0x19>
    1bfe:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <clockTicks>
    1c02:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <clockTicks+0x1>
    1c06:	a0 91 4a 03 	lds	r26, 0x034A	; 0x80034a <clockTicks+0x2>
    1c0a:	b0 91 4b 03 	lds	r27, 0x034B	; 0x80034b <clockTicks+0x3>
    1c0e:	48 17       	cp	r20, r24
    1c10:	59 07       	cpc	r21, r25
    1c12:	6a 07       	cpc	r22, r26
    1c14:	7b 07       	cpc	r23, r27
    1c16:	08 f0       	brcs	.+2      	; 0x1c1a <__vector_16+0x13e>
    1c18:	58 c0       	rjmp	.+176    	; 0x1cca <__vector_16+0x1ee>
    1c1a:	20 91 7d 06 	lds	r18, 0x067D	; 0x80067d <jingle+0x11>
    1c1e:	82 2f       	mov	r24, r18
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	fc 01       	movw	r30, r24
    1c24:	ee 0f       	add	r30, r30
    1c26:	ff 1f       	adc	r31, r31
    1c28:	e4 59       	subi	r30, 0x94	; 148
    1c2a:	f9 4f       	sbci	r31, 0xF9	; 249
    1c2c:	40 81       	ld	r20, Z
    1c2e:	51 81       	ldd	r21, Z+1	; 0x01
    1c30:	4f 3f       	cpi	r20, 0xFF	; 255
    1c32:	5f 4f       	sbci	r21, 0xFF	; 255
    1c34:	11 f0       	breq	.+4      	; 0x1c3a <__vector_16+0x15e>
    1c36:	28 30       	cpi	r18, 0x08	; 8
    1c38:	28 f0       	brcs	.+10     	; 0x1c44 <__vector_16+0x168>
    1c3a:	10 92 7c 06 	sts	0x067C, r1	; 0x80067c <jingle+0x10>
    1c3e:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <sound_off>
    1c42:	43 c0       	rjmp	.+134    	; 0x1cca <__vector_16+0x1ee>
    1c44:	ec e6       	ldi	r30, 0x6C	; 108
    1c46:	f6 e0       	ldi	r31, 0x06	; 6
    1c48:	02 89       	ldd	r16, Z+18	; 0x12
    1c4a:	13 89       	ldd	r17, Z+19	; 0x13
    1c4c:	24 89       	ldd	r18, Z+20	; 0x14
    1c4e:	35 89       	ldd	r19, Z+21	; 0x15
    1c50:	40 91 48 03 	lds	r20, 0x0348	; 0x800348 <clockTicks>
    1c54:	50 91 49 03 	lds	r21, 0x0349	; 0x800349 <clockTicks+0x1>
    1c58:	60 91 4a 03 	lds	r22, 0x034A	; 0x80034a <clockTicks+0x2>
    1c5c:	70 91 4b 03 	lds	r23, 0x034B	; 0x80034b <clockTicks+0x3>
    1c60:	40 0f       	add	r20, r16
    1c62:	51 1f       	adc	r21, r17
    1c64:	62 1f       	adc	r22, r18
    1c66:	73 1f       	adc	r23, r19
    1c68:	46 8b       	std	Z+22, r20	; 0x16
    1c6a:	57 8b       	std	Z+23, r21	; 0x17
    1c6c:	60 8f       	std	Z+24, r22	; 0x18
    1c6e:	71 8f       	std	Z+25, r23	; 0x19
    1c70:	88 0f       	add	r24, r24
    1c72:	99 1f       	adc	r25, r25
    1c74:	fc 01       	movw	r30, r24
    1c76:	e4 59       	subi	r30, 0x94	; 148
    1c78:	f9 4f       	sbci	r31, 0xF9	; 249
    1c7a:	01 90       	ld	r0, Z+
    1c7c:	f0 81       	ld	r31, Z
    1c7e:	e0 2d       	mov	r30, r0
    1c80:	e8 30       	cpi	r30, 0x08	; 8
    1c82:	f1 05       	cpc	r31, r1
    1c84:	d8 f4       	brcc	.+54     	; 0x1cbc <__vector_16+0x1e0>
    1c86:	e2 5c       	subi	r30, 0xC2	; 194
    1c88:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8a:	0c 94 11 12 	jmp	0x2422	; 0x2422 <__tablejump2__>
    1c8e:	0e 94 03 10 	call	0x2006	; 0x2006 <play_A>
    1c92:	14 c0       	rjmp	.+40     	; 0x1cbc <__vector_16+0x1e0>
    1c94:	0e 94 0a 10 	call	0x2014	; 0x2014 <play_B>
    1c98:	11 c0       	rjmp	.+34     	; 0x1cbc <__vector_16+0x1e0>
    1c9a:	0e 94 11 10 	call	0x2022	; 0x2022 <play_C>
    1c9e:	0e c0       	rjmp	.+28     	; 0x1cbc <__vector_16+0x1e0>
    1ca0:	0e 94 18 10 	call	0x2030	; 0x2030 <play_D>
    1ca4:	0b c0       	rjmp	.+22     	; 0x1cbc <__vector_16+0x1e0>
    1ca6:	0e 94 1f 10 	call	0x203e	; 0x203e <play_E>
    1caa:	08 c0       	rjmp	.+16     	; 0x1cbc <__vector_16+0x1e0>
    1cac:	0e 94 26 10 	call	0x204c	; 0x204c <play_F>
    1cb0:	05 c0       	rjmp	.+10     	; 0x1cbc <__vector_16+0x1e0>
    1cb2:	0e 94 2d 10 	call	0x205a	; 0x205a <play_G>
    1cb6:	02 c0       	rjmp	.+4      	; 0x1cbc <__vector_16+0x1e0>
    1cb8:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <sound_off>
    1cbc:	ec e6       	ldi	r30, 0x6C	; 108
    1cbe:	f6 e0       	ldi	r31, 0x06	; 6
    1cc0:	81 89       	ldd	r24, Z+17	; 0x11
    1cc2:	8f 5f       	subi	r24, 0xFF	; 255
    1cc4:	81 8b       	std	Z+17, r24	; 0x11
    1cc6:	01 c0       	rjmp	.+2      	; 0x1cca <__vector_16+0x1ee>
    1cc8:	18 b8       	out	0x08, r1	; 8
    1cca:	ff 91       	pop	r31
    1ccc:	ef 91       	pop	r30
    1cce:	cf 91       	pop	r28
    1cd0:	bf 91       	pop	r27
    1cd2:	af 91       	pop	r26
    1cd4:	9f 91       	pop	r25
    1cd6:	8f 91       	pop	r24
    1cd8:	7f 91       	pop	r23
    1cda:	6f 91       	pop	r22
    1cdc:	5f 91       	pop	r21
    1cde:	4f 91       	pop	r20
    1ce0:	3f 91       	pop	r19
    1ce2:	2f 91       	pop	r18
    1ce4:	1f 91       	pop	r17
    1ce6:	0f 91       	pop	r16
    1ce8:	0f 90       	pop	r0
    1cea:	0f be       	out	0x3f, r0	; 63
    1cec:	0f 90       	pop	r0
    1cee:	1f 90       	pop	r1
    1cf0:	18 95       	reti

00001cf2 <play_found_diamond>:
void play_found_diamond() {
	uint8_t count = 0;
	uint8_t play_jingle = 1;
	uint32_t interval = 200;
	uint32_t next_play = 0;
	jingle = (struct Jingle) {{NOTE_C, NOTE_E, NOTE_G, -1, -1, -1, -1, -1}, play_jingle, count, interval, next_play};
    1cf2:	ec e6       	ldi	r30, 0x6C	; 108
    1cf4:	f6 e0       	ldi	r31, 0x06	; 6
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	91 83       	std	Z+1, r25	; 0x01
    1cfc:	80 83       	st	Z, r24
    1cfe:	83 e0       	ldi	r24, 0x03	; 3
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	93 83       	std	Z+3, r25	; 0x03
    1d04:	82 83       	std	Z+2, r24	; 0x02
    1d06:	85 e0       	ldi	r24, 0x05	; 5
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	95 83       	std	Z+5, r25	; 0x05
    1d0c:	84 83       	std	Z+4, r24	; 0x04
    1d0e:	8f ef       	ldi	r24, 0xFF	; 255
    1d10:	9f ef       	ldi	r25, 0xFF	; 255
    1d12:	97 83       	std	Z+7, r25	; 0x07
    1d14:	86 83       	std	Z+6, r24	; 0x06
    1d16:	91 87       	std	Z+9, r25	; 0x09
    1d18:	80 87       	std	Z+8, r24	; 0x08
    1d1a:	93 87       	std	Z+11, r25	; 0x0b
    1d1c:	82 87       	std	Z+10, r24	; 0x0a
    1d1e:	95 87       	std	Z+13, r25	; 0x0d
    1d20:	84 87       	std	Z+12, r24	; 0x0c
    1d22:	97 87       	std	Z+15, r25	; 0x0f
    1d24:	86 87       	std	Z+14, r24	; 0x0e
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	80 8b       	std	Z+16, r24	; 0x10
    1d2a:	11 8a       	std	Z+17, r1	; 0x11
    1d2c:	88 ec       	ldi	r24, 0xC8	; 200
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	a0 e0       	ldi	r26, 0x00	; 0
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	82 8b       	std	Z+18, r24	; 0x12
    1d36:	93 8b       	std	Z+19, r25	; 0x13
    1d38:	a4 8b       	std	Z+20, r26	; 0x14
    1d3a:	b5 8b       	std	Z+21, r27	; 0x15
    1d3c:	16 8a       	std	Z+22, r1	; 0x16
    1d3e:	17 8a       	std	Z+23, r1	; 0x17
    1d40:	10 8e       	std	Z+24, r1	; 0x18
    1d42:	11 8e       	std	Z+25, r1	; 0x19
    1d44:	08 95       	ret

00001d46 <play_start_game>:
void play_start_game() {
	uint8_t count = 0;
	uint8_t play_jingle = 1;
	uint32_t interval = 200;
	uint32_t next_play = 0;
	jingle = (struct Jingle) {{NOTE_C, NOTE_D, NOTE_E, NOTE_F, NOTE_G, NO_NOTE, NOTE_C, -1}, play_jingle, count, interval, next_play};
    1d46:	ec e6       	ldi	r30, 0x6C	; 108
    1d48:	f6 e0       	ldi	r31, 0x06	; 6
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	91 83       	std	Z+1, r25	; 0x01
    1d50:	80 83       	st	Z, r24
    1d52:	22 e0       	ldi	r18, 0x02	; 2
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	33 83       	std	Z+3, r19	; 0x03
    1d58:	22 83       	std	Z+2, r18	; 0x02
    1d5a:	23 e0       	ldi	r18, 0x03	; 3
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	35 83       	std	Z+5, r19	; 0x05
    1d60:	24 83       	std	Z+4, r18	; 0x04
    1d62:	24 e0       	ldi	r18, 0x04	; 4
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	37 83       	std	Z+7, r19	; 0x07
    1d68:	26 83       	std	Z+6, r18	; 0x06
    1d6a:	25 e0       	ldi	r18, 0x05	; 5
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	31 87       	std	Z+9, r19	; 0x09
    1d70:	20 87       	std	Z+8, r18	; 0x08
    1d72:	13 86       	std	Z+11, r1	; 0x0b
    1d74:	12 86       	std	Z+10, r1	; 0x0a
    1d76:	95 87       	std	Z+13, r25	; 0x0d
    1d78:	84 87       	std	Z+12, r24	; 0x0c
    1d7a:	8f ef       	ldi	r24, 0xFF	; 255
    1d7c:	9f ef       	ldi	r25, 0xFF	; 255
    1d7e:	97 87       	std	Z+15, r25	; 0x0f
    1d80:	86 87       	std	Z+14, r24	; 0x0e
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	80 8b       	std	Z+16, r24	; 0x10
    1d86:	11 8a       	std	Z+17, r1	; 0x11
    1d88:	88 ec       	ldi	r24, 0xC8	; 200
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	a0 e0       	ldi	r26, 0x00	; 0
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	82 8b       	std	Z+18, r24	; 0x12
    1d92:	93 8b       	std	Z+19, r25	; 0x13
    1d94:	a4 8b       	std	Z+20, r26	; 0x14
    1d96:	b5 8b       	std	Z+21, r27	; 0x15
    1d98:	16 8a       	std	Z+22, r1	; 0x16
    1d9a:	17 8a       	std	Z+23, r1	; 0x17
    1d9c:	10 8e       	std	Z+24, r1	; 0x18
    1d9e:	11 8e       	std	Z+25, r1	; 0x19
    1da0:	08 95       	ret

00001da2 <play_game_over>:
void play_game_over() {
	uint8_t count = 0;
	uint8_t play_jingle = 1;
	uint32_t interval = 150;
	uint32_t next_play = 0;
	jingle = (struct Jingle) {{NOTE_F, NOTE_E, NO_NOTE, NOTE_A, NOTE_A, NOTE_A, NOTE_A, -1}, play_jingle, count, interval, next_play};
    1da2:	ec e6       	ldi	r30, 0x6C	; 108
    1da4:	f6 e0       	ldi	r31, 0x06	; 6
    1da6:	84 e0       	ldi	r24, 0x04	; 4
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	91 83       	std	Z+1, r25	; 0x01
    1dac:	80 83       	st	Z, r24
    1dae:	83 e0       	ldi	r24, 0x03	; 3
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	93 83       	std	Z+3, r25	; 0x03
    1db4:	82 83       	std	Z+2, r24	; 0x02
    1db6:	15 82       	std	Z+5, r1	; 0x05
    1db8:	14 82       	std	Z+4, r1	; 0x04
    1dba:	86 e0       	ldi	r24, 0x06	; 6
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	97 83       	std	Z+7, r25	; 0x07
    1dc0:	86 83       	std	Z+6, r24	; 0x06
    1dc2:	91 87       	std	Z+9, r25	; 0x09
    1dc4:	80 87       	std	Z+8, r24	; 0x08
    1dc6:	93 87       	std	Z+11, r25	; 0x0b
    1dc8:	82 87       	std	Z+10, r24	; 0x0a
    1dca:	95 87       	std	Z+13, r25	; 0x0d
    1dcc:	84 87       	std	Z+12, r24	; 0x0c
    1dce:	8f ef       	ldi	r24, 0xFF	; 255
    1dd0:	9f ef       	ldi	r25, 0xFF	; 255
    1dd2:	97 87       	std	Z+15, r25	; 0x0f
    1dd4:	86 87       	std	Z+14, r24	; 0x0e
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	80 8b       	std	Z+16, r24	; 0x10
    1dda:	11 8a       	std	Z+17, r1	; 0x11
    1ddc:	86 e9       	ldi	r24, 0x96	; 150
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	a0 e0       	ldi	r26, 0x00	; 0
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	82 8b       	std	Z+18, r24	; 0x12
    1de6:	93 8b       	std	Z+19, r25	; 0x13
    1de8:	a4 8b       	std	Z+20, r26	; 0x14
    1dea:	b5 8b       	std	Z+21, r27	; 0x15
    1dec:	16 8a       	std	Z+22, r1	; 0x16
    1dee:	17 8a       	std	Z+23, r1	; 0x17
    1df0:	10 8e       	std	Z+24, r1	; 0x18
    1df2:	11 8e       	std	Z+25, r1	; 0x19
    1df4:	08 95       	ret

00001df6 <play_blow_bomb>:
void play_blow_bomb() {
	uint8_t count = 0;
	uint8_t play_jingle = 1;
	uint32_t interval = 120;
	uint32_t next_play = 0;
	jingle = (struct Jingle) {{NOTE_A, NOTE_G, NOTE_F, NOTE_E, NOTE_D, -1, -1, -1}, play_jingle, count, interval, next_play};
    1df6:	ec e6       	ldi	r30, 0x6C	; 108
    1df8:	f6 e0       	ldi	r31, 0x06	; 6
    1dfa:	86 e0       	ldi	r24, 0x06	; 6
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	91 83       	std	Z+1, r25	; 0x01
    1e00:	80 83       	st	Z, r24
    1e02:	85 e0       	ldi	r24, 0x05	; 5
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	93 83       	std	Z+3, r25	; 0x03
    1e08:	82 83       	std	Z+2, r24	; 0x02
    1e0a:	84 e0       	ldi	r24, 0x04	; 4
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	95 83       	std	Z+5, r25	; 0x05
    1e10:	84 83       	std	Z+4, r24	; 0x04
    1e12:	83 e0       	ldi	r24, 0x03	; 3
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	97 83       	std	Z+7, r25	; 0x07
    1e18:	86 83       	std	Z+6, r24	; 0x06
    1e1a:	82 e0       	ldi	r24, 0x02	; 2
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	91 87       	std	Z+9, r25	; 0x09
    1e20:	80 87       	std	Z+8, r24	; 0x08
    1e22:	8f ef       	ldi	r24, 0xFF	; 255
    1e24:	9f ef       	ldi	r25, 0xFF	; 255
    1e26:	93 87       	std	Z+11, r25	; 0x0b
    1e28:	82 87       	std	Z+10, r24	; 0x0a
    1e2a:	95 87       	std	Z+13, r25	; 0x0d
    1e2c:	84 87       	std	Z+12, r24	; 0x0c
    1e2e:	97 87       	std	Z+15, r25	; 0x0f
    1e30:	86 87       	std	Z+14, r24	; 0x0e
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	80 8b       	std	Z+16, r24	; 0x10
    1e36:	11 8a       	std	Z+17, r1	; 0x11
    1e38:	88 e7       	ldi	r24, 0x78	; 120
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	a0 e0       	ldi	r26, 0x00	; 0
    1e3e:	b0 e0       	ldi	r27, 0x00	; 0
    1e40:	82 8b       	std	Z+18, r24	; 0x12
    1e42:	93 8b       	std	Z+19, r25	; 0x13
    1e44:	a4 8b       	std	Z+20, r26	; 0x14
    1e46:	b5 8b       	std	Z+21, r27	; 0x15
    1e48:	16 8a       	std	Z+22, r1	; 0x16
    1e4a:	17 8a       	std	Z+23, r1	; 0x17
    1e4c:	10 8e       	std	Z+24, r1	; 0x18
    1e4e:	11 8e       	std	Z+25, r1	; 0x19
    1e50:	08 95       	ret

00001e52 <freq_to_clock_period>:
		} else {
		OCR1B = pulsewidth - 1;
	}
	sound_on();
	time_till_sound_off(time);
}
    1e52:	9c 01       	movw	r18, r24
    1e54:	40 e0       	ldi	r20, 0x00	; 0
    1e56:	50 e0       	ldi	r21, 0x00	; 0
    1e58:	60 e4       	ldi	r22, 0x40	; 64
    1e5a:	72 e4       	ldi	r23, 0x42	; 66
    1e5c:	8f e0       	ldi	r24, 0x0F	; 15
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <__udivmodsi4>
    1e64:	c9 01       	movw	r24, r18
    1e66:	08 95       	ret

00001e68 <duty_cycle_to_pulse_width>:
    1e68:	cf 92       	push	r12
    1e6a:	df 92       	push	r13
    1e6c:	ef 92       	push	r14
    1e6e:	ff 92       	push	r15
    1e70:	6b 01       	movw	r12, r22
    1e72:	7c 01       	movw	r14, r24
    1e74:	ba 01       	movw	r22, r20
    1e76:	80 e0       	ldi	r24, 0x00	; 0
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__floatunsisf>
    1e7e:	a7 01       	movw	r20, r14
    1e80:	96 01       	movw	r18, r12
    1e82:	0e 94 63 11 	call	0x22c6	; 0x22c6 <__mulsf3>
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	48 ec       	ldi	r20, 0xC8	; 200
    1e8c:	52 e4       	ldi	r21, 0x42	; 66
    1e8e:	0e 94 34 10 	call	0x2068	; 0x2068 <__divsf3>
    1e92:	0e 94 a6 10 	call	0x214c	; 0x214c <__fixunssfsi>
    1e96:	cb 01       	movw	r24, r22
    1e98:	ff 90       	pop	r15
    1e9a:	ef 90       	pop	r14
    1e9c:	df 90       	pop	r13
    1e9e:	cf 90       	pop	r12
    1ea0:	08 95       	ret

00001ea2 <sound_off>:
    1ea2:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1ea6:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1eaa:	8a b1       	in	r24, 0x0a	; 10
    1eac:	8f 7e       	andi	r24, 0xEF	; 239
    1eae:	8a b9       	out	0x0a, r24	; 10
    1eb0:	08 95       	ret

00001eb2 <init_timer1>:
    1eb2:	cf 93       	push	r28
    1eb4:	df 93       	push	r29
    1eb6:	10 92 8a 06 	sts	0x068A, r1	; 0x80068a <muted>
    1eba:	84 ef       	ldi	r24, 0xF4	; 244
    1ebc:	91 e0       	ldi	r25, 0x01	; 1
    1ebe:	90 93 87 06 	sts	0x0687, r25	; 0x800687 <freq+0x1>
    1ec2:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <freq>
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	a0 ea       	ldi	r26, 0xA0	; 160
    1ecc:	b1 e4       	ldi	r27, 0x41	; 65
    1ece:	80 93 8b 06 	sts	0x068B, r24	; 0x80068b <dutycycle>
    1ed2:	90 93 8c 06 	sts	0x068C, r25	; 0x80068c <dutycycle+0x1>
    1ed6:	a0 93 8d 06 	sts	0x068D, r26	; 0x80068d <dutycycle+0x2>
    1eda:	b0 93 8e 06 	sts	0x068E, r27	; 0x80068e <dutycycle+0x3>
    1ede:	84 ef       	ldi	r24, 0xF4	; 244
    1ee0:	91 e0       	ldi	r25, 0x01	; 1
    1ee2:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <freq_to_clock_period>
    1ee6:	ec 01       	movw	r28, r24
    1ee8:	90 93 89 06 	sts	0x0689, r25	; 0x800689 <clockperiod+0x1>
    1eec:	80 93 88 06 	sts	0x0688, r24	; 0x800688 <clockperiod>
    1ef0:	ac 01       	movw	r20, r24
    1ef2:	60 e0       	ldi	r22, 0x00	; 0
    1ef4:	70 e0       	ldi	r23, 0x00	; 0
    1ef6:	80 ea       	ldi	r24, 0xA0	; 160
    1ef8:	91 e4       	ldi	r25, 0x41	; 65
    1efa:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <duty_cycle_to_pulse_width>
    1efe:	90 93 90 06 	sts	0x0690, r25	; 0x800690 <pulsewidth+0x1>
    1f02:	80 93 8f 06 	sts	0x068F, r24	; 0x80068f <pulsewidth>
    1f06:	21 97       	sbiw	r28, 0x01	; 1
    1f08:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    1f0c:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    1f10:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <pulsewidth>
    1f14:	90 91 90 06 	lds	r25, 0x0690	; 0x800690 <pulsewidth+0x1>
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	29 f4       	brne	.+10     	; 0x1f26 <init_timer1+0x74>
    1f1c:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    1f20:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    1f24:	05 c0       	rjmp	.+10     	; 0x1f30 <init_timer1+0x7e>
    1f26:	01 97       	sbiw	r24, 0x01	; 1
    1f28:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    1f2c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    1f30:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <sound_off>
    1f34:	df 91       	pop	r29
    1f36:	cf 91       	pop	r28
    1f38:	08 95       	ret

00001f3a <toggle_sound>:
    1f3a:	80 91 8a 06 	lds	r24, 0x068A	; 0x80068a <muted>
    1f3e:	81 30       	cpi	r24, 0x01	; 1
    1f40:	19 f4       	brne	.+6      	; 0x1f48 <toggle_sound+0xe>
    1f42:	10 92 8a 06 	sts	0x068A, r1	; 0x80068a <muted>
    1f46:	08 95       	ret
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	80 93 8a 06 	sts	0x068A, r24	; 0x80068a <muted>
    1f4e:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <sound_off>
    1f52:	08 95       	ret

00001f54 <sound_on>:
    1f54:	80 91 8a 06 	lds	r24, 0x068A	; 0x80068a <muted>
    1f58:	81 11       	cpse	r24, r1
    1f5a:	09 c0       	rjmp	.+18     	; 0x1f6e <sound_on+0x1a>
    1f5c:	8a b1       	in	r24, 0x0a	; 10
    1f5e:	80 61       	ori	r24, 0x10	; 16
    1f60:	8a b9       	out	0x0a, r24	; 10
    1f62:	83 e2       	ldi	r24, 0x23	; 35
    1f64:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    1f68:	8a e1       	ldi	r24, 0x1A	; 26
    1f6a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    1f6e:	08 95       	ret

00001f70 <play_sound>:
 * Parameters:
 *		f: frequency (hz)
 *		dc: duty cycle (%) (how loud it is)
 *		
 */
void play_sound(uint16_t f, uint16_t dc) {
    1f70:	cf 92       	push	r12
    1f72:	df 92       	push	r13
    1f74:	ef 92       	push	r14
    1f76:	ff 92       	push	r15
    1f78:	cf 93       	push	r28
    1f7a:	df 93       	push	r29
    1f7c:	ec 01       	movw	r28, r24
	
	freq = f;	// Hz
    1f7e:	90 93 87 06 	sts	0x0687, r25	; 0x800687 <freq+0x1>
    1f82:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <freq>
	dutycycle = dc;	// %
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__floatunsisf>
    1f8e:	6b 01       	movw	r12, r22
    1f90:	7c 01       	movw	r14, r24
    1f92:	60 93 8b 06 	sts	0x068B, r22	; 0x80068b <dutycycle>
    1f96:	70 93 8c 06 	sts	0x068C, r23	; 0x80068c <dutycycle+0x1>
    1f9a:	80 93 8d 06 	sts	0x068D, r24	; 0x80068d <dutycycle+0x2>
    1f9e:	90 93 8e 06 	sts	0x068E, r25	; 0x80068e <dutycycle+0x3>
	clockperiod = freq_to_clock_period(freq);
    1fa2:	ce 01       	movw	r24, r28
    1fa4:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <freq_to_clock_period>
    1fa8:	ec 01       	movw	r28, r24
    1faa:	90 93 89 06 	sts	0x0689, r25	; 0x800689 <clockperiod+0x1>
    1fae:	80 93 88 06 	sts	0x0688, r24	; 0x800688 <clockperiod>
	pulsewidth = duty_cycle_to_pulse_width(dutycycle, clockperiod);
    1fb2:	ac 01       	movw	r20, r24
    1fb4:	c7 01       	movw	r24, r14
    1fb6:	b6 01       	movw	r22, r12
    1fb8:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <duty_cycle_to_pulse_width>
    1fbc:	90 93 90 06 	sts	0x0690, r25	; 0x800690 <pulsewidth+0x1>
    1fc0:	80 93 8f 06 	sts	0x068F, r24	; 0x80068f <pulsewidth>
		
		
	// Set the maximum count value for timer/counter 1 to be one less than the clockperiod
	OCR1A = clockperiod - 1;
    1fc4:	21 97       	sbiw	r28, 0x01	; 1
    1fc6:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
    1fca:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		
	// Set the count compare value based on the pulse width. The value will be 1 less
	// than the pulse width - unless the pulse width is 0.
	if(pulsewidth == 0) {
    1fce:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <pulsewidth>
    1fd2:	90 91 90 06 	lds	r25, 0x0690	; 0x800690 <pulsewidth+0x1>
    1fd6:	00 97       	sbiw	r24, 0x00	; 0
    1fd8:	29 f4       	brne	.+10     	; 0x1fe4 <play_sound+0x74>
		OCR1B = 0;
    1fda:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    1fde:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    1fe2:	05 c0       	rjmp	.+10     	; 0x1fee <play_sound+0x7e>
		} else {
		OCR1B = pulsewidth - 1;
    1fe4:	01 97       	sbiw	r24, 0x01	; 1
    1fe6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    1fea:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	}
	sound_on();
    1fee:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <sound_on>
}
    1ff2:	df 91       	pop	r29
    1ff4:	cf 91       	pop	r28
    1ff6:	ff 90       	pop	r15
    1ff8:	ef 90       	pop	r14
    1ffa:	df 90       	pop	r13
    1ffc:	cf 90       	pop	r12
    1ffe:	08 95       	ret

00002000 <is_muted>:

uint8_t is_muted() {
	return muted;
}
    2000:	80 91 8a 06 	lds	r24, 0x068A	; 0x80068a <muted>
    2004:	08 95       	ret

00002006 <play_A>:

void play_A() {
	play_sound(440, DEFAULT_DC);
    2006:	62 e3       	ldi	r22, 0x32	; 50
    2008:	70 e0       	ldi	r23, 0x00	; 0
    200a:	88 eb       	ldi	r24, 0xB8	; 184
    200c:	91 e0       	ldi	r25, 0x01	; 1
    200e:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <play_sound>
    2012:	08 95       	ret

00002014 <play_B>:
}

void play_B() {
	play_sound(494, DEFAULT_DC);
    2014:	62 e3       	ldi	r22, 0x32	; 50
    2016:	70 e0       	ldi	r23, 0x00	; 0
    2018:	8e ee       	ldi	r24, 0xEE	; 238
    201a:	91 e0       	ldi	r25, 0x01	; 1
    201c:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <play_sound>
    2020:	08 95       	ret

00002022 <play_C>:
}

void play_C(){
	play_sound(262, DEFAULT_DC);
    2022:	62 e3       	ldi	r22, 0x32	; 50
    2024:	70 e0       	ldi	r23, 0x00	; 0
    2026:	86 e0       	ldi	r24, 0x06	; 6
    2028:	91 e0       	ldi	r25, 0x01	; 1
    202a:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <play_sound>
    202e:	08 95       	ret

00002030 <play_D>:
}

void play_D(){
	play_sound(293, DEFAULT_DC);
    2030:	62 e3       	ldi	r22, 0x32	; 50
    2032:	70 e0       	ldi	r23, 0x00	; 0
    2034:	85 e2       	ldi	r24, 0x25	; 37
    2036:	91 e0       	ldi	r25, 0x01	; 1
    2038:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <play_sound>
    203c:	08 95       	ret

0000203e <play_E>:
}

void play_E(){
	play_sound(330, DEFAULT_DC);
    203e:	62 e3       	ldi	r22, 0x32	; 50
    2040:	70 e0       	ldi	r23, 0x00	; 0
    2042:	8a e4       	ldi	r24, 0x4A	; 74
    2044:	91 e0       	ldi	r25, 0x01	; 1
    2046:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <play_sound>
    204a:	08 95       	ret

0000204c <play_F>:
}

void play_F(){
	play_sound(349, DEFAULT_DC);
    204c:	62 e3       	ldi	r22, 0x32	; 50
    204e:	70 e0       	ldi	r23, 0x00	; 0
    2050:	8d e5       	ldi	r24, 0x5D	; 93
    2052:	91 e0       	ldi	r25, 0x01	; 1
    2054:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <play_sound>
    2058:	08 95       	ret

0000205a <play_G>:
}

void play_G(){
	play_sound(391, DEFAULT_DC);
    205a:	62 e3       	ldi	r22, 0x32	; 50
    205c:	70 e0       	ldi	r23, 0x00	; 0
    205e:	87 e8       	ldi	r24, 0x87	; 135
    2060:	91 e0       	ldi	r25, 0x01	; 1
    2062:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <play_sound>
    2066:	08 95       	ret

00002068 <__divsf3>:
    2068:	0e 94 48 10 	call	0x2090	; 0x2090 <__divsf3x>
    206c:	0c 94 29 11 	jmp	0x2252	; 0x2252 <__fp_round>
    2070:	0e 94 22 11 	call	0x2244	; 0x2244 <__fp_pscB>
    2074:	58 f0       	brcs	.+22     	; 0x208c <__divsf3+0x24>
    2076:	0e 94 1b 11 	call	0x2236	; 0x2236 <__fp_pscA>
    207a:	40 f0       	brcs	.+16     	; 0x208c <__divsf3+0x24>
    207c:	29 f4       	brne	.+10     	; 0x2088 <__divsf3+0x20>
    207e:	5f 3f       	cpi	r21, 0xFF	; 255
    2080:	29 f0       	breq	.+10     	; 0x208c <__divsf3+0x24>
    2082:	0c 94 12 11 	jmp	0x2224	; 0x2224 <__fp_inf>
    2086:	51 11       	cpse	r21, r1
    2088:	0c 94 5d 11 	jmp	0x22ba	; 0x22ba <__fp_szero>
    208c:	0c 94 18 11 	jmp	0x2230	; 0x2230 <__fp_nan>

00002090 <__divsf3x>:
    2090:	0e 94 3a 11 	call	0x2274	; 0x2274 <__fp_split3>
    2094:	68 f3       	brcs	.-38     	; 0x2070 <__divsf3+0x8>

00002096 <__divsf3_pse>:
    2096:	99 23       	and	r25, r25
    2098:	b1 f3       	breq	.-20     	; 0x2086 <__divsf3+0x1e>
    209a:	55 23       	and	r21, r21
    209c:	91 f3       	breq	.-28     	; 0x2082 <__divsf3+0x1a>
    209e:	95 1b       	sub	r25, r21
    20a0:	55 0b       	sbc	r21, r21
    20a2:	bb 27       	eor	r27, r27
    20a4:	aa 27       	eor	r26, r26
    20a6:	62 17       	cp	r22, r18
    20a8:	73 07       	cpc	r23, r19
    20aa:	84 07       	cpc	r24, r20
    20ac:	38 f0       	brcs	.+14     	; 0x20bc <__divsf3_pse+0x26>
    20ae:	9f 5f       	subi	r25, 0xFF	; 255
    20b0:	5f 4f       	sbci	r21, 0xFF	; 255
    20b2:	22 0f       	add	r18, r18
    20b4:	33 1f       	adc	r19, r19
    20b6:	44 1f       	adc	r20, r20
    20b8:	aa 1f       	adc	r26, r26
    20ba:	a9 f3       	breq	.-22     	; 0x20a6 <__divsf3_pse+0x10>
    20bc:	35 d0       	rcall	.+106    	; 0x2128 <__divsf3_pse+0x92>
    20be:	0e 2e       	mov	r0, r30
    20c0:	3a f0       	brmi	.+14     	; 0x20d0 <__divsf3_pse+0x3a>
    20c2:	e0 e8       	ldi	r30, 0x80	; 128
    20c4:	32 d0       	rcall	.+100    	; 0x212a <__divsf3_pse+0x94>
    20c6:	91 50       	subi	r25, 0x01	; 1
    20c8:	50 40       	sbci	r21, 0x00	; 0
    20ca:	e6 95       	lsr	r30
    20cc:	00 1c       	adc	r0, r0
    20ce:	ca f7       	brpl	.-14     	; 0x20c2 <__divsf3_pse+0x2c>
    20d0:	2b d0       	rcall	.+86     	; 0x2128 <__divsf3_pse+0x92>
    20d2:	fe 2f       	mov	r31, r30
    20d4:	29 d0       	rcall	.+82     	; 0x2128 <__divsf3_pse+0x92>
    20d6:	66 0f       	add	r22, r22
    20d8:	77 1f       	adc	r23, r23
    20da:	88 1f       	adc	r24, r24
    20dc:	bb 1f       	adc	r27, r27
    20de:	26 17       	cp	r18, r22
    20e0:	37 07       	cpc	r19, r23
    20e2:	48 07       	cpc	r20, r24
    20e4:	ab 07       	cpc	r26, r27
    20e6:	b0 e8       	ldi	r27, 0x80	; 128
    20e8:	09 f0       	breq	.+2      	; 0x20ec <__divsf3_pse+0x56>
    20ea:	bb 0b       	sbc	r27, r27
    20ec:	80 2d       	mov	r24, r0
    20ee:	bf 01       	movw	r22, r30
    20f0:	ff 27       	eor	r31, r31
    20f2:	93 58       	subi	r25, 0x83	; 131
    20f4:	5f 4f       	sbci	r21, 0xFF	; 255
    20f6:	3a f0       	brmi	.+14     	; 0x2106 <__divsf3_pse+0x70>
    20f8:	9e 3f       	cpi	r25, 0xFE	; 254
    20fa:	51 05       	cpc	r21, r1
    20fc:	78 f0       	brcs	.+30     	; 0x211c <__divsf3_pse+0x86>
    20fe:	0c 94 12 11 	jmp	0x2224	; 0x2224 <__fp_inf>
    2102:	0c 94 5d 11 	jmp	0x22ba	; 0x22ba <__fp_szero>
    2106:	5f 3f       	cpi	r21, 0xFF	; 255
    2108:	e4 f3       	brlt	.-8      	; 0x2102 <__divsf3_pse+0x6c>
    210a:	98 3e       	cpi	r25, 0xE8	; 232
    210c:	d4 f3       	brlt	.-12     	; 0x2102 <__divsf3_pse+0x6c>
    210e:	86 95       	lsr	r24
    2110:	77 95       	ror	r23
    2112:	67 95       	ror	r22
    2114:	b7 95       	ror	r27
    2116:	f7 95       	ror	r31
    2118:	9f 5f       	subi	r25, 0xFF	; 255
    211a:	c9 f7       	brne	.-14     	; 0x210e <__divsf3_pse+0x78>
    211c:	88 0f       	add	r24, r24
    211e:	91 1d       	adc	r25, r1
    2120:	96 95       	lsr	r25
    2122:	87 95       	ror	r24
    2124:	97 f9       	bld	r25, 7
    2126:	08 95       	ret
    2128:	e1 e0       	ldi	r30, 0x01	; 1
    212a:	66 0f       	add	r22, r22
    212c:	77 1f       	adc	r23, r23
    212e:	88 1f       	adc	r24, r24
    2130:	bb 1f       	adc	r27, r27
    2132:	62 17       	cp	r22, r18
    2134:	73 07       	cpc	r23, r19
    2136:	84 07       	cpc	r24, r20
    2138:	ba 07       	cpc	r27, r26
    213a:	20 f0       	brcs	.+8      	; 0x2144 <__divsf3_pse+0xae>
    213c:	62 1b       	sub	r22, r18
    213e:	73 0b       	sbc	r23, r19
    2140:	84 0b       	sbc	r24, r20
    2142:	ba 0b       	sbc	r27, r26
    2144:	ee 1f       	adc	r30, r30
    2146:	88 f7       	brcc	.-30     	; 0x212a <__divsf3_pse+0x94>
    2148:	e0 95       	com	r30
    214a:	08 95       	ret

0000214c <__fixunssfsi>:
    214c:	0e 94 42 11 	call	0x2284	; 0x2284 <__fp_splitA>
    2150:	88 f0       	brcs	.+34     	; 0x2174 <__fixunssfsi+0x28>
    2152:	9f 57       	subi	r25, 0x7F	; 127
    2154:	98 f0       	brcs	.+38     	; 0x217c <__fixunssfsi+0x30>
    2156:	b9 2f       	mov	r27, r25
    2158:	99 27       	eor	r25, r25
    215a:	b7 51       	subi	r27, 0x17	; 23
    215c:	b0 f0       	brcs	.+44     	; 0x218a <__fixunssfsi+0x3e>
    215e:	e1 f0       	breq	.+56     	; 0x2198 <__fixunssfsi+0x4c>
    2160:	66 0f       	add	r22, r22
    2162:	77 1f       	adc	r23, r23
    2164:	88 1f       	adc	r24, r24
    2166:	99 1f       	adc	r25, r25
    2168:	1a f0       	brmi	.+6      	; 0x2170 <__fixunssfsi+0x24>
    216a:	ba 95       	dec	r27
    216c:	c9 f7       	brne	.-14     	; 0x2160 <__fixunssfsi+0x14>
    216e:	14 c0       	rjmp	.+40     	; 0x2198 <__fixunssfsi+0x4c>
    2170:	b1 30       	cpi	r27, 0x01	; 1
    2172:	91 f0       	breq	.+36     	; 0x2198 <__fixunssfsi+0x4c>
    2174:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__fp_zero>
    2178:	b1 e0       	ldi	r27, 0x01	; 1
    217a:	08 95       	ret
    217c:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <__fp_zero>
    2180:	67 2f       	mov	r22, r23
    2182:	78 2f       	mov	r23, r24
    2184:	88 27       	eor	r24, r24
    2186:	b8 5f       	subi	r27, 0xF8	; 248
    2188:	39 f0       	breq	.+14     	; 0x2198 <__fixunssfsi+0x4c>
    218a:	b9 3f       	cpi	r27, 0xF9	; 249
    218c:	cc f3       	brlt	.-14     	; 0x2180 <__fixunssfsi+0x34>
    218e:	86 95       	lsr	r24
    2190:	77 95       	ror	r23
    2192:	67 95       	ror	r22
    2194:	b3 95       	inc	r27
    2196:	d9 f7       	brne	.-10     	; 0x218e <__fixunssfsi+0x42>
    2198:	3e f4       	brtc	.+14     	; 0x21a8 <__fixunssfsi+0x5c>
    219a:	90 95       	com	r25
    219c:	80 95       	com	r24
    219e:	70 95       	com	r23
    21a0:	61 95       	neg	r22
    21a2:	7f 4f       	sbci	r23, 0xFF	; 255
    21a4:	8f 4f       	sbci	r24, 0xFF	; 255
    21a6:	9f 4f       	sbci	r25, 0xFF	; 255
    21a8:	08 95       	ret

000021aa <__floatunsisf>:
    21aa:	e8 94       	clt
    21ac:	09 c0       	rjmp	.+18     	; 0x21c0 <__floatsisf+0x12>

000021ae <__floatsisf>:
    21ae:	97 fb       	bst	r25, 7
    21b0:	3e f4       	brtc	.+14     	; 0x21c0 <__floatsisf+0x12>
    21b2:	90 95       	com	r25
    21b4:	80 95       	com	r24
    21b6:	70 95       	com	r23
    21b8:	61 95       	neg	r22
    21ba:	7f 4f       	sbci	r23, 0xFF	; 255
    21bc:	8f 4f       	sbci	r24, 0xFF	; 255
    21be:	9f 4f       	sbci	r25, 0xFF	; 255
    21c0:	99 23       	and	r25, r25
    21c2:	a9 f0       	breq	.+42     	; 0x21ee <__floatsisf+0x40>
    21c4:	f9 2f       	mov	r31, r25
    21c6:	96 e9       	ldi	r25, 0x96	; 150
    21c8:	bb 27       	eor	r27, r27
    21ca:	93 95       	inc	r25
    21cc:	f6 95       	lsr	r31
    21ce:	87 95       	ror	r24
    21d0:	77 95       	ror	r23
    21d2:	67 95       	ror	r22
    21d4:	b7 95       	ror	r27
    21d6:	f1 11       	cpse	r31, r1
    21d8:	f8 cf       	rjmp	.-16     	; 0x21ca <__floatsisf+0x1c>
    21da:	fa f4       	brpl	.+62     	; 0x221a <__floatsisf+0x6c>
    21dc:	bb 0f       	add	r27, r27
    21de:	11 f4       	brne	.+4      	; 0x21e4 <__floatsisf+0x36>
    21e0:	60 ff       	sbrs	r22, 0
    21e2:	1b c0       	rjmp	.+54     	; 0x221a <__floatsisf+0x6c>
    21e4:	6f 5f       	subi	r22, 0xFF	; 255
    21e6:	7f 4f       	sbci	r23, 0xFF	; 255
    21e8:	8f 4f       	sbci	r24, 0xFF	; 255
    21ea:	9f 4f       	sbci	r25, 0xFF	; 255
    21ec:	16 c0       	rjmp	.+44     	; 0x221a <__floatsisf+0x6c>
    21ee:	88 23       	and	r24, r24
    21f0:	11 f0       	breq	.+4      	; 0x21f6 <__floatsisf+0x48>
    21f2:	96 e9       	ldi	r25, 0x96	; 150
    21f4:	11 c0       	rjmp	.+34     	; 0x2218 <__floatsisf+0x6a>
    21f6:	77 23       	and	r23, r23
    21f8:	21 f0       	breq	.+8      	; 0x2202 <__floatsisf+0x54>
    21fa:	9e e8       	ldi	r25, 0x8E	; 142
    21fc:	87 2f       	mov	r24, r23
    21fe:	76 2f       	mov	r23, r22
    2200:	05 c0       	rjmp	.+10     	; 0x220c <__floatsisf+0x5e>
    2202:	66 23       	and	r22, r22
    2204:	71 f0       	breq	.+28     	; 0x2222 <__floatsisf+0x74>
    2206:	96 e8       	ldi	r25, 0x86	; 134
    2208:	86 2f       	mov	r24, r22
    220a:	70 e0       	ldi	r23, 0x00	; 0
    220c:	60 e0       	ldi	r22, 0x00	; 0
    220e:	2a f0       	brmi	.+10     	; 0x221a <__floatsisf+0x6c>
    2210:	9a 95       	dec	r25
    2212:	66 0f       	add	r22, r22
    2214:	77 1f       	adc	r23, r23
    2216:	88 1f       	adc	r24, r24
    2218:	da f7       	brpl	.-10     	; 0x2210 <__floatsisf+0x62>
    221a:	88 0f       	add	r24, r24
    221c:	96 95       	lsr	r25
    221e:	87 95       	ror	r24
    2220:	97 f9       	bld	r25, 7
    2222:	08 95       	ret

00002224 <__fp_inf>:
    2224:	97 f9       	bld	r25, 7
    2226:	9f 67       	ori	r25, 0x7F	; 127
    2228:	80 e8       	ldi	r24, 0x80	; 128
    222a:	70 e0       	ldi	r23, 0x00	; 0
    222c:	60 e0       	ldi	r22, 0x00	; 0
    222e:	08 95       	ret

00002230 <__fp_nan>:
    2230:	9f ef       	ldi	r25, 0xFF	; 255
    2232:	80 ec       	ldi	r24, 0xC0	; 192
    2234:	08 95       	ret

00002236 <__fp_pscA>:
    2236:	00 24       	eor	r0, r0
    2238:	0a 94       	dec	r0
    223a:	16 16       	cp	r1, r22
    223c:	17 06       	cpc	r1, r23
    223e:	18 06       	cpc	r1, r24
    2240:	09 06       	cpc	r0, r25
    2242:	08 95       	ret

00002244 <__fp_pscB>:
    2244:	00 24       	eor	r0, r0
    2246:	0a 94       	dec	r0
    2248:	12 16       	cp	r1, r18
    224a:	13 06       	cpc	r1, r19
    224c:	14 06       	cpc	r1, r20
    224e:	05 06       	cpc	r0, r21
    2250:	08 95       	ret

00002252 <__fp_round>:
    2252:	09 2e       	mov	r0, r25
    2254:	03 94       	inc	r0
    2256:	00 0c       	add	r0, r0
    2258:	11 f4       	brne	.+4      	; 0x225e <__fp_round+0xc>
    225a:	88 23       	and	r24, r24
    225c:	52 f0       	brmi	.+20     	; 0x2272 <__fp_round+0x20>
    225e:	bb 0f       	add	r27, r27
    2260:	40 f4       	brcc	.+16     	; 0x2272 <__fp_round+0x20>
    2262:	bf 2b       	or	r27, r31
    2264:	11 f4       	brne	.+4      	; 0x226a <__fp_round+0x18>
    2266:	60 ff       	sbrs	r22, 0
    2268:	04 c0       	rjmp	.+8      	; 0x2272 <__fp_round+0x20>
    226a:	6f 5f       	subi	r22, 0xFF	; 255
    226c:	7f 4f       	sbci	r23, 0xFF	; 255
    226e:	8f 4f       	sbci	r24, 0xFF	; 255
    2270:	9f 4f       	sbci	r25, 0xFF	; 255
    2272:	08 95       	ret

00002274 <__fp_split3>:
    2274:	57 fd       	sbrc	r21, 7
    2276:	90 58       	subi	r25, 0x80	; 128
    2278:	44 0f       	add	r20, r20
    227a:	55 1f       	adc	r21, r21
    227c:	59 f0       	breq	.+22     	; 0x2294 <__fp_splitA+0x10>
    227e:	5f 3f       	cpi	r21, 0xFF	; 255
    2280:	71 f0       	breq	.+28     	; 0x229e <__fp_splitA+0x1a>
    2282:	47 95       	ror	r20

00002284 <__fp_splitA>:
    2284:	88 0f       	add	r24, r24
    2286:	97 fb       	bst	r25, 7
    2288:	99 1f       	adc	r25, r25
    228a:	61 f0       	breq	.+24     	; 0x22a4 <__fp_splitA+0x20>
    228c:	9f 3f       	cpi	r25, 0xFF	; 255
    228e:	79 f0       	breq	.+30     	; 0x22ae <__fp_splitA+0x2a>
    2290:	87 95       	ror	r24
    2292:	08 95       	ret
    2294:	12 16       	cp	r1, r18
    2296:	13 06       	cpc	r1, r19
    2298:	14 06       	cpc	r1, r20
    229a:	55 1f       	adc	r21, r21
    229c:	f2 cf       	rjmp	.-28     	; 0x2282 <__fp_split3+0xe>
    229e:	46 95       	lsr	r20
    22a0:	f1 df       	rcall	.-30     	; 0x2284 <__fp_splitA>
    22a2:	08 c0       	rjmp	.+16     	; 0x22b4 <__fp_splitA+0x30>
    22a4:	16 16       	cp	r1, r22
    22a6:	17 06       	cpc	r1, r23
    22a8:	18 06       	cpc	r1, r24
    22aa:	99 1f       	adc	r25, r25
    22ac:	f1 cf       	rjmp	.-30     	; 0x2290 <__fp_splitA+0xc>
    22ae:	86 95       	lsr	r24
    22b0:	71 05       	cpc	r23, r1
    22b2:	61 05       	cpc	r22, r1
    22b4:	08 94       	sec
    22b6:	08 95       	ret

000022b8 <__fp_zero>:
    22b8:	e8 94       	clt

000022ba <__fp_szero>:
    22ba:	bb 27       	eor	r27, r27
    22bc:	66 27       	eor	r22, r22
    22be:	77 27       	eor	r23, r23
    22c0:	cb 01       	movw	r24, r22
    22c2:	97 f9       	bld	r25, 7
    22c4:	08 95       	ret

000022c6 <__mulsf3>:
    22c6:	0e 94 76 11 	call	0x22ec	; 0x22ec <__mulsf3x>
    22ca:	0c 94 29 11 	jmp	0x2252	; 0x2252 <__fp_round>
    22ce:	0e 94 1b 11 	call	0x2236	; 0x2236 <__fp_pscA>
    22d2:	38 f0       	brcs	.+14     	; 0x22e2 <__mulsf3+0x1c>
    22d4:	0e 94 22 11 	call	0x2244	; 0x2244 <__fp_pscB>
    22d8:	20 f0       	brcs	.+8      	; 0x22e2 <__mulsf3+0x1c>
    22da:	95 23       	and	r25, r21
    22dc:	11 f0       	breq	.+4      	; 0x22e2 <__mulsf3+0x1c>
    22de:	0c 94 12 11 	jmp	0x2224	; 0x2224 <__fp_inf>
    22e2:	0c 94 18 11 	jmp	0x2230	; 0x2230 <__fp_nan>
    22e6:	11 24       	eor	r1, r1
    22e8:	0c 94 5d 11 	jmp	0x22ba	; 0x22ba <__fp_szero>

000022ec <__mulsf3x>:
    22ec:	0e 94 3a 11 	call	0x2274	; 0x2274 <__fp_split3>
    22f0:	70 f3       	brcs	.-36     	; 0x22ce <__mulsf3+0x8>

000022f2 <__mulsf3_pse>:
    22f2:	95 9f       	mul	r25, r21
    22f4:	c1 f3       	breq	.-16     	; 0x22e6 <__mulsf3+0x20>
    22f6:	95 0f       	add	r25, r21
    22f8:	50 e0       	ldi	r21, 0x00	; 0
    22fa:	55 1f       	adc	r21, r21
    22fc:	62 9f       	mul	r22, r18
    22fe:	f0 01       	movw	r30, r0
    2300:	72 9f       	mul	r23, r18
    2302:	bb 27       	eor	r27, r27
    2304:	f0 0d       	add	r31, r0
    2306:	b1 1d       	adc	r27, r1
    2308:	63 9f       	mul	r22, r19
    230a:	aa 27       	eor	r26, r26
    230c:	f0 0d       	add	r31, r0
    230e:	b1 1d       	adc	r27, r1
    2310:	aa 1f       	adc	r26, r26
    2312:	64 9f       	mul	r22, r20
    2314:	66 27       	eor	r22, r22
    2316:	b0 0d       	add	r27, r0
    2318:	a1 1d       	adc	r26, r1
    231a:	66 1f       	adc	r22, r22
    231c:	82 9f       	mul	r24, r18
    231e:	22 27       	eor	r18, r18
    2320:	b0 0d       	add	r27, r0
    2322:	a1 1d       	adc	r26, r1
    2324:	62 1f       	adc	r22, r18
    2326:	73 9f       	mul	r23, r19
    2328:	b0 0d       	add	r27, r0
    232a:	a1 1d       	adc	r26, r1
    232c:	62 1f       	adc	r22, r18
    232e:	83 9f       	mul	r24, r19
    2330:	a0 0d       	add	r26, r0
    2332:	61 1d       	adc	r22, r1
    2334:	22 1f       	adc	r18, r18
    2336:	74 9f       	mul	r23, r20
    2338:	33 27       	eor	r19, r19
    233a:	a0 0d       	add	r26, r0
    233c:	61 1d       	adc	r22, r1
    233e:	23 1f       	adc	r18, r19
    2340:	84 9f       	mul	r24, r20
    2342:	60 0d       	add	r22, r0
    2344:	21 1d       	adc	r18, r1
    2346:	82 2f       	mov	r24, r18
    2348:	76 2f       	mov	r23, r22
    234a:	6a 2f       	mov	r22, r26
    234c:	11 24       	eor	r1, r1
    234e:	9f 57       	subi	r25, 0x7F	; 127
    2350:	50 40       	sbci	r21, 0x00	; 0
    2352:	9a f0       	brmi	.+38     	; 0x237a <__mulsf3_pse+0x88>
    2354:	f1 f0       	breq	.+60     	; 0x2392 <__mulsf3_pse+0xa0>
    2356:	88 23       	and	r24, r24
    2358:	4a f0       	brmi	.+18     	; 0x236c <__mulsf3_pse+0x7a>
    235a:	ee 0f       	add	r30, r30
    235c:	ff 1f       	adc	r31, r31
    235e:	bb 1f       	adc	r27, r27
    2360:	66 1f       	adc	r22, r22
    2362:	77 1f       	adc	r23, r23
    2364:	88 1f       	adc	r24, r24
    2366:	91 50       	subi	r25, 0x01	; 1
    2368:	50 40       	sbci	r21, 0x00	; 0
    236a:	a9 f7       	brne	.-22     	; 0x2356 <__mulsf3_pse+0x64>
    236c:	9e 3f       	cpi	r25, 0xFE	; 254
    236e:	51 05       	cpc	r21, r1
    2370:	80 f0       	brcs	.+32     	; 0x2392 <__mulsf3_pse+0xa0>
    2372:	0c 94 12 11 	jmp	0x2224	; 0x2224 <__fp_inf>
    2376:	0c 94 5d 11 	jmp	0x22ba	; 0x22ba <__fp_szero>
    237a:	5f 3f       	cpi	r21, 0xFF	; 255
    237c:	e4 f3       	brlt	.-8      	; 0x2376 <__mulsf3_pse+0x84>
    237e:	98 3e       	cpi	r25, 0xE8	; 232
    2380:	d4 f3       	brlt	.-12     	; 0x2376 <__mulsf3_pse+0x84>
    2382:	86 95       	lsr	r24
    2384:	77 95       	ror	r23
    2386:	67 95       	ror	r22
    2388:	b7 95       	ror	r27
    238a:	f7 95       	ror	r31
    238c:	e7 95       	ror	r30
    238e:	9f 5f       	subi	r25, 0xFF	; 255
    2390:	c1 f7       	brne	.-16     	; 0x2382 <__mulsf3_pse+0x90>
    2392:	fe 2b       	or	r31, r30
    2394:	88 0f       	add	r24, r24
    2396:	91 1d       	adc	r25, r1
    2398:	96 95       	lsr	r25
    239a:	87 95       	ror	r24
    239c:	97 f9       	bld	r25, 7
    239e:	08 95       	ret

000023a0 <__udivmodsi4>:
    23a0:	a1 e2       	ldi	r26, 0x21	; 33
    23a2:	1a 2e       	mov	r1, r26
    23a4:	aa 1b       	sub	r26, r26
    23a6:	bb 1b       	sub	r27, r27
    23a8:	fd 01       	movw	r30, r26
    23aa:	0d c0       	rjmp	.+26     	; 0x23c6 <__udivmodsi4_ep>

000023ac <__udivmodsi4_loop>:
    23ac:	aa 1f       	adc	r26, r26
    23ae:	bb 1f       	adc	r27, r27
    23b0:	ee 1f       	adc	r30, r30
    23b2:	ff 1f       	adc	r31, r31
    23b4:	a2 17       	cp	r26, r18
    23b6:	b3 07       	cpc	r27, r19
    23b8:	e4 07       	cpc	r30, r20
    23ba:	f5 07       	cpc	r31, r21
    23bc:	20 f0       	brcs	.+8      	; 0x23c6 <__udivmodsi4_ep>
    23be:	a2 1b       	sub	r26, r18
    23c0:	b3 0b       	sbc	r27, r19
    23c2:	e4 0b       	sbc	r30, r20
    23c4:	f5 0b       	sbc	r31, r21

000023c6 <__udivmodsi4_ep>:
    23c6:	66 1f       	adc	r22, r22
    23c8:	77 1f       	adc	r23, r23
    23ca:	88 1f       	adc	r24, r24
    23cc:	99 1f       	adc	r25, r25
    23ce:	1a 94       	dec	r1
    23d0:	69 f7       	brne	.-38     	; 0x23ac <__udivmodsi4_loop>
    23d2:	60 95       	com	r22
    23d4:	70 95       	com	r23
    23d6:	80 95       	com	r24
    23d8:	90 95       	com	r25
    23da:	9b 01       	movw	r18, r22
    23dc:	ac 01       	movw	r20, r24
    23de:	bd 01       	movw	r22, r26
    23e0:	cf 01       	movw	r24, r30
    23e2:	08 95       	ret

000023e4 <__divmodsi4>:
    23e4:	05 2e       	mov	r0, r21
    23e6:	97 fb       	bst	r25, 7
    23e8:	1e f4       	brtc	.+6      	; 0x23f0 <__divmodsi4+0xc>
    23ea:	00 94       	com	r0
    23ec:	0e 94 09 12 	call	0x2412	; 0x2412 <__negsi2>
    23f0:	57 fd       	sbrc	r21, 7
    23f2:	07 d0       	rcall	.+14     	; 0x2402 <__divmodsi4_neg2>
    23f4:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <__udivmodsi4>
    23f8:	07 fc       	sbrc	r0, 7
    23fa:	03 d0       	rcall	.+6      	; 0x2402 <__divmodsi4_neg2>
    23fc:	4e f4       	brtc	.+18     	; 0x2410 <__divmodsi4_exit>
    23fe:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__negsi2>

00002402 <__divmodsi4_neg2>:
    2402:	50 95       	com	r21
    2404:	40 95       	com	r20
    2406:	30 95       	com	r19
    2408:	21 95       	neg	r18
    240a:	3f 4f       	sbci	r19, 0xFF	; 255
    240c:	4f 4f       	sbci	r20, 0xFF	; 255
    240e:	5f 4f       	sbci	r21, 0xFF	; 255

00002410 <__divmodsi4_exit>:
    2410:	08 95       	ret

00002412 <__negsi2>:
    2412:	90 95       	com	r25
    2414:	80 95       	com	r24
    2416:	70 95       	com	r23
    2418:	61 95       	neg	r22
    241a:	7f 4f       	sbci	r23, 0xFF	; 255
    241c:	8f 4f       	sbci	r24, 0xFF	; 255
    241e:	9f 4f       	sbci	r25, 0xFF	; 255
    2420:	08 95       	ret

00002422 <__tablejump2__>:
    2422:	ee 0f       	add	r30, r30
    2424:	ff 1f       	adc	r31, r31
    2426:	05 90       	lpm	r0, Z+
    2428:	f4 91       	lpm	r31, Z
    242a:	e0 2d       	mov	r30, r0
    242c:	09 94       	ijmp

0000242e <fgetc>:
    242e:	cf 93       	push	r28
    2430:	df 93       	push	r29
    2432:	ec 01       	movw	r28, r24
    2434:	2b 81       	ldd	r18, Y+3	; 0x03
    2436:	20 ff       	sbrs	r18, 0
    2438:	33 c0       	rjmp	.+102    	; 0x24a0 <fgetc+0x72>
    243a:	26 ff       	sbrs	r18, 6
    243c:	0a c0       	rjmp	.+20     	; 0x2452 <fgetc+0x24>
    243e:	2f 7b       	andi	r18, 0xBF	; 191
    2440:	2b 83       	std	Y+3, r18	; 0x03
    2442:	8e 81       	ldd	r24, Y+6	; 0x06
    2444:	9f 81       	ldd	r25, Y+7	; 0x07
    2446:	01 96       	adiw	r24, 0x01	; 1
    2448:	9f 83       	std	Y+7, r25	; 0x07
    244a:	8e 83       	std	Y+6, r24	; 0x06
    244c:	8a 81       	ldd	r24, Y+2	; 0x02
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	29 c0       	rjmp	.+82     	; 0x24a4 <fgetc+0x76>
    2452:	22 ff       	sbrs	r18, 2
    2454:	0f c0       	rjmp	.+30     	; 0x2474 <fgetc+0x46>
    2456:	e8 81       	ld	r30, Y
    2458:	f9 81       	ldd	r31, Y+1	; 0x01
    245a:	80 81       	ld	r24, Z
    245c:	08 2e       	mov	r0, r24
    245e:	00 0c       	add	r0, r0
    2460:	99 0b       	sbc	r25, r25
    2462:	00 97       	sbiw	r24, 0x00	; 0
    2464:	19 f4       	brne	.+6      	; 0x246c <fgetc+0x3e>
    2466:	20 62       	ori	r18, 0x20	; 32
    2468:	2b 83       	std	Y+3, r18	; 0x03
    246a:	1a c0       	rjmp	.+52     	; 0x24a0 <fgetc+0x72>
    246c:	31 96       	adiw	r30, 0x01	; 1
    246e:	f9 83       	std	Y+1, r31	; 0x01
    2470:	e8 83       	st	Y, r30
    2472:	0e c0       	rjmp	.+28     	; 0x2490 <fgetc+0x62>
    2474:	ea 85       	ldd	r30, Y+10	; 0x0a
    2476:	fb 85       	ldd	r31, Y+11	; 0x0b
    2478:	09 95       	icall
    247a:	97 ff       	sbrs	r25, 7
    247c:	09 c0       	rjmp	.+18     	; 0x2490 <fgetc+0x62>
    247e:	2b 81       	ldd	r18, Y+3	; 0x03
    2480:	01 96       	adiw	r24, 0x01	; 1
    2482:	11 f0       	breq	.+4      	; 0x2488 <fgetc+0x5a>
    2484:	80 e2       	ldi	r24, 0x20	; 32
    2486:	01 c0       	rjmp	.+2      	; 0x248a <fgetc+0x5c>
    2488:	80 e1       	ldi	r24, 0x10	; 16
    248a:	82 2b       	or	r24, r18
    248c:	8b 83       	std	Y+3, r24	; 0x03
    248e:	08 c0       	rjmp	.+16     	; 0x24a0 <fgetc+0x72>
    2490:	2e 81       	ldd	r18, Y+6	; 0x06
    2492:	3f 81       	ldd	r19, Y+7	; 0x07
    2494:	2f 5f       	subi	r18, 0xFF	; 255
    2496:	3f 4f       	sbci	r19, 0xFF	; 255
    2498:	3f 83       	std	Y+7, r19	; 0x07
    249a:	2e 83       	std	Y+6, r18	; 0x06
    249c:	99 27       	eor	r25, r25
    249e:	02 c0       	rjmp	.+4      	; 0x24a4 <fgetc+0x76>
    24a0:	8f ef       	ldi	r24, 0xFF	; 255
    24a2:	9f ef       	ldi	r25, 0xFF	; 255
    24a4:	df 91       	pop	r29
    24a6:	cf 91       	pop	r28
    24a8:	08 95       	ret

000024aa <printf_P>:
    24aa:	a0 e0       	ldi	r26, 0x00	; 0
    24ac:	b0 e0       	ldi	r27, 0x00	; 0
    24ae:	eb e5       	ldi	r30, 0x5B	; 91
    24b0:	f2 e1       	ldi	r31, 0x12	; 18
    24b2:	0c 94 1a 15 	jmp	0x2a34	; 0x2a34 <__prologue_saves__+0x1c>
    24b6:	ae 01       	movw	r20, r28
    24b8:	49 5f       	subi	r20, 0xF9	; 249
    24ba:	5f 4f       	sbci	r21, 0xFF	; 255
    24bc:	da 01       	movw	r26, r20
    24be:	6d 91       	ld	r22, X+
    24c0:	7d 91       	ld	r23, X+
    24c2:	ad 01       	movw	r20, r26
    24c4:	01 e9       	ldi	r16, 0x91	; 145
    24c6:	16 e0       	ldi	r17, 0x06	; 6
    24c8:	f8 01       	movw	r30, r16
    24ca:	82 81       	ldd	r24, Z+2	; 0x02
    24cc:	93 81       	ldd	r25, Z+3	; 0x03
    24ce:	dc 01       	movw	r26, r24
    24d0:	13 96       	adiw	r26, 0x03	; 3
    24d2:	2c 91       	ld	r18, X
    24d4:	13 97       	sbiw	r26, 0x03	; 3
    24d6:	28 60       	ori	r18, 0x08	; 8
    24d8:	13 96       	adiw	r26, 0x03	; 3
    24da:	2c 93       	st	X, r18
    24dc:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <vfprintf>
    24e0:	d8 01       	movw	r26, r16
    24e2:	12 96       	adiw	r26, 0x02	; 2
    24e4:	ed 91       	ld	r30, X+
    24e6:	fc 91       	ld	r31, X
    24e8:	13 97       	sbiw	r26, 0x03	; 3
    24ea:	23 81       	ldd	r18, Z+3	; 0x03
    24ec:	27 7f       	andi	r18, 0xF7	; 247
    24ee:	23 83       	std	Z+3, r18	; 0x03
    24f0:	e4 e0       	ldi	r30, 0x04	; 4
    24f2:	0c 94 36 15 	jmp	0x2a6c	; 0x2a6c <__epilogue_restores__+0x1c>

000024f6 <vfprintf>:
    24f6:	ab e0       	ldi	r26, 0x0B	; 11
    24f8:	b0 e0       	ldi	r27, 0x00	; 0
    24fa:	e1 e8       	ldi	r30, 0x81	; 129
    24fc:	f2 e1       	ldi	r31, 0x12	; 18
    24fe:	0c 94 0c 15 	jmp	0x2a18	; 0x2a18 <__prologue_saves__>
    2502:	6c 01       	movw	r12, r24
    2504:	7b 01       	movw	r14, r22
    2506:	8a 01       	movw	r16, r20
    2508:	fc 01       	movw	r30, r24
    250a:	17 82       	std	Z+7, r1	; 0x07
    250c:	16 82       	std	Z+6, r1	; 0x06
    250e:	83 81       	ldd	r24, Z+3	; 0x03
    2510:	81 ff       	sbrs	r24, 1
    2512:	cc c1       	rjmp	.+920    	; 0x28ac <vfprintf+0x3b6>
    2514:	ce 01       	movw	r24, r28
    2516:	01 96       	adiw	r24, 0x01	; 1
    2518:	3c 01       	movw	r6, r24
    251a:	f6 01       	movw	r30, r12
    251c:	93 81       	ldd	r25, Z+3	; 0x03
    251e:	f7 01       	movw	r30, r14
    2520:	93 fd       	sbrc	r25, 3
    2522:	85 91       	lpm	r24, Z+
    2524:	93 ff       	sbrs	r25, 3
    2526:	81 91       	ld	r24, Z+
    2528:	7f 01       	movw	r14, r30
    252a:	88 23       	and	r24, r24
    252c:	09 f4       	brne	.+2      	; 0x2530 <vfprintf+0x3a>
    252e:	ba c1       	rjmp	.+884    	; 0x28a4 <vfprintf+0x3ae>
    2530:	85 32       	cpi	r24, 0x25	; 37
    2532:	39 f4       	brne	.+14     	; 0x2542 <vfprintf+0x4c>
    2534:	93 fd       	sbrc	r25, 3
    2536:	85 91       	lpm	r24, Z+
    2538:	93 ff       	sbrs	r25, 3
    253a:	81 91       	ld	r24, Z+
    253c:	7f 01       	movw	r14, r30
    253e:	85 32       	cpi	r24, 0x25	; 37
    2540:	29 f4       	brne	.+10     	; 0x254c <vfprintf+0x56>
    2542:	b6 01       	movw	r22, r12
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	0e 94 72 14 	call	0x28e4	; 0x28e4 <fputc>
    254a:	e7 cf       	rjmp	.-50     	; 0x251a <vfprintf+0x24>
    254c:	91 2c       	mov	r9, r1
    254e:	21 2c       	mov	r2, r1
    2550:	31 2c       	mov	r3, r1
    2552:	ff e1       	ldi	r31, 0x1F	; 31
    2554:	f3 15       	cp	r31, r3
    2556:	d8 f0       	brcs	.+54     	; 0x258e <vfprintf+0x98>
    2558:	8b 32       	cpi	r24, 0x2B	; 43
    255a:	79 f0       	breq	.+30     	; 0x257a <vfprintf+0x84>
    255c:	38 f4       	brcc	.+14     	; 0x256c <vfprintf+0x76>
    255e:	80 32       	cpi	r24, 0x20	; 32
    2560:	79 f0       	breq	.+30     	; 0x2580 <vfprintf+0x8a>
    2562:	83 32       	cpi	r24, 0x23	; 35
    2564:	a1 f4       	brne	.+40     	; 0x258e <vfprintf+0x98>
    2566:	23 2d       	mov	r18, r3
    2568:	20 61       	ori	r18, 0x10	; 16
    256a:	1d c0       	rjmp	.+58     	; 0x25a6 <vfprintf+0xb0>
    256c:	8d 32       	cpi	r24, 0x2D	; 45
    256e:	61 f0       	breq	.+24     	; 0x2588 <vfprintf+0x92>
    2570:	80 33       	cpi	r24, 0x30	; 48
    2572:	69 f4       	brne	.+26     	; 0x258e <vfprintf+0x98>
    2574:	23 2d       	mov	r18, r3
    2576:	21 60       	ori	r18, 0x01	; 1
    2578:	16 c0       	rjmp	.+44     	; 0x25a6 <vfprintf+0xb0>
    257a:	83 2d       	mov	r24, r3
    257c:	82 60       	ori	r24, 0x02	; 2
    257e:	38 2e       	mov	r3, r24
    2580:	e3 2d       	mov	r30, r3
    2582:	e4 60       	ori	r30, 0x04	; 4
    2584:	3e 2e       	mov	r3, r30
    2586:	2a c0       	rjmp	.+84     	; 0x25dc <vfprintf+0xe6>
    2588:	f3 2d       	mov	r31, r3
    258a:	f8 60       	ori	r31, 0x08	; 8
    258c:	1d c0       	rjmp	.+58     	; 0x25c8 <vfprintf+0xd2>
    258e:	37 fc       	sbrc	r3, 7
    2590:	2d c0       	rjmp	.+90     	; 0x25ec <vfprintf+0xf6>
    2592:	20 ed       	ldi	r18, 0xD0	; 208
    2594:	28 0f       	add	r18, r24
    2596:	2a 30       	cpi	r18, 0x0A	; 10
    2598:	40 f0       	brcs	.+16     	; 0x25aa <vfprintf+0xb4>
    259a:	8e 32       	cpi	r24, 0x2E	; 46
    259c:	b9 f4       	brne	.+46     	; 0x25cc <vfprintf+0xd6>
    259e:	36 fc       	sbrc	r3, 6
    25a0:	81 c1       	rjmp	.+770    	; 0x28a4 <vfprintf+0x3ae>
    25a2:	23 2d       	mov	r18, r3
    25a4:	20 64       	ori	r18, 0x40	; 64
    25a6:	32 2e       	mov	r3, r18
    25a8:	19 c0       	rjmp	.+50     	; 0x25dc <vfprintf+0xe6>
    25aa:	36 fe       	sbrs	r3, 6
    25ac:	06 c0       	rjmp	.+12     	; 0x25ba <vfprintf+0xc4>
    25ae:	8a e0       	ldi	r24, 0x0A	; 10
    25b0:	98 9e       	mul	r9, r24
    25b2:	20 0d       	add	r18, r0
    25b4:	11 24       	eor	r1, r1
    25b6:	92 2e       	mov	r9, r18
    25b8:	11 c0       	rjmp	.+34     	; 0x25dc <vfprintf+0xe6>
    25ba:	ea e0       	ldi	r30, 0x0A	; 10
    25bc:	2e 9e       	mul	r2, r30
    25be:	20 0d       	add	r18, r0
    25c0:	11 24       	eor	r1, r1
    25c2:	22 2e       	mov	r2, r18
    25c4:	f3 2d       	mov	r31, r3
    25c6:	f0 62       	ori	r31, 0x20	; 32
    25c8:	3f 2e       	mov	r3, r31
    25ca:	08 c0       	rjmp	.+16     	; 0x25dc <vfprintf+0xe6>
    25cc:	8c 36       	cpi	r24, 0x6C	; 108
    25ce:	21 f4       	brne	.+8      	; 0x25d8 <vfprintf+0xe2>
    25d0:	83 2d       	mov	r24, r3
    25d2:	80 68       	ori	r24, 0x80	; 128
    25d4:	38 2e       	mov	r3, r24
    25d6:	02 c0       	rjmp	.+4      	; 0x25dc <vfprintf+0xe6>
    25d8:	88 36       	cpi	r24, 0x68	; 104
    25da:	41 f4       	brne	.+16     	; 0x25ec <vfprintf+0xf6>
    25dc:	f7 01       	movw	r30, r14
    25de:	93 fd       	sbrc	r25, 3
    25e0:	85 91       	lpm	r24, Z+
    25e2:	93 ff       	sbrs	r25, 3
    25e4:	81 91       	ld	r24, Z+
    25e6:	7f 01       	movw	r14, r30
    25e8:	81 11       	cpse	r24, r1
    25ea:	b3 cf       	rjmp	.-154    	; 0x2552 <vfprintf+0x5c>
    25ec:	98 2f       	mov	r25, r24
    25ee:	9f 7d       	andi	r25, 0xDF	; 223
    25f0:	95 54       	subi	r25, 0x45	; 69
    25f2:	93 30       	cpi	r25, 0x03	; 3
    25f4:	28 f4       	brcc	.+10     	; 0x2600 <vfprintf+0x10a>
    25f6:	0c 5f       	subi	r16, 0xFC	; 252
    25f8:	1f 4f       	sbci	r17, 0xFF	; 255
    25fa:	9f e3       	ldi	r25, 0x3F	; 63
    25fc:	99 83       	std	Y+1, r25	; 0x01
    25fe:	0d c0       	rjmp	.+26     	; 0x261a <vfprintf+0x124>
    2600:	83 36       	cpi	r24, 0x63	; 99
    2602:	31 f0       	breq	.+12     	; 0x2610 <vfprintf+0x11a>
    2604:	83 37       	cpi	r24, 0x73	; 115
    2606:	71 f0       	breq	.+28     	; 0x2624 <vfprintf+0x12e>
    2608:	83 35       	cpi	r24, 0x53	; 83
    260a:	09 f0       	breq	.+2      	; 0x260e <vfprintf+0x118>
    260c:	59 c0       	rjmp	.+178    	; 0x26c0 <vfprintf+0x1ca>
    260e:	21 c0       	rjmp	.+66     	; 0x2652 <vfprintf+0x15c>
    2610:	f8 01       	movw	r30, r16
    2612:	80 81       	ld	r24, Z
    2614:	89 83       	std	Y+1, r24	; 0x01
    2616:	0e 5f       	subi	r16, 0xFE	; 254
    2618:	1f 4f       	sbci	r17, 0xFF	; 255
    261a:	88 24       	eor	r8, r8
    261c:	83 94       	inc	r8
    261e:	91 2c       	mov	r9, r1
    2620:	53 01       	movw	r10, r6
    2622:	13 c0       	rjmp	.+38     	; 0x264a <vfprintf+0x154>
    2624:	28 01       	movw	r4, r16
    2626:	f2 e0       	ldi	r31, 0x02	; 2
    2628:	4f 0e       	add	r4, r31
    262a:	51 1c       	adc	r5, r1
    262c:	f8 01       	movw	r30, r16
    262e:	a0 80       	ld	r10, Z
    2630:	b1 80       	ldd	r11, Z+1	; 0x01
    2632:	36 fe       	sbrs	r3, 6
    2634:	03 c0       	rjmp	.+6      	; 0x263c <vfprintf+0x146>
    2636:	69 2d       	mov	r22, r9
    2638:	70 e0       	ldi	r23, 0x00	; 0
    263a:	02 c0       	rjmp	.+4      	; 0x2640 <vfprintf+0x14a>
    263c:	6f ef       	ldi	r22, 0xFF	; 255
    263e:	7f ef       	ldi	r23, 0xFF	; 255
    2640:	c5 01       	movw	r24, r10
    2642:	0e 94 67 14 	call	0x28ce	; 0x28ce <strnlen>
    2646:	4c 01       	movw	r8, r24
    2648:	82 01       	movw	r16, r4
    264a:	f3 2d       	mov	r31, r3
    264c:	ff 77       	andi	r31, 0x7F	; 127
    264e:	3f 2e       	mov	r3, r31
    2650:	16 c0       	rjmp	.+44     	; 0x267e <vfprintf+0x188>
    2652:	28 01       	movw	r4, r16
    2654:	22 e0       	ldi	r18, 0x02	; 2
    2656:	42 0e       	add	r4, r18
    2658:	51 1c       	adc	r5, r1
    265a:	f8 01       	movw	r30, r16
    265c:	a0 80       	ld	r10, Z
    265e:	b1 80       	ldd	r11, Z+1	; 0x01
    2660:	36 fe       	sbrs	r3, 6
    2662:	03 c0       	rjmp	.+6      	; 0x266a <vfprintf+0x174>
    2664:	69 2d       	mov	r22, r9
    2666:	70 e0       	ldi	r23, 0x00	; 0
    2668:	02 c0       	rjmp	.+4      	; 0x266e <vfprintf+0x178>
    266a:	6f ef       	ldi	r22, 0xFF	; 255
    266c:	7f ef       	ldi	r23, 0xFF	; 255
    266e:	c5 01       	movw	r24, r10
    2670:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <strnlen_P>
    2674:	4c 01       	movw	r8, r24
    2676:	f3 2d       	mov	r31, r3
    2678:	f0 68       	ori	r31, 0x80	; 128
    267a:	3f 2e       	mov	r3, r31
    267c:	82 01       	movw	r16, r4
    267e:	33 fc       	sbrc	r3, 3
    2680:	1b c0       	rjmp	.+54     	; 0x26b8 <vfprintf+0x1c2>
    2682:	82 2d       	mov	r24, r2
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	88 16       	cp	r8, r24
    2688:	99 06       	cpc	r9, r25
    268a:	b0 f4       	brcc	.+44     	; 0x26b8 <vfprintf+0x1c2>
    268c:	b6 01       	movw	r22, r12
    268e:	80 e2       	ldi	r24, 0x20	; 32
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	0e 94 72 14 	call	0x28e4	; 0x28e4 <fputc>
    2696:	2a 94       	dec	r2
    2698:	f4 cf       	rjmp	.-24     	; 0x2682 <vfprintf+0x18c>
    269a:	f5 01       	movw	r30, r10
    269c:	37 fc       	sbrc	r3, 7
    269e:	85 91       	lpm	r24, Z+
    26a0:	37 fe       	sbrs	r3, 7
    26a2:	81 91       	ld	r24, Z+
    26a4:	5f 01       	movw	r10, r30
    26a6:	b6 01       	movw	r22, r12
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	0e 94 72 14 	call	0x28e4	; 0x28e4 <fputc>
    26ae:	21 10       	cpse	r2, r1
    26b0:	2a 94       	dec	r2
    26b2:	21 e0       	ldi	r18, 0x01	; 1
    26b4:	82 1a       	sub	r8, r18
    26b6:	91 08       	sbc	r9, r1
    26b8:	81 14       	cp	r8, r1
    26ba:	91 04       	cpc	r9, r1
    26bc:	71 f7       	brne	.-36     	; 0x269a <vfprintf+0x1a4>
    26be:	e8 c0       	rjmp	.+464    	; 0x2890 <vfprintf+0x39a>
    26c0:	84 36       	cpi	r24, 0x64	; 100
    26c2:	11 f0       	breq	.+4      	; 0x26c8 <vfprintf+0x1d2>
    26c4:	89 36       	cpi	r24, 0x69	; 105
    26c6:	41 f5       	brne	.+80     	; 0x2718 <vfprintf+0x222>
    26c8:	f8 01       	movw	r30, r16
    26ca:	37 fe       	sbrs	r3, 7
    26cc:	07 c0       	rjmp	.+14     	; 0x26dc <vfprintf+0x1e6>
    26ce:	60 81       	ld	r22, Z
    26d0:	71 81       	ldd	r23, Z+1	; 0x01
    26d2:	82 81       	ldd	r24, Z+2	; 0x02
    26d4:	93 81       	ldd	r25, Z+3	; 0x03
    26d6:	0c 5f       	subi	r16, 0xFC	; 252
    26d8:	1f 4f       	sbci	r17, 0xFF	; 255
    26da:	08 c0       	rjmp	.+16     	; 0x26ec <vfprintf+0x1f6>
    26dc:	60 81       	ld	r22, Z
    26de:	71 81       	ldd	r23, Z+1	; 0x01
    26e0:	07 2e       	mov	r0, r23
    26e2:	00 0c       	add	r0, r0
    26e4:	88 0b       	sbc	r24, r24
    26e6:	99 0b       	sbc	r25, r25
    26e8:	0e 5f       	subi	r16, 0xFE	; 254
    26ea:	1f 4f       	sbci	r17, 0xFF	; 255
    26ec:	f3 2d       	mov	r31, r3
    26ee:	ff 76       	andi	r31, 0x6F	; 111
    26f0:	3f 2e       	mov	r3, r31
    26f2:	97 ff       	sbrs	r25, 7
    26f4:	09 c0       	rjmp	.+18     	; 0x2708 <vfprintf+0x212>
    26f6:	90 95       	com	r25
    26f8:	80 95       	com	r24
    26fa:	70 95       	com	r23
    26fc:	61 95       	neg	r22
    26fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2700:	8f 4f       	sbci	r24, 0xFF	; 255
    2702:	9f 4f       	sbci	r25, 0xFF	; 255
    2704:	f0 68       	ori	r31, 0x80	; 128
    2706:	3f 2e       	mov	r3, r31
    2708:	2a e0       	ldi	r18, 0x0A	; 10
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	a3 01       	movw	r20, r6
    270e:	0e 94 ae 14 	call	0x295c	; 0x295c <__ultoa_invert>
    2712:	88 2e       	mov	r8, r24
    2714:	86 18       	sub	r8, r6
    2716:	45 c0       	rjmp	.+138    	; 0x27a2 <vfprintf+0x2ac>
    2718:	85 37       	cpi	r24, 0x75	; 117
    271a:	31 f4       	brne	.+12     	; 0x2728 <vfprintf+0x232>
    271c:	23 2d       	mov	r18, r3
    271e:	2f 7e       	andi	r18, 0xEF	; 239
    2720:	b2 2e       	mov	r11, r18
    2722:	2a e0       	ldi	r18, 0x0A	; 10
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	25 c0       	rjmp	.+74     	; 0x2772 <vfprintf+0x27c>
    2728:	93 2d       	mov	r25, r3
    272a:	99 7f       	andi	r25, 0xF9	; 249
    272c:	b9 2e       	mov	r11, r25
    272e:	8f 36       	cpi	r24, 0x6F	; 111
    2730:	c1 f0       	breq	.+48     	; 0x2762 <vfprintf+0x26c>
    2732:	18 f4       	brcc	.+6      	; 0x273a <vfprintf+0x244>
    2734:	88 35       	cpi	r24, 0x58	; 88
    2736:	79 f0       	breq	.+30     	; 0x2756 <vfprintf+0x260>
    2738:	b5 c0       	rjmp	.+362    	; 0x28a4 <vfprintf+0x3ae>
    273a:	80 37       	cpi	r24, 0x70	; 112
    273c:	19 f0       	breq	.+6      	; 0x2744 <vfprintf+0x24e>
    273e:	88 37       	cpi	r24, 0x78	; 120
    2740:	21 f0       	breq	.+8      	; 0x274a <vfprintf+0x254>
    2742:	b0 c0       	rjmp	.+352    	; 0x28a4 <vfprintf+0x3ae>
    2744:	e9 2f       	mov	r30, r25
    2746:	e0 61       	ori	r30, 0x10	; 16
    2748:	be 2e       	mov	r11, r30
    274a:	b4 fe       	sbrs	r11, 4
    274c:	0d c0       	rjmp	.+26     	; 0x2768 <vfprintf+0x272>
    274e:	fb 2d       	mov	r31, r11
    2750:	f4 60       	ori	r31, 0x04	; 4
    2752:	bf 2e       	mov	r11, r31
    2754:	09 c0       	rjmp	.+18     	; 0x2768 <vfprintf+0x272>
    2756:	34 fe       	sbrs	r3, 4
    2758:	0a c0       	rjmp	.+20     	; 0x276e <vfprintf+0x278>
    275a:	29 2f       	mov	r18, r25
    275c:	26 60       	ori	r18, 0x06	; 6
    275e:	b2 2e       	mov	r11, r18
    2760:	06 c0       	rjmp	.+12     	; 0x276e <vfprintf+0x278>
    2762:	28 e0       	ldi	r18, 0x08	; 8
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	05 c0       	rjmp	.+10     	; 0x2772 <vfprintf+0x27c>
    2768:	20 e1       	ldi	r18, 0x10	; 16
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	02 c0       	rjmp	.+4      	; 0x2772 <vfprintf+0x27c>
    276e:	20 e1       	ldi	r18, 0x10	; 16
    2770:	32 e0       	ldi	r19, 0x02	; 2
    2772:	f8 01       	movw	r30, r16
    2774:	b7 fe       	sbrs	r11, 7
    2776:	07 c0       	rjmp	.+14     	; 0x2786 <vfprintf+0x290>
    2778:	60 81       	ld	r22, Z
    277a:	71 81       	ldd	r23, Z+1	; 0x01
    277c:	82 81       	ldd	r24, Z+2	; 0x02
    277e:	93 81       	ldd	r25, Z+3	; 0x03
    2780:	0c 5f       	subi	r16, 0xFC	; 252
    2782:	1f 4f       	sbci	r17, 0xFF	; 255
    2784:	06 c0       	rjmp	.+12     	; 0x2792 <vfprintf+0x29c>
    2786:	60 81       	ld	r22, Z
    2788:	71 81       	ldd	r23, Z+1	; 0x01
    278a:	80 e0       	ldi	r24, 0x00	; 0
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	0e 5f       	subi	r16, 0xFE	; 254
    2790:	1f 4f       	sbci	r17, 0xFF	; 255
    2792:	a3 01       	movw	r20, r6
    2794:	0e 94 ae 14 	call	0x295c	; 0x295c <__ultoa_invert>
    2798:	88 2e       	mov	r8, r24
    279a:	86 18       	sub	r8, r6
    279c:	fb 2d       	mov	r31, r11
    279e:	ff 77       	andi	r31, 0x7F	; 127
    27a0:	3f 2e       	mov	r3, r31
    27a2:	36 fe       	sbrs	r3, 6
    27a4:	0d c0       	rjmp	.+26     	; 0x27c0 <vfprintf+0x2ca>
    27a6:	23 2d       	mov	r18, r3
    27a8:	2e 7f       	andi	r18, 0xFE	; 254
    27aa:	a2 2e       	mov	r10, r18
    27ac:	89 14       	cp	r8, r9
    27ae:	58 f4       	brcc	.+22     	; 0x27c6 <vfprintf+0x2d0>
    27b0:	34 fe       	sbrs	r3, 4
    27b2:	0b c0       	rjmp	.+22     	; 0x27ca <vfprintf+0x2d4>
    27b4:	32 fc       	sbrc	r3, 2
    27b6:	09 c0       	rjmp	.+18     	; 0x27ca <vfprintf+0x2d4>
    27b8:	83 2d       	mov	r24, r3
    27ba:	8e 7e       	andi	r24, 0xEE	; 238
    27bc:	a8 2e       	mov	r10, r24
    27be:	05 c0       	rjmp	.+10     	; 0x27ca <vfprintf+0x2d4>
    27c0:	b8 2c       	mov	r11, r8
    27c2:	a3 2c       	mov	r10, r3
    27c4:	03 c0       	rjmp	.+6      	; 0x27cc <vfprintf+0x2d6>
    27c6:	b8 2c       	mov	r11, r8
    27c8:	01 c0       	rjmp	.+2      	; 0x27cc <vfprintf+0x2d6>
    27ca:	b9 2c       	mov	r11, r9
    27cc:	a4 fe       	sbrs	r10, 4
    27ce:	0f c0       	rjmp	.+30     	; 0x27ee <vfprintf+0x2f8>
    27d0:	fe 01       	movw	r30, r28
    27d2:	e8 0d       	add	r30, r8
    27d4:	f1 1d       	adc	r31, r1
    27d6:	80 81       	ld	r24, Z
    27d8:	80 33       	cpi	r24, 0x30	; 48
    27da:	21 f4       	brne	.+8      	; 0x27e4 <vfprintf+0x2ee>
    27dc:	9a 2d       	mov	r25, r10
    27de:	99 7e       	andi	r25, 0xE9	; 233
    27e0:	a9 2e       	mov	r10, r25
    27e2:	09 c0       	rjmp	.+18     	; 0x27f6 <vfprintf+0x300>
    27e4:	a2 fe       	sbrs	r10, 2
    27e6:	06 c0       	rjmp	.+12     	; 0x27f4 <vfprintf+0x2fe>
    27e8:	b3 94       	inc	r11
    27ea:	b3 94       	inc	r11
    27ec:	04 c0       	rjmp	.+8      	; 0x27f6 <vfprintf+0x300>
    27ee:	8a 2d       	mov	r24, r10
    27f0:	86 78       	andi	r24, 0x86	; 134
    27f2:	09 f0       	breq	.+2      	; 0x27f6 <vfprintf+0x300>
    27f4:	b3 94       	inc	r11
    27f6:	a3 fc       	sbrc	r10, 3
    27f8:	11 c0       	rjmp	.+34     	; 0x281c <vfprintf+0x326>
    27fa:	a0 fe       	sbrs	r10, 0
    27fc:	06 c0       	rjmp	.+12     	; 0x280a <vfprintf+0x314>
    27fe:	b2 14       	cp	r11, r2
    2800:	88 f4       	brcc	.+34     	; 0x2824 <vfprintf+0x32e>
    2802:	28 0c       	add	r2, r8
    2804:	92 2c       	mov	r9, r2
    2806:	9b 18       	sub	r9, r11
    2808:	0e c0       	rjmp	.+28     	; 0x2826 <vfprintf+0x330>
    280a:	b2 14       	cp	r11, r2
    280c:	60 f4       	brcc	.+24     	; 0x2826 <vfprintf+0x330>
    280e:	b6 01       	movw	r22, r12
    2810:	80 e2       	ldi	r24, 0x20	; 32
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	0e 94 72 14 	call	0x28e4	; 0x28e4 <fputc>
    2818:	b3 94       	inc	r11
    281a:	f7 cf       	rjmp	.-18     	; 0x280a <vfprintf+0x314>
    281c:	b2 14       	cp	r11, r2
    281e:	18 f4       	brcc	.+6      	; 0x2826 <vfprintf+0x330>
    2820:	2b 18       	sub	r2, r11
    2822:	02 c0       	rjmp	.+4      	; 0x2828 <vfprintf+0x332>
    2824:	98 2c       	mov	r9, r8
    2826:	21 2c       	mov	r2, r1
    2828:	a4 fe       	sbrs	r10, 4
    282a:	10 c0       	rjmp	.+32     	; 0x284c <vfprintf+0x356>
    282c:	b6 01       	movw	r22, r12
    282e:	80 e3       	ldi	r24, 0x30	; 48
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	0e 94 72 14 	call	0x28e4	; 0x28e4 <fputc>
    2836:	a2 fe       	sbrs	r10, 2
    2838:	17 c0       	rjmp	.+46     	; 0x2868 <vfprintf+0x372>
    283a:	a1 fc       	sbrc	r10, 1
    283c:	03 c0       	rjmp	.+6      	; 0x2844 <vfprintf+0x34e>
    283e:	88 e7       	ldi	r24, 0x78	; 120
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	02 c0       	rjmp	.+4      	; 0x2848 <vfprintf+0x352>
    2844:	88 e5       	ldi	r24, 0x58	; 88
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	b6 01       	movw	r22, r12
    284a:	0c c0       	rjmp	.+24     	; 0x2864 <vfprintf+0x36e>
    284c:	8a 2d       	mov	r24, r10
    284e:	86 78       	andi	r24, 0x86	; 134
    2850:	59 f0       	breq	.+22     	; 0x2868 <vfprintf+0x372>
    2852:	a1 fe       	sbrs	r10, 1
    2854:	02 c0       	rjmp	.+4      	; 0x285a <vfprintf+0x364>
    2856:	8b e2       	ldi	r24, 0x2B	; 43
    2858:	01 c0       	rjmp	.+2      	; 0x285c <vfprintf+0x366>
    285a:	80 e2       	ldi	r24, 0x20	; 32
    285c:	a7 fc       	sbrc	r10, 7
    285e:	8d e2       	ldi	r24, 0x2D	; 45
    2860:	b6 01       	movw	r22, r12
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	0e 94 72 14 	call	0x28e4	; 0x28e4 <fputc>
    2868:	89 14       	cp	r8, r9
    286a:	38 f4       	brcc	.+14     	; 0x287a <vfprintf+0x384>
    286c:	b6 01       	movw	r22, r12
    286e:	80 e3       	ldi	r24, 0x30	; 48
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	0e 94 72 14 	call	0x28e4	; 0x28e4 <fputc>
    2876:	9a 94       	dec	r9
    2878:	f7 cf       	rjmp	.-18     	; 0x2868 <vfprintf+0x372>
    287a:	8a 94       	dec	r8
    287c:	f3 01       	movw	r30, r6
    287e:	e8 0d       	add	r30, r8
    2880:	f1 1d       	adc	r31, r1
    2882:	80 81       	ld	r24, Z
    2884:	b6 01       	movw	r22, r12
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	0e 94 72 14 	call	0x28e4	; 0x28e4 <fputc>
    288c:	81 10       	cpse	r8, r1
    288e:	f5 cf       	rjmp	.-22     	; 0x287a <vfprintf+0x384>
    2890:	22 20       	and	r2, r2
    2892:	09 f4       	brne	.+2      	; 0x2896 <vfprintf+0x3a0>
    2894:	42 ce       	rjmp	.-892    	; 0x251a <vfprintf+0x24>
    2896:	b6 01       	movw	r22, r12
    2898:	80 e2       	ldi	r24, 0x20	; 32
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	0e 94 72 14 	call	0x28e4	; 0x28e4 <fputc>
    28a0:	2a 94       	dec	r2
    28a2:	f6 cf       	rjmp	.-20     	; 0x2890 <vfprintf+0x39a>
    28a4:	f6 01       	movw	r30, r12
    28a6:	86 81       	ldd	r24, Z+6	; 0x06
    28a8:	97 81       	ldd	r25, Z+7	; 0x07
    28aa:	02 c0       	rjmp	.+4      	; 0x28b0 <vfprintf+0x3ba>
    28ac:	8f ef       	ldi	r24, 0xFF	; 255
    28ae:	9f ef       	ldi	r25, 0xFF	; 255
    28b0:	2b 96       	adiw	r28, 0x0b	; 11
    28b2:	e2 e1       	ldi	r30, 0x12	; 18
    28b4:	0c 94 28 15 	jmp	0x2a50	; 0x2a50 <__epilogue_restores__>

000028b8 <strnlen_P>:
    28b8:	fc 01       	movw	r30, r24
    28ba:	05 90       	lpm	r0, Z+
    28bc:	61 50       	subi	r22, 0x01	; 1
    28be:	70 40       	sbci	r23, 0x00	; 0
    28c0:	01 10       	cpse	r0, r1
    28c2:	d8 f7       	brcc	.-10     	; 0x28ba <strnlen_P+0x2>
    28c4:	80 95       	com	r24
    28c6:	90 95       	com	r25
    28c8:	8e 0f       	add	r24, r30
    28ca:	9f 1f       	adc	r25, r31
    28cc:	08 95       	ret

000028ce <strnlen>:
    28ce:	fc 01       	movw	r30, r24
    28d0:	61 50       	subi	r22, 0x01	; 1
    28d2:	70 40       	sbci	r23, 0x00	; 0
    28d4:	01 90       	ld	r0, Z+
    28d6:	01 10       	cpse	r0, r1
    28d8:	d8 f7       	brcc	.-10     	; 0x28d0 <strnlen+0x2>
    28da:	80 95       	com	r24
    28dc:	90 95       	com	r25
    28de:	8e 0f       	add	r24, r30
    28e0:	9f 1f       	adc	r25, r31
    28e2:	08 95       	ret

000028e4 <fputc>:
    28e4:	0f 93       	push	r16
    28e6:	1f 93       	push	r17
    28e8:	cf 93       	push	r28
    28ea:	df 93       	push	r29
    28ec:	fb 01       	movw	r30, r22
    28ee:	23 81       	ldd	r18, Z+3	; 0x03
    28f0:	21 fd       	sbrc	r18, 1
    28f2:	03 c0       	rjmp	.+6      	; 0x28fa <fputc+0x16>
    28f4:	8f ef       	ldi	r24, 0xFF	; 255
    28f6:	9f ef       	ldi	r25, 0xFF	; 255
    28f8:	2c c0       	rjmp	.+88     	; 0x2952 <fputc+0x6e>
    28fa:	22 ff       	sbrs	r18, 2
    28fc:	16 c0       	rjmp	.+44     	; 0x292a <fputc+0x46>
    28fe:	46 81       	ldd	r20, Z+6	; 0x06
    2900:	57 81       	ldd	r21, Z+7	; 0x07
    2902:	24 81       	ldd	r18, Z+4	; 0x04
    2904:	35 81       	ldd	r19, Z+5	; 0x05
    2906:	42 17       	cp	r20, r18
    2908:	53 07       	cpc	r21, r19
    290a:	44 f4       	brge	.+16     	; 0x291c <fputc+0x38>
    290c:	a0 81       	ld	r26, Z
    290e:	b1 81       	ldd	r27, Z+1	; 0x01
    2910:	9d 01       	movw	r18, r26
    2912:	2f 5f       	subi	r18, 0xFF	; 255
    2914:	3f 4f       	sbci	r19, 0xFF	; 255
    2916:	31 83       	std	Z+1, r19	; 0x01
    2918:	20 83       	st	Z, r18
    291a:	8c 93       	st	X, r24
    291c:	26 81       	ldd	r18, Z+6	; 0x06
    291e:	37 81       	ldd	r19, Z+7	; 0x07
    2920:	2f 5f       	subi	r18, 0xFF	; 255
    2922:	3f 4f       	sbci	r19, 0xFF	; 255
    2924:	37 83       	std	Z+7, r19	; 0x07
    2926:	26 83       	std	Z+6, r18	; 0x06
    2928:	14 c0       	rjmp	.+40     	; 0x2952 <fputc+0x6e>
    292a:	8b 01       	movw	r16, r22
    292c:	ec 01       	movw	r28, r24
    292e:	fb 01       	movw	r30, r22
    2930:	00 84       	ldd	r0, Z+8	; 0x08
    2932:	f1 85       	ldd	r31, Z+9	; 0x09
    2934:	e0 2d       	mov	r30, r0
    2936:	09 95       	icall
    2938:	89 2b       	or	r24, r25
    293a:	e1 f6       	brne	.-72     	; 0x28f4 <fputc+0x10>
    293c:	d8 01       	movw	r26, r16
    293e:	16 96       	adiw	r26, 0x06	; 6
    2940:	8d 91       	ld	r24, X+
    2942:	9c 91       	ld	r25, X
    2944:	17 97       	sbiw	r26, 0x07	; 7
    2946:	01 96       	adiw	r24, 0x01	; 1
    2948:	17 96       	adiw	r26, 0x07	; 7
    294a:	9c 93       	st	X, r25
    294c:	8e 93       	st	-X, r24
    294e:	16 97       	sbiw	r26, 0x06	; 6
    2950:	ce 01       	movw	r24, r28
    2952:	df 91       	pop	r29
    2954:	cf 91       	pop	r28
    2956:	1f 91       	pop	r17
    2958:	0f 91       	pop	r16
    295a:	08 95       	ret

0000295c <__ultoa_invert>:
    295c:	fa 01       	movw	r30, r20
    295e:	aa 27       	eor	r26, r26
    2960:	28 30       	cpi	r18, 0x08	; 8
    2962:	51 f1       	breq	.+84     	; 0x29b8 <__ultoa_invert+0x5c>
    2964:	20 31       	cpi	r18, 0x10	; 16
    2966:	81 f1       	breq	.+96     	; 0x29c8 <__ultoa_invert+0x6c>
    2968:	e8 94       	clt
    296a:	6f 93       	push	r22
    296c:	6e 7f       	andi	r22, 0xFE	; 254
    296e:	6e 5f       	subi	r22, 0xFE	; 254
    2970:	7f 4f       	sbci	r23, 0xFF	; 255
    2972:	8f 4f       	sbci	r24, 0xFF	; 255
    2974:	9f 4f       	sbci	r25, 0xFF	; 255
    2976:	af 4f       	sbci	r26, 0xFF	; 255
    2978:	b1 e0       	ldi	r27, 0x01	; 1
    297a:	3e d0       	rcall	.+124    	; 0x29f8 <__ultoa_invert+0x9c>
    297c:	b4 e0       	ldi	r27, 0x04	; 4
    297e:	3c d0       	rcall	.+120    	; 0x29f8 <__ultoa_invert+0x9c>
    2980:	67 0f       	add	r22, r23
    2982:	78 1f       	adc	r23, r24
    2984:	89 1f       	adc	r24, r25
    2986:	9a 1f       	adc	r25, r26
    2988:	a1 1d       	adc	r26, r1
    298a:	68 0f       	add	r22, r24
    298c:	79 1f       	adc	r23, r25
    298e:	8a 1f       	adc	r24, r26
    2990:	91 1d       	adc	r25, r1
    2992:	a1 1d       	adc	r26, r1
    2994:	6a 0f       	add	r22, r26
    2996:	71 1d       	adc	r23, r1
    2998:	81 1d       	adc	r24, r1
    299a:	91 1d       	adc	r25, r1
    299c:	a1 1d       	adc	r26, r1
    299e:	20 d0       	rcall	.+64     	; 0x29e0 <__ultoa_invert+0x84>
    29a0:	09 f4       	brne	.+2      	; 0x29a4 <__ultoa_invert+0x48>
    29a2:	68 94       	set
    29a4:	3f 91       	pop	r19
    29a6:	2a e0       	ldi	r18, 0x0A	; 10
    29a8:	26 9f       	mul	r18, r22
    29aa:	11 24       	eor	r1, r1
    29ac:	30 19       	sub	r19, r0
    29ae:	30 5d       	subi	r19, 0xD0	; 208
    29b0:	31 93       	st	Z+, r19
    29b2:	de f6       	brtc	.-74     	; 0x296a <__ultoa_invert+0xe>
    29b4:	cf 01       	movw	r24, r30
    29b6:	08 95       	ret
    29b8:	46 2f       	mov	r20, r22
    29ba:	47 70       	andi	r20, 0x07	; 7
    29bc:	40 5d       	subi	r20, 0xD0	; 208
    29be:	41 93       	st	Z+, r20
    29c0:	b3 e0       	ldi	r27, 0x03	; 3
    29c2:	0f d0       	rcall	.+30     	; 0x29e2 <__ultoa_invert+0x86>
    29c4:	c9 f7       	brne	.-14     	; 0x29b8 <__ultoa_invert+0x5c>
    29c6:	f6 cf       	rjmp	.-20     	; 0x29b4 <__ultoa_invert+0x58>
    29c8:	46 2f       	mov	r20, r22
    29ca:	4f 70       	andi	r20, 0x0F	; 15
    29cc:	40 5d       	subi	r20, 0xD0	; 208
    29ce:	4a 33       	cpi	r20, 0x3A	; 58
    29d0:	18 f0       	brcs	.+6      	; 0x29d8 <__ultoa_invert+0x7c>
    29d2:	49 5d       	subi	r20, 0xD9	; 217
    29d4:	31 fd       	sbrc	r19, 1
    29d6:	40 52       	subi	r20, 0x20	; 32
    29d8:	41 93       	st	Z+, r20
    29da:	02 d0       	rcall	.+4      	; 0x29e0 <__ultoa_invert+0x84>
    29dc:	a9 f7       	brne	.-22     	; 0x29c8 <__ultoa_invert+0x6c>
    29de:	ea cf       	rjmp	.-44     	; 0x29b4 <__ultoa_invert+0x58>
    29e0:	b4 e0       	ldi	r27, 0x04	; 4
    29e2:	a6 95       	lsr	r26
    29e4:	97 95       	ror	r25
    29e6:	87 95       	ror	r24
    29e8:	77 95       	ror	r23
    29ea:	67 95       	ror	r22
    29ec:	ba 95       	dec	r27
    29ee:	c9 f7       	brne	.-14     	; 0x29e2 <__ultoa_invert+0x86>
    29f0:	00 97       	sbiw	r24, 0x00	; 0
    29f2:	61 05       	cpc	r22, r1
    29f4:	71 05       	cpc	r23, r1
    29f6:	08 95       	ret
    29f8:	9b 01       	movw	r18, r22
    29fa:	ac 01       	movw	r20, r24
    29fc:	0a 2e       	mov	r0, r26
    29fe:	06 94       	lsr	r0
    2a00:	57 95       	ror	r21
    2a02:	47 95       	ror	r20
    2a04:	37 95       	ror	r19
    2a06:	27 95       	ror	r18
    2a08:	ba 95       	dec	r27
    2a0a:	c9 f7       	brne	.-14     	; 0x29fe <__ultoa_invert+0xa2>
    2a0c:	62 0f       	add	r22, r18
    2a0e:	73 1f       	adc	r23, r19
    2a10:	84 1f       	adc	r24, r20
    2a12:	95 1f       	adc	r25, r21
    2a14:	a0 1d       	adc	r26, r0
    2a16:	08 95       	ret

00002a18 <__prologue_saves__>:
    2a18:	2f 92       	push	r2
    2a1a:	3f 92       	push	r3
    2a1c:	4f 92       	push	r4
    2a1e:	5f 92       	push	r5
    2a20:	6f 92       	push	r6
    2a22:	7f 92       	push	r7
    2a24:	8f 92       	push	r8
    2a26:	9f 92       	push	r9
    2a28:	af 92       	push	r10
    2a2a:	bf 92       	push	r11
    2a2c:	cf 92       	push	r12
    2a2e:	df 92       	push	r13
    2a30:	ef 92       	push	r14
    2a32:	ff 92       	push	r15
    2a34:	0f 93       	push	r16
    2a36:	1f 93       	push	r17
    2a38:	cf 93       	push	r28
    2a3a:	df 93       	push	r29
    2a3c:	cd b7       	in	r28, 0x3d	; 61
    2a3e:	de b7       	in	r29, 0x3e	; 62
    2a40:	ca 1b       	sub	r28, r26
    2a42:	db 0b       	sbc	r29, r27
    2a44:	0f b6       	in	r0, 0x3f	; 63
    2a46:	f8 94       	cli
    2a48:	de bf       	out	0x3e, r29	; 62
    2a4a:	0f be       	out	0x3f, r0	; 63
    2a4c:	cd bf       	out	0x3d, r28	; 61
    2a4e:	09 94       	ijmp

00002a50 <__epilogue_restores__>:
    2a50:	2a 88       	ldd	r2, Y+18	; 0x12
    2a52:	39 88       	ldd	r3, Y+17	; 0x11
    2a54:	48 88       	ldd	r4, Y+16	; 0x10
    2a56:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a58:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a5a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a5c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a5e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a60:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a62:	b9 84       	ldd	r11, Y+9	; 0x09
    2a64:	c8 84       	ldd	r12, Y+8	; 0x08
    2a66:	df 80       	ldd	r13, Y+7	; 0x07
    2a68:	ee 80       	ldd	r14, Y+6	; 0x06
    2a6a:	fd 80       	ldd	r15, Y+5	; 0x05
    2a6c:	0c 81       	ldd	r16, Y+4	; 0x04
    2a6e:	1b 81       	ldd	r17, Y+3	; 0x03
    2a70:	aa 81       	ldd	r26, Y+2	; 0x02
    2a72:	b9 81       	ldd	r27, Y+1	; 0x01
    2a74:	ce 0f       	add	r28, r30
    2a76:	d1 1d       	adc	r29, r1
    2a78:	0f b6       	in	r0, 0x3f	; 63
    2a7a:	f8 94       	cli
    2a7c:	de bf       	out	0x3e, r29	; 62
    2a7e:	0f be       	out	0x3f, r0	; 63
    2a80:	cd bf       	out	0x3d, r28	; 61
    2a82:	ed 01       	movw	r28, r26
    2a84:	08 95       	ret

00002a86 <_exit>:
    2a86:	f8 94       	cli

00002a88 <__stop_program>:
    2a88:	ff cf       	rjmp	.-2      	; 0x2a88 <__stop_program>
